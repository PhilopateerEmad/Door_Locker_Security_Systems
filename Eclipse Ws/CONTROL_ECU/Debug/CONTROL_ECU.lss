
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000026f0  00002784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800078  00800078  0000279c  2**0
                  ALLOC
  3 .stab         00002c04  00000000  00000000  0000279c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001859  00000000  00000000  000053a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008af2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000099dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a78c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ab79  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b347  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__vector_3>
      10:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__vector_8>
      24:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "twi.h"
#include "avr/io.h"
#include "dc_motor.h"
#include "buzzer.h"

int main(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ab 97       	sbiw	r28, 0x2b	; 43
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	Timer_ConfigType timer_config_ptr = {TIMER0_ID,COMPARE,TIMER0_F_CPU_1024,0,252};
     b5a:	9e 01       	movw	r18, r28
     b5c:	2e 5f       	subi	r18, 0xFE	; 254
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	3e 8f       	std	Y+30, r19	; 0x1e
     b62:	2d 8f       	std	Y+29, r18	; 0x1d
     b64:	82 e7       	ldi	r24, 0x72	; 114
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	98 a3       	std	Y+32, r25	; 0x20
     b6a:	8f 8f       	std	Y+31, r24	; 0x1f
     b6c:	95 e0       	ldi	r25, 0x05	; 5
     b6e:	99 a3       	std	Y+33, r25	; 0x21
     b70:	ef 8d       	ldd	r30, Y+31	; 0x1f
     b72:	f8 a1       	ldd	r31, Y+32	; 0x20
     b74:	00 80       	ld	r0, Z
     b76:	2f 8d       	ldd	r18, Y+31	; 0x1f
     b78:	38 a1       	ldd	r19, Y+32	; 0x20
     b7a:	2f 5f       	subi	r18, 0xFF	; 255
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	38 a3       	std	Y+32, r19	; 0x20
     b80:	2f 8f       	std	Y+31, r18	; 0x1f
     b82:	ed 8d       	ldd	r30, Y+29	; 0x1d
     b84:	fe 8d       	ldd	r31, Y+30	; 0x1e
     b86:	00 82       	st	Z, r0
     b88:	2d 8d       	ldd	r18, Y+29	; 0x1d
     b8a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     b8c:	2f 5f       	subi	r18, 0xFF	; 255
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	3e 8f       	std	Y+30, r19	; 0x1e
     b92:	2d 8f       	std	Y+29, r18	; 0x1d
     b94:	39 a1       	ldd	r19, Y+33	; 0x21
     b96:	31 50       	subi	r19, 0x01	; 1
     b98:	39 a3       	std	Y+33, r19	; 0x21
     b9a:	89 a1       	ldd	r24, Y+33	; 0x21
     b9c:	88 23       	and	r24, r24
     b9e:	41 f7       	brne	.-48     	; 0xb70 <main+0x2a>
	uint8 password[PASSWORD_SIZE];
	uint8 re_password[PASSWORD_SIZE];
	uint8 respondAccess;
	Uart_ConfigType uart_config_ptr ={CHAR_SIZE_8_BITS,NO_PARITY,STOP_1,9600};
     ba0:	fe 01       	movw	r30, r28
     ba2:	71 96       	adiw	r30, 0x11	; 17
     ba4:	fb a3       	std	Y+35, r31	; 0x23
     ba6:	ea a3       	std	Y+34, r30	; 0x22
     ba8:	2b e6       	ldi	r18, 0x6B	; 107
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	3d a3       	std	Y+37, r19	; 0x25
     bae:	2c a3       	std	Y+36, r18	; 0x24
     bb0:	37 e0       	ldi	r19, 0x07	; 7
     bb2:	3e a3       	std	Y+38, r19	; 0x26
     bb4:	ec a1       	ldd	r30, Y+36	; 0x24
     bb6:	fd a1       	ldd	r31, Y+37	; 0x25
     bb8:	00 80       	ld	r0, Z
     bba:	2c a1       	ldd	r18, Y+36	; 0x24
     bbc:	3d a1       	ldd	r19, Y+37	; 0x25
     bbe:	2f 5f       	subi	r18, 0xFF	; 255
     bc0:	3f 4f       	sbci	r19, 0xFF	; 255
     bc2:	3d a3       	std	Y+37, r19	; 0x25
     bc4:	2c a3       	std	Y+36, r18	; 0x24
     bc6:	ea a1       	ldd	r30, Y+34	; 0x22
     bc8:	fb a1       	ldd	r31, Y+35	; 0x23
     bca:	00 82       	st	Z, r0
     bcc:	2a a1       	ldd	r18, Y+34	; 0x22
     bce:	3b a1       	ldd	r19, Y+35	; 0x23
     bd0:	2f 5f       	subi	r18, 0xFF	; 255
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	3b a3       	std	Y+35, r19	; 0x23
     bd6:	2a a3       	std	Y+34, r18	; 0x22
     bd8:	3e a1       	ldd	r19, Y+38	; 0x26
     bda:	31 50       	subi	r19, 0x01	; 1
     bdc:	3e a3       	std	Y+38, r19	; 0x26
     bde:	8e a1       	ldd	r24, Y+38	; 0x26
     be0:	88 23       	and	r24, r24
     be2:	41 f7       	brne	.-48     	; 0xbb4 <main+0x6e>
	UART_init(&uart_config_ptr);
     be4:	ce 01       	movw	r24, r28
     be6:	41 96       	adiw	r24, 0x11	; 17
     be8:	0e 94 2f 12 	call	0x245e	; 0x245e <UART_init>
	DcMotor_Init();
     bec:	0e 94 91 0a 	call	0x1522	; 0x1522 <DcMotor_Init>
	Twi_ConfigType twi_config_ptr = {0x02,PRESCALER_1,MY_ADDRESS};
     bf0:	fe 01       	movw	r30, r28
     bf2:	78 96       	adiw	r30, 0x18	; 24
     bf4:	f8 a7       	std	Y+40, r31	; 0x28
     bf6:	ef a3       	std	Y+39, r30	; 0x27
     bf8:	28 e6       	ldi	r18, 0x68	; 104
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	3a a7       	std	Y+42, r19	; 0x2a
     bfe:	29 a7       	std	Y+41, r18	; 0x29
     c00:	33 e0       	ldi	r19, 0x03	; 3
     c02:	3b a7       	std	Y+43, r19	; 0x2b
     c04:	e9 a5       	ldd	r30, Y+41	; 0x29
     c06:	fa a5       	ldd	r31, Y+42	; 0x2a
     c08:	00 80       	ld	r0, Z
     c0a:	29 a5       	ldd	r18, Y+41	; 0x29
     c0c:	3a a5       	ldd	r19, Y+42	; 0x2a
     c0e:	2f 5f       	subi	r18, 0xFF	; 255
     c10:	3f 4f       	sbci	r19, 0xFF	; 255
     c12:	3a a7       	std	Y+42, r19	; 0x2a
     c14:	29 a7       	std	Y+41, r18	; 0x29
     c16:	ef a1       	ldd	r30, Y+39	; 0x27
     c18:	f8 a5       	ldd	r31, Y+40	; 0x28
     c1a:	00 82       	st	Z, r0
     c1c:	2f a1       	ldd	r18, Y+39	; 0x27
     c1e:	38 a5       	ldd	r19, Y+40	; 0x28
     c20:	2f 5f       	subi	r18, 0xFF	; 255
     c22:	3f 4f       	sbci	r19, 0xFF	; 255
     c24:	38 a7       	std	Y+40, r19	; 0x28
     c26:	2f a3       	std	Y+39, r18	; 0x27
     c28:	3b a5       	ldd	r19, Y+43	; 0x2b
     c2a:	31 50       	subi	r19, 0x01	; 1
     c2c:	3b a7       	std	Y+43, r19	; 0x2b
     c2e:	8b a5       	ldd	r24, Y+43	; 0x2b
     c30:	88 23       	and	r24, r24
     c32:	41 f7       	brne	.-48     	; 0xc04 <main+0xbe>
	TWI_init(&twi_config_ptr);
     c34:	ce 01       	movw	r24, r28
     c36:	48 96       	adiw	r24, 0x18	; 24
     c38:	0e 94 a5 11 	call	0x234a	; 0x234a <TWI_init>
	BUZZER_init();
     c3c:	0e 94 6d 0a 	call	0x14da	; 0x14da <BUZZER_init>
	SREG = (1<<7);
     c40:	ef e5       	ldi	r30, 0x5F	; 95
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 e8       	ldi	r24, 0x80	; 128
     c46:	80 83       	st	Z, r24

	if(isFirstTime(FLAG_ADDRESS_IF_ALREADY_STORED_PASSWORD)==NO_SAVED_PASSWORD_NOT_FOUND){
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	92 e0       	ldi	r25, 0x02	; 2
     c4c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <isFirstTime>
     c50:	8a 32       	cpi	r24, 0x2A	; 42
     c52:	b1 f4       	brne	.+44     	; 0xc80 <main+0x13a>

		while(1){
			storePassword(password);
     c54:	ce 01       	movw	r24, r28
     c56:	07 96       	adiw	r24, 0x07	; 7
     c58:	0e 94 be 06 	call	0xd7c	; 0xd7c <storePassword>

			storePassword(re_password);
     c5c:	ce 01       	movw	r24, r28
     c5e:	0c 96       	adiw	r24, 0x0c	; 12
     c60:	0e 94 be 06 	call	0xd7c	; 0xd7c <storePassword>

			if(isMatchedPassword(password,re_password)==MATCHED_PASSWORDS){
     c64:	ce 01       	movw	r24, r28
     c66:	07 96       	adiw	r24, 0x07	; 7
     c68:	9e 01       	movw	r18, r28
     c6a:	24 5f       	subi	r18, 0xF4	; 244
     c6c:	3f 4f       	sbci	r19, 0xFF	; 255
     c6e:	b9 01       	movw	r22, r18
     c70:	0e 94 cd 08 	call	0x119a	; 0x119a <isMatchedPassword>
     c74:	81 30       	cpi	r24, 0x01	; 1
     c76:	71 f7       	brne	.-36     	; 0xc54 <main+0x10e>
					break;
			}
		}

		storeInEeprom(password);
     c78:	ce 01       	movw	r24, r28
     c7a:	07 96       	adiw	r24, 0x07	; 7
     c7c:	0e 94 9c 07 	call	0xf38	; 0xf38 <storeInEeprom>
	}


	while(1){
		storePassword(password);
     c80:	ce 01       	movw	r24, r28
     c82:	07 96       	adiw	r24, 0x07	; 7
     c84:	0e 94 be 06 	call	0xd7c	; 0xd7c <storePassword>

		respondAccess=isAllowedToAccess(password);
     c88:	ce 01       	movw	r24, r28
     c8a:	07 96       	adiw	r24, 0x07	; 7
     c8c:	0e 94 8f 08 	call	0x111e	; 0x111e <isAllowedToAccess>
     c90:	89 83       	std	Y+1, r24	; 0x01

		if(respondAccess==YOU_ARE_BANNED){
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	8e 30       	cpi	r24, 0x0E	; 14
     c96:	49 f4       	brne	.+18     	; 0xcaa <main+0x164>

			BUZZER_ON();
     c98:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <BUZZER_ON>

			waitOneMinute(&timer_config_ptr);
     c9c:	ce 01       	movw	r24, r28
     c9e:	02 96       	adiw	r24, 0x02	; 2
     ca0:	0e 94 3f 0a 	call	0x147e	; 0x147e <waitOneMinute>
			BUZZER_OFF();
     ca4:	0e 94 85 0a 	call	0x150a	; 0x150a <BUZZER_OFF>
     ca8:	eb cf       	rjmp	.-42     	; 0xc80 <main+0x13a>
		}

		else if(respondAccess==YOU_ARE_ALLOWED){
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	8c 30       	cpi	r24, 0x0C	; 12
     cae:	09 f0       	breq	.+2      	; 0xcb2 <main+0x16c>
     cb0:	45 c0       	rjmp	.+138    	; 0xd3c <main+0x1f6>
			switch (recieveMainOption()) {
     cb2:	0e 94 16 09 	call	0x122c	; 0x122c <recieveMainOption>
     cb6:	e8 2f       	mov	r30, r24
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	fc 8f       	std	Y+28, r31	; 0x1c
     cbc:	eb 8f       	std	Y+27, r30	; 0x1b
     cbe:	2b 8d       	ldd	r18, Y+27	; 0x1b
     cc0:	3c 8d       	ldd	r19, Y+28	; 0x1c
     cc2:	2b 32       	cpi	r18, 0x2B	; 43
     cc4:	31 05       	cpc	r19, r1
     cc6:	31 f0       	breq	.+12     	; 0xcd4 <main+0x18e>
     cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ccc:	8d 32       	cpi	r24, 0x2D	; 45
     cce:	91 05       	cpc	r25, r1
     cd0:	f1 f0       	breq	.+60     	; 0xd0e <main+0x1c8>
     cd2:	d6 cf       	rjmp	.-84     	; 0xc80 <main+0x13a>
			case OPEN_DOOR:
				DcMotor_Rotate(CLOCKWISE);
     cd4:	80 e1       	ldi	r24, 0x10	; 16
     cd6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <DcMotor_Rotate>

				waitFifteenSeconds(&timer_config_ptr);
     cda:	ce 01       	movw	r24, r28
     cdc:	02 96       	adiw	r24, 0x02	; 2
     cde:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <waitFifteenSeconds>

				DcMotor_Rotate(STOP);
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <DcMotor_Rotate>


				waitThreeSeconds(&timer_config_ptr);
     ce8:	ce 01       	movw	r24, r28
     cea:	02 96       	adiw	r24, 0x02	; 2
     cec:	0e 94 11 0a 	call	0x1422	; 0x1422 <waitThreeSeconds>
				DcMotor_Rotate(ANTI_CLOCKWISE);
     cf0:	80 e2       	ldi	r24, 0x20	; 32
     cf2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <DcMotor_Rotate>

				waitFifteenSeconds(&timer_config_ptr);
     cf6:	ce 01       	movw	r24, r28
     cf8:	02 96       	adiw	r24, 0x02	; 2
     cfa:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <waitFifteenSeconds>
				DcMotor_Rotate(STOP);
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	0e 94 b0 0a 	call	0x1560	; 0x1560 <DcMotor_Rotate>

				waitThreeSeconds(&timer_config_ptr);
     d04:	ce 01       	movw	r24, r28
     d06:	02 96       	adiw	r24, 0x02	; 2
     d08:	0e 94 11 0a 	call	0x1422	; 0x1422 <waitThreeSeconds>
     d0c:	b9 cf       	rjmp	.-142    	; 0xc80 <main+0x13a>
				break;
			case CHANGE_PASSWORD:
				while(1){

					storePassword(password);
     d0e:	ce 01       	movw	r24, r28
     d10:	07 96       	adiw	r24, 0x07	; 7
     d12:	0e 94 be 06 	call	0xd7c	; 0xd7c <storePassword>


					storePassword(re_password);
     d16:	ce 01       	movw	r24, r28
     d18:	0c 96       	adiw	r24, 0x0c	; 12
     d1a:	0e 94 be 06 	call	0xd7c	; 0xd7c <storePassword>

					if(isMatchedPassword(password,re_password)==MATCHED_PASSWORDS){
     d1e:	ce 01       	movw	r24, r28
     d20:	07 96       	adiw	r24, 0x07	; 7
     d22:	9e 01       	movw	r18, r28
     d24:	24 5f       	subi	r18, 0xF4	; 244
     d26:	3f 4f       	sbci	r19, 0xFF	; 255
     d28:	b9 01       	movw	r22, r18
     d2a:	0e 94 cd 08 	call	0x119a	; 0x119a <isMatchedPassword>
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	71 f7       	brne	.-36     	; 0xd0e <main+0x1c8>
							break;
					}
				}

				storeInEeprom(password);
     d32:	ce 01       	movw	r24, r28
     d34:	07 96       	adiw	r24, 0x07	; 7
     d36:	0e 94 9c 07 	call	0xf38	; 0xf38 <storeInEeprom>
     d3a:	a2 cf       	rjmp	.-188    	; 0xc80 <main+0x13a>
				break;
			}
		}

		else{
			DcMotor_Rotate(STOP);
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <DcMotor_Rotate>
     d42:	9e cf       	rjmp	.-196    	; 0xc80 <main+0x13a>

00000d44 <waitOtherAvailability>:
 * the two UART devices this function asks the other device if it is ready
 * when the other device is ready it sends he is
 * param1: none
 * return: none
 * */
void static waitOtherAvailability(void){
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(ARE_YOU_READY);
     d4c:	8a e0       	ldi	r24, 0x0A	; 10
     d4e:	0e 94 8b 12 	call	0x2516	; 0x2516 <UART_sendByte>
	while(UART_recieveByte()!=IS_READY);
     d52:	0e 94 a2 12 	call	0x2544	; 0x2544 <UART_recieveByte>
     d56:	8b 30       	cpi	r24, 0x0B	; 11
     d58:	e1 f7       	brne	.-8      	; 0xd52 <waitOtherAvailability+0xe>
}
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <answeringAvailability>:

/*@description: this function to sync communication between
 * the two UART devices this function responds to question of the other UART
 * device and doesn't respond till it is available*/
void static answeringAvailability(void){
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != ARE_YOU_READY);
     d68:	0e 94 a2 12 	call	0x2544	; 0x2544 <UART_recieveByte>
     d6c:	8a 30       	cpi	r24, 0x0A	; 10
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <answeringAvailability+0x8>
	UART_sendByte(IS_READY);
     d70:	8b e0       	ldi	r24, 0x0B	; 11
     d72:	0e 94 8b 12 	call	0x2516	; 0x2516 <UART_sendByte>
}
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <storePassword>:

/*@description: this function to store password in temporarily array to use it when compare
 * param1: pointer to char array that password will be stored temporarily in it
 * return: none*/
void storePassword(uint8 *password){
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	61 97       	sbiw	r28, 0x11	; 17
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
     d94:	99 8b       	std	Y+17, r25	; 0x11
     d96:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	answeringAvailability();
     d98:	0e 94 b0 06 	call	0xd60	; 0xd60 <answeringAvailability>
	for(i = 0;i<PASSWORD_SIZE;i++){
     d9c:	1f 86       	std	Y+15, r1	; 0x0f
     d9e:	81 c0       	rjmp	.+258    	; 0xea2 <storePassword+0x126>
		*(password+i) = UART_recieveByte();
     da0:	8f 85       	ldd	r24, Y+15	; 0x0f
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	88 89       	ldd	r24, Y+16	; 0x10
     da8:	99 89       	ldd	r25, Y+17	; 0x11
     daa:	8c 01       	movw	r16, r24
     dac:	02 0f       	add	r16, r18
     dae:	13 1f       	adc	r17, r19
     db0:	0e 94 a2 12 	call	0x2544	; 0x2544 <UART_recieveByte>
     db4:	f8 01       	movw	r30, r16
     db6:	80 83       	st	Z, r24
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	a0 e2       	ldi	r26, 0x20	; 32
     dbe:	b1 e4       	ldi	r27, 0x41	; 65
     dc0:	8b 87       	std	Y+11, r24	; 0x0b
     dc2:	9c 87       	std	Y+12, r25	; 0x0c
     dc4:	ad 87       	std	Y+13, r26	; 0x0d
     dc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dca:	7c 85       	ldd	r23, Y+12	; 0x0c
     dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dce:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	4a ef       	ldi	r20, 0xFA	; 250
     dd6:	54 e4       	ldi	r21, 0x44	; 68
     dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	8f 83       	std	Y+7, r24	; 0x07
     de2:	98 87       	std	Y+8, r25	; 0x08
     de4:	a9 87       	std	Y+9, r26	; 0x09
     de6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     de8:	6f 81       	ldd	r22, Y+7	; 0x07
     dea:	78 85       	ldd	r23, Y+8	; 0x08
     dec:	89 85       	ldd	r24, Y+9	; 0x09
     dee:	9a 85       	ldd	r25, Y+10	; 0x0a
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	40 e8       	ldi	r20, 0x80	; 128
     df6:	5f e3       	ldi	r21, 0x3F	; 63
     df8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dfc:	88 23       	and	r24, r24
     dfe:	2c f4       	brge	.+10     	; 0xe0a <storePassword+0x8e>
		__ticks = 1;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	9e 83       	std	Y+6, r25	; 0x06
     e06:	8d 83       	std	Y+5, r24	; 0x05
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <storePassword+0x10c>
	else if (__tmp > 65535)
     e0a:	6f 81       	ldd	r22, Y+7	; 0x07
     e0c:	78 85       	ldd	r23, Y+8	; 0x08
     e0e:	89 85       	ldd	r24, Y+9	; 0x09
     e10:	9a 85       	ldd	r25, Y+10	; 0x0a
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	3f ef       	ldi	r19, 0xFF	; 255
     e16:	4f e7       	ldi	r20, 0x7F	; 127
     e18:	57 e4       	ldi	r21, 0x47	; 71
     e1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e1e:	18 16       	cp	r1, r24
     e20:	4c f5       	brge	.+82     	; 0xe74 <storePassword+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e22:	6b 85       	ldd	r22, Y+11	; 0x0b
     e24:	7c 85       	ldd	r23, Y+12	; 0x0c
     e26:	8d 85       	ldd	r24, Y+13	; 0x0d
     e28:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	40 e2       	ldi	r20, 0x20	; 32
     e30:	51 e4       	ldi	r21, 0x41	; 65
     e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	bc 01       	movw	r22, r24
     e3c:	cd 01       	movw	r24, r26
     e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	9e 83       	std	Y+6, r25	; 0x06
     e48:	8d 83       	std	Y+5, r24	; 0x05
     e4a:	0f c0       	rjmp	.+30     	; 0xe6a <storePassword+0xee>
     e4c:	88 ec       	ldi	r24, 0xC8	; 200
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	9c 83       	std	Y+4, r25	; 0x04
     e52:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	9c 81       	ldd	r25, Y+4	; 0x04
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	f1 f7       	brne	.-4      	; 0xe58 <storePassword+0xdc>
     e5c:	9c 83       	std	Y+4, r25	; 0x04
     e5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e60:	8d 81       	ldd	r24, Y+5	; 0x05
     e62:	9e 81       	ldd	r25, Y+6	; 0x06
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	9e 83       	std	Y+6, r25	; 0x06
     e68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6a:	8d 81       	ldd	r24, Y+5	; 0x05
     e6c:	9e 81       	ldd	r25, Y+6	; 0x06
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	69 f7       	brne	.-38     	; 0xe4c <storePassword+0xd0>
     e72:	14 c0       	rjmp	.+40     	; 0xe9c <storePassword+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e74:	6f 81       	ldd	r22, Y+7	; 0x07
     e76:	78 85       	ldd	r23, Y+8	; 0x08
     e78:	89 85       	ldd	r24, Y+9	; 0x09
     e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e80:	dc 01       	movw	r26, r24
     e82:	cb 01       	movw	r24, r22
     e84:	9e 83       	std	Y+6, r25	; 0x06
     e86:	8d 83       	std	Y+5, r24	; 0x05
     e88:	8d 81       	ldd	r24, Y+5	; 0x05
     e8a:	9e 81       	ldd	r25, Y+6	; 0x06
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	f1 f7       	brne	.-4      	; 0xe94 <storePassword+0x118>
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	89 83       	std	Y+1, r24	; 0x01
 * param1: pointer to char array that password will be stored temporarily in it
 * return: none*/
void storePassword(uint8 *password){
	uint8 i;
	answeringAvailability();
	for(i = 0;i<PASSWORD_SIZE;i++){
     e9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e9e:	8f 5f       	subi	r24, 0xFF	; 255
     ea0:	8f 87       	std	Y+15, r24	; 0x0f
     ea2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ea4:	85 30       	cpi	r24, 0x05	; 5
     ea6:	08 f4       	brcc	.+2      	; 0xeaa <storePassword+0x12e>
     ea8:	7b cf       	rjmp	.-266    	; 0xda0 <storePassword+0x24>
		*(password+i) = UART_recieveByte();
		_delay_ms(10);
	}
}
     eaa:	61 96       	adiw	r28, 0x11	; 17
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	08 95       	ret

00000ec0 <comparePasswords>:

/*@description: this function compare between two passwords
 * param1: first password
 * param2: second password
 * return if matched or not*/
uint8 comparePasswords(uint8 *password,uint8 *re_password){
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	27 97       	sbiw	r28, 0x07	; 7
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	9c 83       	std	Y+4, r25	; 0x04
     ed6:	8b 83       	std	Y+3, r24	; 0x03
     ed8:	7e 83       	std	Y+6, r23	; 0x06
     eda:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i;
	uint8 match_flag;
	for(i = 0;i<PASSWORD_SIZE;i++){
     edc:	1a 82       	std	Y+2, r1	; 0x02
     ede:	1b c0       	rjmp	.+54     	; 0xf16 <comparePasswords+0x56>
		if(*(password+i) != *(re_password+i)){
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	9c 81       	ldd	r25, Y+4	; 0x04
     eea:	fc 01       	movw	r30, r24
     eec:	e2 0f       	add	r30, r18
     eee:	f3 1f       	adc	r31, r19
     ef0:	40 81       	ld	r20, Z
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	8d 81       	ldd	r24, Y+5	; 0x05
     efa:	9e 81       	ldd	r25, Y+6	; 0x06
     efc:	fc 01       	movw	r30, r24
     efe:	e2 0f       	add	r30, r18
     f00:	f3 1f       	adc	r31, r19
     f02:	80 81       	ld	r24, Z
     f04:	48 17       	cp	r20, r24
     f06:	21 f0       	breq	.+8      	; 0xf10 <comparePasswords+0x50>
			match_flag = 0;
     f08:	19 82       	std	Y+1, r1	; 0x01
			return match_flag;
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	8f 83       	std	Y+7, r24	; 0x07
     f0e:	0a c0       	rjmp	.+20     	; 0xf24 <comparePasswords+0x64>
 * param2: second password
 * return if matched or not*/
uint8 comparePasswords(uint8 *password,uint8 *re_password){
	uint8 i;
	uint8 match_flag;
	for(i = 0;i<PASSWORD_SIZE;i++){
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	8f 5f       	subi	r24, 0xFF	; 255
     f14:	8a 83       	std	Y+2, r24	; 0x02
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	85 30       	cpi	r24, 0x05	; 5
     f1a:	10 f3       	brcs	.-60     	; 0xee0 <comparePasswords+0x20>
		if(*(password+i) != *(re_password+i)){
			match_flag = 0;
			return match_flag;
		}
	}
	match_flag = 1;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	89 83       	std	Y+1, r24	; 0x01
	return match_flag;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	8f 83       	std	Y+7, r24	; 0x07
     f24:	8f 81       	ldd	r24, Y+7	; 0x07
}
     f26:	27 96       	adiw	r28, 0x07	; 7
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <storeInEeprom>:

/*@description: this function is to store the password inside the EEPROM
 * to be permanently stored
 * param1: array of char contains the passwords to be stored in EEPROM
 * return: none */
void storeInEeprom(uint8 *password){
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	61 97       	sbiw	r28, 0x11	; 17
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	99 8b       	std	Y+17, r25	; 0x11
     f4e:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i ;
	for(i = 0; i <PASSWORD_SIZE;i++){
     f50:	1f 86       	std	Y+15, r1	; 0x0f
     f52:	88 c0       	rjmp	.+272    	; 0x1064 <storeInEeprom+0x12c>
		EEPROM_writeByte(START_STORE_ADDRESS_EEPROM+i, *(password+i));
     f54:	8f 85       	ldd	r24, Y+15	; 0x0f
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	80 50       	subi	r24, 0x00	; 0
     f5c:	9d 4f       	sbci	r25, 0xFD	; 253
     f5e:	ac 01       	movw	r20, r24
     f60:	8f 85       	ldd	r24, Y+15	; 0x0f
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	88 89       	ldd	r24, Y+16	; 0x10
     f68:	99 89       	ldd	r25, Y+17	; 0x11
     f6a:	fc 01       	movw	r30, r24
     f6c:	e2 0f       	add	r30, r18
     f6e:	f3 1f       	adc	r31, r19
     f70:	20 81       	ld	r18, Z
     f72:	ca 01       	movw	r24, r20
     f74:	62 2f       	mov	r22, r18
     f76:	0e 94 c6 0a 	call	0x158c	; 0x158c <EEPROM_writeByte>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	a0 e2       	ldi	r26, 0x20	; 32
     f80:	b1 e4       	ldi	r27, 0x41	; 65
     f82:	8b 87       	std	Y+11, r24	; 0x0b
     f84:	9c 87       	std	Y+12, r25	; 0x0c
     f86:	ad 87       	std	Y+13, r26	; 0x0d
     f88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f90:	9e 85       	ldd	r25, Y+14	; 0x0e
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	4a ef       	ldi	r20, 0xFA	; 250
     f98:	54 e4       	ldi	r21, 0x44	; 68
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	8f 83       	std	Y+7, r24	; 0x07
     fa4:	98 87       	std	Y+8, r25	; 0x08
     fa6:	a9 87       	std	Y+9, r26	; 0x09
     fa8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     faa:	6f 81       	ldd	r22, Y+7	; 0x07
     fac:	78 85       	ldd	r23, Y+8	; 0x08
     fae:	89 85       	ldd	r24, Y+9	; 0x09
     fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e8       	ldi	r20, 0x80	; 128
     fb8:	5f e3       	ldi	r21, 0x3F	; 63
     fba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fbe:	88 23       	and	r24, r24
     fc0:	2c f4       	brge	.+10     	; 0xfcc <storeInEeprom+0x94>
		__ticks = 1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	9e 83       	std	Y+6, r25	; 0x06
     fc8:	8d 83       	std	Y+5, r24	; 0x05
     fca:	3f c0       	rjmp	.+126    	; 0x104a <storeInEeprom+0x112>
	else if (__tmp > 65535)
     fcc:	6f 81       	ldd	r22, Y+7	; 0x07
     fce:	78 85       	ldd	r23, Y+8	; 0x08
     fd0:	89 85       	ldd	r24, Y+9	; 0x09
     fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	3f ef       	ldi	r19, 0xFF	; 255
     fd8:	4f e7       	ldi	r20, 0x7F	; 127
     fda:	57 e4       	ldi	r21, 0x47	; 71
     fdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe0:	18 16       	cp	r1, r24
     fe2:	4c f5       	brge	.+82     	; 0x1036 <storeInEeprom+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fea:	9e 85       	ldd	r25, Y+14	; 0x0e
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e2       	ldi	r20, 0x20	; 32
     ff2:	51 e4       	ldi	r21, 0x41	; 65
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	9e 83       	std	Y+6, r25	; 0x06
    100a:	8d 83       	std	Y+5, r24	; 0x05
    100c:	0f c0       	rjmp	.+30     	; 0x102c <storeInEeprom+0xf4>
    100e:	88 ec       	ldi	r24, 0xC8	; 200
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	9c 83       	std	Y+4, r25	; 0x04
    1014:	8b 83       	std	Y+3, r24	; 0x03
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	9c 81       	ldd	r25, Y+4	; 0x04
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <storeInEeprom+0xe2>
    101e:	9c 83       	std	Y+4, r25	; 0x04
    1020:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1022:	8d 81       	ldd	r24, Y+5	; 0x05
    1024:	9e 81       	ldd	r25, Y+6	; 0x06
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	9e 83       	std	Y+6, r25	; 0x06
    102a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	9e 81       	ldd	r25, Y+6	; 0x06
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	69 f7       	brne	.-38     	; 0x100e <storeInEeprom+0xd6>
    1034:	14 c0       	rjmp	.+40     	; 0x105e <storeInEeprom+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1036:	6f 81       	ldd	r22, Y+7	; 0x07
    1038:	78 85       	ldd	r23, Y+8	; 0x08
    103a:	89 85       	ldd	r24, Y+9	; 0x09
    103c:	9a 85       	ldd	r25, Y+10	; 0x0a
    103e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	9e 83       	std	Y+6, r25	; 0x06
    1048:	8d 83       	std	Y+5, r24	; 0x05
    104a:	8d 81       	ldd	r24, Y+5	; 0x05
    104c:	9e 81       	ldd	r25, Y+6	; 0x06
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	9a 81       	ldd	r25, Y+2	; 0x02
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <storeInEeprom+0x11e>
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	89 83       	std	Y+1, r24	; 0x01
 * to be permanently stored
 * param1: array of char contains the passwords to be stored in EEPROM
 * return: none */
void storeInEeprom(uint8 *password){
	uint8 i ;
	for(i = 0; i <PASSWORD_SIZE;i++){
    105e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1060:	8f 5f       	subi	r24, 0xFF	; 255
    1062:	8f 87       	std	Y+15, r24	; 0x0f
    1064:	8f 85       	ldd	r24, Y+15	; 0x0f
    1066:	85 30       	cpi	r24, 0x05	; 5
    1068:	08 f4       	brcc	.+2      	; 0x106c <storeInEeprom+0x134>
    106a:	74 cf       	rjmp	.-280    	; 0xf54 <storeInEeprom+0x1c>
		EEPROM_writeByte(START_STORE_ADDRESS_EEPROM+i, *(password+i));
		_delay_ms(10);
	}
	/*this consider as a flag if previously stored pass*/
	EEPROM_writeByte(FLAG_ADDRESS_IF_ALREADY_STORED_PASSWORD, 'P');
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	92 e0       	ldi	r25, 0x02	; 2
    1070:	60 e5       	ldi	r22, 0x50	; 80
    1072:	0e 94 c6 0a 	call	0x158c	; 0x158c <EEPROM_writeByte>
}
    1076:	61 96       	adiw	r28, 0x11	; 17
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <compareWithEeprom>:

/*@description: this function compare the value of given password to that stored in EEPROM
 * param1: array of char contains the passwords to be compared with that stored in EEPROM
 * return: if the given password match with stored in EEPROM or not*/
uint8 static compareWithEeprom(uint8 *password){
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	2a 97       	sbiw	r28, 0x0a	; 10
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	99 87       	std	Y+9, r25	; 0x09
    109e:	88 87       	std	Y+8, r24	; 0x08
	uint8 i;
	uint8 match_flag;
	uint8 eeprom_password[PASSWORD_SIZE];
	for(i = 0;i<PASSWORD_SIZE;i++){
    10a0:	1a 82       	std	Y+2, r1	; 0x02
    10a2:	2c c0       	rjmp	.+88     	; 0x10fc <compareWithEeprom+0x74>
		EEPROM_readByte(START_STORE_ADDRESS_EEPROM+i,&eeprom_password[i]);
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	80 50       	subi	r24, 0x00	; 0
    10ac:	9d 4f       	sbci	r25, 0xFD	; 253
    10ae:	ac 01       	movw	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	9e 01       	movw	r18, r28
    10b8:	2d 5f       	subi	r18, 0xFD	; 253
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	28 0f       	add	r18, r24
    10be:	39 1f       	adc	r19, r25
    10c0:	ca 01       	movw	r24, r20
    10c2:	b9 01       	movw	r22, r18
    10c4:	0e 94 07 0b 	call	0x160e	; 0x160e <EEPROM_readByte>
		if(*(password+i) != *(eeprom_password+i)){
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	88 85       	ldd	r24, Y+8	; 0x08
    10d0:	99 85       	ldd	r25, Y+9	; 0x09
    10d2:	fc 01       	movw	r30, r24
    10d4:	e2 0f       	add	r30, r18
    10d6:	f3 1f       	adc	r31, r19
    10d8:	20 81       	ld	r18, Z
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	88 2f       	mov	r24, r24
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	fe 01       	movw	r30, r28
    10e2:	33 96       	adiw	r30, 0x03	; 3
    10e4:	e8 0f       	add	r30, r24
    10e6:	f9 1f       	adc	r31, r25
    10e8:	80 81       	ld	r24, Z
    10ea:	28 17       	cp	r18, r24
    10ec:	21 f0       	breq	.+8      	; 0x10f6 <compareWithEeprom+0x6e>
			match_flag = 0;
    10ee:	19 82       	std	Y+1, r1	; 0x01
			return match_flag;
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	8a 87       	std	Y+10, r24	; 0x0a
    10f4:	0a c0       	rjmp	.+20     	; 0x110a <compareWithEeprom+0x82>
 * return: if the given password match with stored in EEPROM or not*/
uint8 static compareWithEeprom(uint8 *password){
	uint8 i;
	uint8 match_flag;
	uint8 eeprom_password[PASSWORD_SIZE];
	for(i = 0;i<PASSWORD_SIZE;i++){
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	8f 5f       	subi	r24, 0xFF	; 255
    10fa:	8a 83       	std	Y+2, r24	; 0x02
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	85 30       	cpi	r24, 0x05	; 5
    1100:	88 f2       	brcs	.-94     	; 0x10a4 <compareWithEeprom+0x1c>
		if(*(password+i) != *(eeprom_password+i)){
			match_flag = 0;
			return match_flag;
		}
	}
	match_flag = 1;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	89 83       	std	Y+1, r24	; 0x01
	return match_flag;
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	8a 87       	std	Y+10, r24	; 0x0a
    110a:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    110c:	2a 96       	adiw	r28, 0x0a	; 10
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <isAllowedToAccess>:

/*@description: this function is to specify to ALLOW access of the user or not
 * according to entered the right password or not
 * param1: password to check for
 * return: if the user allowed to access or not*/
uint8 isAllowedToAccess(uint8 *password){
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	00 d0       	rcall	.+0      	; 0x1124 <isAllowedToAccess+0x6>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <isAllowedToAccess+0x8>
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	9c 83       	std	Y+4, r25	; 0x04
    112c:	8b 83       	std	Y+3, r24	; 0x03
	/*this counter to specify number of wrong passwords*/
	static uint8 counter = 0;
	uint8 is_matched_pass = 0;
    112e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 answer = YOU_ARE_BANNED;
    1130:	8e e0       	ldi	r24, 0x0E	; 14
    1132:	89 83       	std	Y+1, r24	; 0x01

	is_matched_pass = compareWithEeprom(password);
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	9c 81       	ldd	r25, Y+4	; 0x04
    1138:	0e 94 44 08 	call	0x1088	; 0x1088 <compareWithEeprom>
    113c:	8a 83       	std	Y+2, r24	; 0x02
	waitOtherAvailability();
    113e:	0e 94 a2 06 	call	0xd44	; 0xd44 <waitOtherAvailability>
	if(is_matched_pass == MATCHED_PASSWORDS){
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	29 f4       	brne	.+10     	; 0x1152 <isAllowedToAccess+0x34>
		counter = 0;
    1148:	10 92 80 00 	sts	0x0080, r1
		answer = YOU_ARE_ALLOWED;
    114c:	8c e0       	ldi	r24, 0x0C	; 12
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	19 c0       	rjmp	.+50     	; 0x1184 <isAllowedToAccess+0x66>
	}
	else if((is_matched_pass != MATCHED_PASSWORDS) && (counter<2)){
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	61 f0       	breq	.+24     	; 0x1170 <isAllowedToAccess+0x52>
    1158:	80 91 80 00 	lds	r24, 0x0080
    115c:	82 30       	cpi	r24, 0x02	; 2
    115e:	40 f4       	brcc	.+16     	; 0x1170 <isAllowedToAccess+0x52>
		counter++;
    1160:	80 91 80 00 	lds	r24, 0x0080
    1164:	8f 5f       	subi	r24, 0xFF	; 255
    1166:	80 93 80 00 	sts	0x0080, r24
		answer = PLEASE_REPEAT_PASS;
    116a:	8d e0       	ldi	r24, 0x0D	; 13
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	0a c0       	rjmp	.+20     	; 0x1184 <isAllowedToAccess+0x66>
	}
	else if((is_matched_pass != MATCHED_PASSWORDS) && (counter=2)){
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	39 f0       	breq	.+14     	; 0x1184 <isAllowedToAccess+0x66>
    1176:	82 e0       	ldi	r24, 0x02	; 2
    1178:	80 93 80 00 	sts	0x0080, r24
		counter = 0;
    117c:	10 92 80 00 	sts	0x0080, r1
		answer = YOU_ARE_BANNED;
    1180:	8e e0       	ldi	r24, 0x0E	; 14
    1182:	89 83       	std	Y+1, r24	; 0x01
	}

	UART_sendByte(answer);
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	0e 94 8b 12 	call	0x2516	; 0x2516 <UART_sendByte>

	return answer;
    118a:	89 81       	ldd	r24, Y+1	; 0x01
}
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <isMatchedPassword>:

/*@description: this function to check if two passwords sent are matched
 * param1: first password
 * param2: second password
 * return: if the matched or not */
uint8 isMatchedPassword(uint8 *password,uint8 *re_password){
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <isMatchedPassword+0x6>
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <isMatchedPassword+0x8>
    11a2:	0f 92       	push	r0
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	9b 83       	std	Y+3, r25	; 0x03
    11aa:	8a 83       	std	Y+2, r24	; 0x02
    11ac:	7d 83       	std	Y+5, r23	; 0x05
    11ae:	6c 83       	std	Y+4, r22	; 0x04
	uint8 is_matched;
	is_matched = comparePasswords(password, re_password);
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	9b 81       	ldd	r25, Y+3	; 0x03
    11b4:	2c 81       	ldd	r18, Y+4	; 0x04
    11b6:	3d 81       	ldd	r19, Y+5	; 0x05
    11b8:	b9 01       	movw	r22, r18
    11ba:	0e 94 60 07 	call	0xec0	; 0xec0 <comparePasswords>
    11be:	89 83       	std	Y+1, r24	; 0x01
	waitOtherAvailability();
    11c0:	0e 94 a2 06 	call	0xd44	; 0xd44 <waitOtherAvailability>
	UART_sendByte(is_matched);
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	0e 94 8b 12 	call	0x2516	; 0x2516 <UART_sendByte>
	return is_matched;
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <isFirstTime>:

/*@description: this functionto check if there is previously stored password in EEPROM
 * param1: address to read from in EEPROM
 * return: if there is previously stored or not*/
uint8 isFirstTime(uint16 u16addr){
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <isFirstTime+0x6>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <isFirstTime+0x8>
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	9c 83       	std	Y+4, r25	; 0x04
    11ea:	8b 83       	std	Y+3, r24	; 0x03
	uint8 is_passoword_set_before;
	uint8 state;
	EEPROM_readByte(u16addr, &is_passoword_set_before);
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	9e 01       	movw	r18, r28
    11f2:	2e 5f       	subi	r18, 0xFE	; 254
    11f4:	3f 4f       	sbci	r19, 0xFF	; 255
    11f6:	b9 01       	movw	r22, r18
    11f8:	0e 94 07 0b 	call	0x160e	; 0x160e <EEPROM_readByte>
	waitOtherAvailability();
    11fc:	0e 94 a2 06 	call	0xd44	; 0xd44 <waitOtherAvailability>
	if(is_passoword_set_before != 'P'){
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	80 35       	cpi	r24, 0x50	; 80
    1204:	31 f0       	breq	.+12     	; 0x1212 <isFirstTime+0x36>
		UART_sendByte(NO_SAVED_PASSWORD_NOT_FOUND);
    1206:	8a e2       	ldi	r24, 0x2A	; 42
    1208:	0e 94 8b 12 	call	0x2516	; 0x2516 <UART_sendByte>
		state = NO_SAVED_PASSWORD_NOT_FOUND;
    120c:	8a e2       	ldi	r24, 0x2A	; 42
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	05 c0       	rjmp	.+10     	; 0x121c <isFirstTime+0x40>
	}
	else{
		UART_sendByte(YES_SAVED_PASSWORD_FOUND);
    1212:	8a e1       	ldi	r24, 0x1A	; 26
    1214:	0e 94 8b 12 	call	0x2516	; 0x2516 <UART_sendByte>
		state = YES_SAVED_PASSWORD_FOUND;
    1218:	8a e1       	ldi	r24, 0x1A	; 26
    121a:	89 83       	std	Y+1, r24	; 0x01
	}

	return state;
    121c:	89 81       	ldd	r24, Y+1	; 0x01
}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <recieveMainOption>:

/*@description: this function to receive from first micro controller
 * what option does the user need
 * param1: none;
 * return: the option sent from first device */
uint8 recieveMainOption(void){
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
	answeringAvailability();
    1234:	0e 94 b0 06 	call	0xd60	; 0xd60 <answeringAvailability>
	return UART_recieveByte();
    1238:	0e 94 a2 12 	call	0x2544	; 0x2544 <UART_recieveByte>
}
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <threeSecondsDelayTimer>:
/*@description: this is the call back function called by timer driver
 * and this function count 3 seconds
 * param1: none
 * return: none*/

void threeSecondsDelayTimer(void){
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    124a:	80 91 7c 00 	lds	r24, 0x007C
    124e:	90 91 7d 00 	lds	r25, 0x007D
    1252:	a0 91 7e 00 	lds	r26, 0x007E
    1256:	b0 91 7f 00 	lds	r27, 0x007F
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	a1 1d       	adc	r26, r1
    125e:	b1 1d       	adc	r27, r1
    1260:	80 93 7c 00 	sts	0x007C, r24
    1264:	90 93 7d 00 	sts	0x007D, r25
    1268:	a0 93 7e 00 	sts	0x007E, r26
    126c:	b0 93 7f 00 	sts	0x007F, r27
	if(ticks==93){    /*31 = second*/
    1270:	80 91 7c 00 	lds	r24, 0x007C
    1274:	90 91 7d 00 	lds	r25, 0x007D
    1278:	a0 91 7e 00 	lds	r26, 0x007E
    127c:	b0 91 7f 00 	lds	r27, 0x007F
    1280:	8d 35       	cpi	r24, 0x5D	; 93
    1282:	91 05       	cpc	r25, r1
    1284:	a1 05       	cpc	r26, r1
    1286:	b1 05       	cpc	r27, r1
    1288:	a1 f4       	brne	.+40     	; 0x12b2 <threeSecondsDelayTimer+0x70>
		sec =3;
    128a:	83 e0       	ldi	r24, 0x03	; 3
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	a0 e0       	ldi	r26, 0x00	; 0
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	80 93 78 00 	sts	0x0078, r24
    1296:	90 93 79 00 	sts	0x0079, r25
    129a:	a0 93 7a 00 	sts	0x007A, r26
    129e:	b0 93 7b 00 	sts	0x007B, r27
		ticks = 0;
    12a2:	10 92 7c 00 	sts	0x007C, r1
    12a6:	10 92 7d 00 	sts	0x007D, r1
    12aa:	10 92 7e 00 	sts	0x007E, r1
    12ae:	10 92 7f 00 	sts	0x007F, r1
	}
}
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <fifteenSecondsDelayTimer>:

/*@description: this is the call back function called by timer driver
 * and this function count 15 seconds
 * param1: none
 * return: none*/
void fifteenSecondsDelayTimer(void){
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    12c0:	80 91 7c 00 	lds	r24, 0x007C
    12c4:	90 91 7d 00 	lds	r25, 0x007D
    12c8:	a0 91 7e 00 	lds	r26, 0x007E
    12cc:	b0 91 7f 00 	lds	r27, 0x007F
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	a1 1d       	adc	r26, r1
    12d4:	b1 1d       	adc	r27, r1
    12d6:	80 93 7c 00 	sts	0x007C, r24
    12da:	90 93 7d 00 	sts	0x007D, r25
    12de:	a0 93 7e 00 	sts	0x007E, r26
    12e2:	b0 93 7f 00 	sts	0x007F, r27
	if(ticks == 465){
    12e6:	80 91 7c 00 	lds	r24, 0x007C
    12ea:	90 91 7d 00 	lds	r25, 0x007D
    12ee:	a0 91 7e 00 	lds	r26, 0x007E
    12f2:	b0 91 7f 00 	lds	r27, 0x007F
    12f6:	81 3d       	cpi	r24, 0xD1	; 209
    12f8:	21 e0       	ldi	r18, 0x01	; 1
    12fa:	92 07       	cpc	r25, r18
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	a2 07       	cpc	r26, r18
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	b2 07       	cpc	r27, r18
    1304:	a1 f4       	brne	.+40     	; 0x132e <fifteenSecondsDelayTimer+0x76>
		sec =15;
    1306:	8f e0       	ldi	r24, 0x0F	; 15
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a0 e0       	ldi	r26, 0x00	; 0
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	80 93 78 00 	sts	0x0078, r24
    1312:	90 93 79 00 	sts	0x0079, r25
    1316:	a0 93 7a 00 	sts	0x007A, r26
    131a:	b0 93 7b 00 	sts	0x007B, r27
		ticks = 0;
    131e:	10 92 7c 00 	sts	0x007C, r1
    1322:	10 92 7d 00 	sts	0x007D, r1
    1326:	10 92 7e 00 	sts	0x007E, r1
    132a:	10 92 7f 00 	sts	0x007F, r1
	}
}
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <oneMinuteDelayTimer>:

/*@description: this is the call back function called by timer driver
 * and this function count one minute
 * param1: none
 * return: none*/
void oneMinuteDelayTimer(void){
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
	static uint8 count = 0;
	ticks++;
    133c:	80 91 7c 00 	lds	r24, 0x007C
    1340:	90 91 7d 00 	lds	r25, 0x007D
    1344:	a0 91 7e 00 	lds	r26, 0x007E
    1348:	b0 91 7f 00 	lds	r27, 0x007F
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	a1 1d       	adc	r26, r1
    1350:	b1 1d       	adc	r27, r1
    1352:	80 93 7c 00 	sts	0x007C, r24
    1356:	90 93 7d 00 	sts	0x007D, r25
    135a:	a0 93 7e 00 	sts	0x007E, r26
    135e:	b0 93 7f 00 	sts	0x007F, r27
	if(ticks == 465){
    1362:	80 91 7c 00 	lds	r24, 0x007C
    1366:	90 91 7d 00 	lds	r25, 0x007D
    136a:	a0 91 7e 00 	lds	r26, 0x007E
    136e:	b0 91 7f 00 	lds	r27, 0x007F
    1372:	81 3d       	cpi	r24, 0xD1	; 209
    1374:	21 e0       	ldi	r18, 0x01	; 1
    1376:	92 07       	cpc	r25, r18
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	a2 07       	cpc	r26, r18
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	b2 07       	cpc	r27, r18
    1380:	f9 f4       	brne	.+62     	; 0x13c0 <oneMinuteDelayTimer+0x8c>
		count++;
    1382:	80 91 81 00 	lds	r24, 0x0081
    1386:	8f 5f       	subi	r24, 0xFF	; 255
    1388:	80 93 81 00 	sts	0x0081, r24
		ticks = 0;
    138c:	10 92 7c 00 	sts	0x007C, r1
    1390:	10 92 7d 00 	sts	0x007D, r1
    1394:	10 92 7e 00 	sts	0x007E, r1
    1398:	10 92 7f 00 	sts	0x007F, r1
		if(count == 4){
    139c:	80 91 81 00 	lds	r24, 0x0081
    13a0:	84 30       	cpi	r24, 0x04	; 4
    13a2:	71 f4       	brne	.+28     	; 0x13c0 <oneMinuteDelayTimer+0x8c>
			sec = 60;
    13a4:	8c e3       	ldi	r24, 0x3C	; 60
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	a0 e0       	ldi	r26, 0x00	; 0
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	80 93 78 00 	sts	0x0078, r24
    13b0:	90 93 79 00 	sts	0x0079, r25
    13b4:	a0 93 7a 00 	sts	0x007A, r26
    13b8:	b0 93 7b 00 	sts	0x007B, r27
			count = 0;
    13bc:	10 92 81 00 	sts	0x0081, r1

		}
	}
}
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <waitFifteenSeconds>:

/*@description: this function is to make delay for 15 seconds
 * param1: pointer to configuration structure to get timer id
 * return: none*/
void waitFifteenSeconds(const Timer_ConfigType * Config_Ptr){
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <waitFifteenSeconds+0x6>
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	9a 83       	std	Y+2, r25	; 0x02
    13d2:	89 83       	std	Y+1, r24	; 0x01
	Timer0_setCallBack(fifteenSecondsDelayTimer);
    13d4:	8c e5       	ldi	r24, 0x5C	; 92
    13d6:	99 e0       	ldi	r25, 0x09	; 9
    13d8:	0e 94 10 11 	call	0x2220	; 0x2220 <Timer0_setCallBack>
	Timer_init(Config_Ptr);
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	9a 81       	ldd	r25, Y+2	; 0x02
    13e0:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Timer_init>
	while(sec!=15);
    13e4:	80 91 78 00 	lds	r24, 0x0078
    13e8:	90 91 79 00 	lds	r25, 0x0079
    13ec:	a0 91 7a 00 	lds	r26, 0x007A
    13f0:	b0 91 7b 00 	lds	r27, 0x007B
    13f4:	8f 30       	cpi	r24, 0x0F	; 15
    13f6:	91 05       	cpc	r25, r1
    13f8:	a1 05       	cpc	r26, r1
    13fa:	b1 05       	cpc	r27, r1
    13fc:	99 f7       	brne	.-26     	; 0x13e4 <waitFifteenSeconds+0x1e>
	Timer_DeInit(Config_Ptr->timer_id);
    13fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1400:	fa 81       	ldd	r31, Y+2	; 0x02
    1402:	80 81       	ld	r24, Z
    1404:	0e 94 46 11 	call	0x228c	; 0x228c <Timer_DeInit>
	sec = 0;
    1408:	10 92 78 00 	sts	0x0078, r1
    140c:	10 92 79 00 	sts	0x0079, r1
    1410:	10 92 7a 00 	sts	0x007A, r1
    1414:	10 92 7b 00 	sts	0x007B, r1
}
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <waitThreeSeconds>:

/*@description: this function is to make delay for 3 seconds
 * param1: pointer to configuration structure to get timer id
 * return: none*/
void waitThreeSeconds(const Timer_ConfigType *Config_Ptr){
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	00 d0       	rcall	.+0      	; 0x1428 <waitThreeSeconds+0x6>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	9a 83       	std	Y+2, r25	; 0x02
    142e:	89 83       	std	Y+1, r24	; 0x01
	Timer0_setCallBack(threeSecondsDelayTimer);
    1430:	81 e2       	ldi	r24, 0x21	; 33
    1432:	99 e0       	ldi	r25, 0x09	; 9
    1434:	0e 94 10 11 	call	0x2220	; 0x2220 <Timer0_setCallBack>
	Timer_init(Config_Ptr);
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	9a 81       	ldd	r25, Y+2	; 0x02
    143c:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Timer_init>
	while(sec!=3);
    1440:	80 91 78 00 	lds	r24, 0x0078
    1444:	90 91 79 00 	lds	r25, 0x0079
    1448:	a0 91 7a 00 	lds	r26, 0x007A
    144c:	b0 91 7b 00 	lds	r27, 0x007B
    1450:	83 30       	cpi	r24, 0x03	; 3
    1452:	91 05       	cpc	r25, r1
    1454:	a1 05       	cpc	r26, r1
    1456:	b1 05       	cpc	r27, r1
    1458:	99 f7       	brne	.-26     	; 0x1440 <waitThreeSeconds+0x1e>
	Timer_DeInit(Config_Ptr->timer_id);
    145a:	e9 81       	ldd	r30, Y+1	; 0x01
    145c:	fa 81       	ldd	r31, Y+2	; 0x02
    145e:	80 81       	ld	r24, Z
    1460:	0e 94 46 11 	call	0x228c	; 0x228c <Timer_DeInit>
	sec = 0;
    1464:	10 92 78 00 	sts	0x0078, r1
    1468:	10 92 79 00 	sts	0x0079, r1
    146c:	10 92 7a 00 	sts	0x007A, r1
    1470:	10 92 7b 00 	sts	0x007B, r1
}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <waitOneMinute>:

/*@description: this function is to make delay for one minute
 * param1: pointer to configuration structure to get timer id
 * return: none*/
void waitOneMinute(const Timer_ConfigType * Config_Ptr){
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	00 d0       	rcall	.+0      	; 0x1484 <waitOneMinute+0x6>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	9a 83       	std	Y+2, r25	; 0x02
    148a:	89 83       	std	Y+1, r24	; 0x01
	Timer0_setCallBack(oneMinuteDelayTimer);
    148c:	8a e9       	ldi	r24, 0x9A	; 154
    148e:	99 e0       	ldi	r25, 0x09	; 9
    1490:	0e 94 10 11 	call	0x2220	; 0x2220 <Timer0_setCallBack>
	Timer_init(Config_Ptr);
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <Timer_init>
	while(sec!=60);
    149c:	80 91 78 00 	lds	r24, 0x0078
    14a0:	90 91 79 00 	lds	r25, 0x0079
    14a4:	a0 91 7a 00 	lds	r26, 0x007A
    14a8:	b0 91 7b 00 	lds	r27, 0x007B
    14ac:	8c 33       	cpi	r24, 0x3C	; 60
    14ae:	91 05       	cpc	r25, r1
    14b0:	a1 05       	cpc	r26, r1
    14b2:	b1 05       	cpc	r27, r1
    14b4:	99 f7       	brne	.-26     	; 0x149c <waitOneMinute+0x1e>
	Timer_DeInit(Config_Ptr->timer_id);
    14b6:	e9 81       	ldd	r30, Y+1	; 0x01
    14b8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ba:	80 81       	ld	r24, Z
    14bc:	0e 94 46 11 	call	0x228c	; 0x228c <Timer_DeInit>
	sec = 0;
    14c0:	10 92 78 00 	sts	0x0078, r1
    14c4:	10 92 79 00 	sts	0x0079, r1
    14c8:	10 92 7a 00 	sts	0x007A, r1
    14cc:	10 92 7b 00 	sts	0x007B, r1
}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <BUZZER_init>:
#include "common_macros.h"
/*@description: this function to initialize the pin connected to buzzer as output
 * param1: none
 * return: none
 * */
void BUZZER_init(void){
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	41 e0       	ldi	r20, 0x01	; 1
    14e8:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_setupPinDirection>
}
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <BUZZER_ON>:
/*@description: this function turn buzzer on
 * param1: none
 * return: none*/
void BUZZER_ON(void){
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	41 e0       	ldi	r20, 0x01	; 1
    1500:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_writePin>
}
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <BUZZER_OFF>:
/*@description: this function turn buzzer off
 * param1: none
 * return: none*/
void BUZZER_OFF(void){
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	40 e0       	ldi	r20, 0x00	; 0
    1518:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_writePin>
}
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <DcMotor_Init>:
*************************************************************************************/

/*@description: this function to initialize the DC motor
 * param1: none
 * return: none*/
void DcMotor_Init(void){
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
	/*set the directions of the the pin of specified ports as output*/
	GPIO_setupPinDirection(DCMOTOR_IN_A_PORT, DCMOTOR_IN_A_PIN, PIN_OUTPUT);
    152a:	83 e0       	ldi	r24, 0x03	; 3
    152c:	64 e0       	ldi	r22, 0x04	; 4
    152e:	41 e0       	ldi	r20, 0x01	; 1
    1530:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_IN_B_PORT, DCMOTOR_IN_B_PIN, PIN_OUTPUT);
    1534:	83 e0       	ldi	r24, 0x03	; 3
    1536:	65 e0       	ldi	r22, 0x05	; 5
    1538:	41 e0       	ldi	r20, 0x01	; 1
    153a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_ENABLE_PORT, DCMOTOR_ENABLE_PIN, PIN_OUTPUT);
    153e:	83 e0       	ldi	r24, 0x03	; 3
    1540:	66 e0       	ldi	r22, 0x06	; 6
    1542:	41 e0       	ldi	r20, 0x01	; 1
    1544:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_setupPinDirection>
	/*initialize the state of the motor in stop mode by writing 0x00 to the two pins
	 of the output pins  */
	GPIO_writePin(DCMOTOR_ENABLE_PORT, DCMOTOR_ENABLE_PIN, LOGIC_HIGH);
    1548:	83 e0       	ldi	r24, 0x03	; 3
    154a:	66 e0       	ldi	r22, 0x06	; 6
    154c:	41 e0       	ldi	r20, 0x01	; 1
    154e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_writePin>
	GPIO_writePort(DCMOTOR_INPUTS_PORT,(DCMOTOR_INPUTS_PORT & 0x8F)|STOP);
    1552:	83 e0       	ldi	r24, 0x03	; 3
    1554:	63 e0       	ldi	r22, 0x03	; 3
    1556:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <GPIO_writePort>


}
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <DcMotor_Rotate>:


/*@description: this function is to control the state of the DC motor and specify its speed
 param1: mode is the mode of the motor whether stop or clock-wise or anti-clock-wise direction
 return: none*/
void DcMotor_Rotate(DcMotor_Mode mode){
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	0f 92       	push	r0
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(DCMOTOR_INPUTS_PORT,(DCMOTOR_INPUTS_PORT & 0x8F)|mode);
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	98 2f       	mov	r25, r24
    1570:	93 60       	ori	r25, 0x03	; 3
    1572:	83 e0       	ldi	r24, 0x03	; 3
    1574:	69 2f       	mov	r22, r25
    1576:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <GPIO_writePort>
	GPIO_writePin(DCMOTOR_ENABLE_PORT, DCMOTOR_ENABLE_PIN, LOGIC_HIGH);
    157a:	83 e0       	ldi	r24, 0x03	; 3
    157c:	66 e0       	ldi	r22, 0x06	; 6
    157e:	41 e0       	ldi	r20, 0x01	; 1
    1580:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_writePin>
}
    1584:	0f 90       	pop	r0
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <EEPROM_writeByte>:
#include "external_eeprom.h"
#include "twi.h"



uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data){
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	00 d0       	rcall	.+0      	; 0x1592 <EEPROM_writeByte+0x6>
    1592:	00 d0       	rcall	.+0      	; 0x1594 <EEPROM_writeByte+0x8>
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	9a 83       	std	Y+2, r25	; 0x02
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start(); /* Send the Start Bit */
    159e:	0e 94 c8 11 	call	0x2390	; 0x2390 <TWI_start>
	if(TWI_getStatus() != TWI_START){
    15a2:	0e 94 20 12 	call	0x2440	; 0x2440 <TWI_getStatus>
    15a6:	88 30       	cpi	r24, 0x08	; 8
    15a8:	11 f0       	breq	.+4      	; 0x15ae <EEPROM_writeByte+0x22>
		return ERROR;
    15aa:	1c 82       	std	Y+4, r1	; 0x04
    15ac:	28 c0       	rjmp	.+80     	; 0x15fe <EEPROM_writeByte+0x72>
	}
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)(0xA0|((u16addr & 0x0700)>>7)));
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	9a 81       	ldd	r25, Y+2	; 0x02
    15b2:	80 70       	andi	r24, 0x00	; 0
    15b4:	97 70       	andi	r25, 0x07	; 7
    15b6:	88 0f       	add	r24, r24
    15b8:	89 2f       	mov	r24, r25
    15ba:	88 1f       	adc	r24, r24
    15bc:	99 0b       	sbc	r25, r25
    15be:	91 95       	neg	r25
    15c0:	80 6a       	ori	r24, 0xA0	; 160
    15c2:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK){
    15c6:	0e 94 20 12 	call	0x2440	; 0x2440 <TWI_getStatus>
    15ca:	88 31       	cpi	r24, 0x18	; 24
    15cc:	11 f0       	breq	.+4      	; 0x15d2 <EEPROM_writeByte+0x46>
		return ERROR;
    15ce:	1c 82       	std	Y+4, r1	; 0x04
    15d0:	16 c0       	rjmp	.+44     	; 0x15fe <EEPROM_writeByte+0x72>
	}
    /* Send the required memory location address */
  TWI_writeByte((uint8)(u16addr));
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <TWI_writeByte>
  if (TWI_getStatus() != TWI_MT_DATA_ACK){
    15d8:	0e 94 20 12 	call	0x2440	; 0x2440 <TWI_getStatus>
    15dc:	88 32       	cpi	r24, 0x28	; 40
    15de:	11 f0       	breq	.+4      	; 0x15e4 <EEPROM_writeByte+0x58>
      return ERROR;
    15e0:	1c 82       	std	Y+4, r1	; 0x04
    15e2:	0d c0       	rjmp	.+26     	; 0x15fe <EEPROM_writeByte+0x72>
  }
  /* write byte to eeprom */
	TWI_writeByte(u8data);
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK){
    15ea:	0e 94 20 12 	call	0x2440	; 0x2440 <TWI_getStatus>
    15ee:	88 32       	cpi	r24, 0x28	; 40
    15f0:	11 f0       	breq	.+4      	; 0x15f6 <EEPROM_writeByte+0x6a>
		return ERROR;
    15f2:	1c 82       	std	Y+4, r1	; 0x04
    15f4:	04 c0       	rjmp	.+8      	; 0x15fe <EEPROM_writeByte+0x72>
	}
    /* Send the Stop Bit */
	TWI_stop();
    15f6:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <TWI_stop>

	return SUCCESS;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	8c 83       	std	Y+4, r24	; 0x04
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <EEPROM_readByte>:



uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data){
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	00 d0       	rcall	.+0      	; 0x1614 <EEPROM_readByte+0x6>
    1614:	00 d0       	rcall	.+0      	; 0x1616 <EEPROM_readByte+0x8>
    1616:	0f 92       	push	r0
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	9a 83       	std	Y+2, r25	; 0x02
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	7c 83       	std	Y+4, r23	; 0x04
    1622:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();/* Send the Start Bit */
    1624:	0e 94 c8 11 	call	0x2390	; 0x2390 <TWI_start>
	if(TWI_getStatus() != TWI_START){
    1628:	0e 94 20 12 	call	0x2440	; 0x2440 <TWI_getStatus>
    162c:	88 30       	cpi	r24, 0x08	; 8
    162e:	11 f0       	breq	.+4      	; 0x1634 <EEPROM_readByte+0x26>
		return ERROR;
    1630:	1d 82       	std	Y+5, r1	; 0x05
    1632:	44 c0       	rjmp	.+136    	; 0x16bc <EEPROM_readByte+0xae>
	}
	/* Send the device address, we need to get A8 A9 A10 address bits from the
	     * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)(0xA0|((u16addr & 0x0700)>>7)));
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	9a 81       	ldd	r25, Y+2	; 0x02
    1638:	80 70       	andi	r24, 0x00	; 0
    163a:	97 70       	andi	r25, 0x07	; 7
    163c:	88 0f       	add	r24, r24
    163e:	89 2f       	mov	r24, r25
    1640:	88 1f       	adc	r24, r24
    1642:	99 0b       	sbc	r25, r25
    1644:	91 95       	neg	r25
    1646:	80 6a       	ori	r24, 0xA0	; 160
    1648:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK){
    164c:	0e 94 20 12 	call	0x2440	; 0x2440 <TWI_getStatus>
    1650:	88 31       	cpi	r24, 0x18	; 24
    1652:	11 f0       	breq	.+4      	; 0x1658 <EEPROM_readByte+0x4a>
		return ERROR;
    1654:	1d 82       	std	Y+5, r1	; 0x05
    1656:	32 c0       	rjmp	.+100    	; 0x16bc <EEPROM_readByte+0xae>
	}
    /* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr));
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK){
    165e:	0e 94 20 12 	call	0x2440	; 0x2440 <TWI_getStatus>
    1662:	88 32       	cpi	r24, 0x28	; 40
    1664:	11 f0       	breq	.+4      	; 0x166a <EEPROM_readByte+0x5c>
		return ERROR;
    1666:	1d 82       	std	Y+5, r1	; 0x05
    1668:	29 c0       	rjmp	.+82     	; 0x16bc <EEPROM_readByte+0xae>
	}
    /* Send the Repeated Start Bit */
	TWI_start();
    166a:	0e 94 c8 11 	call	0x2390	; 0x2390 <TWI_start>
	if (TWI_getStatus() != TWI_REP_START){
    166e:	0e 94 20 12 	call	0x2440	; 0x2440 <TWI_getStatus>
    1672:	80 31       	cpi	r24, 0x10	; 16
    1674:	11 f0       	breq	.+4      	; 0x167a <EEPROM_readByte+0x6c>
		return ERROR;
    1676:	1d 82       	std	Y+5, r1	; 0x05
    1678:	21 c0       	rjmp	.+66     	; 0x16bc <EEPROM_readByte+0xae>
	}
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
	TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	9a 81       	ldd	r25, Y+2	; 0x02
    167e:	80 70       	andi	r24, 0x00	; 0
    1680:	97 70       	andi	r25, 0x07	; 7
    1682:	88 0f       	add	r24, r24
    1684:	89 2f       	mov	r24, r25
    1686:	88 1f       	adc	r24, r24
    1688:	99 0b       	sbc	r25, r25
    168a:	91 95       	neg	r25
    168c:	81 6a       	ori	r24, 0xA1	; 161
    168e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK){
    1692:	0e 94 20 12 	call	0x2440	; 0x2440 <TWI_getStatus>
    1696:	80 34       	cpi	r24, 0x40	; 64
    1698:	11 f0       	breq	.+4      	; 0x169e <EEPROM_readByte+0x90>
		return ERROR;
    169a:	1d 82       	std	Y+5, r1	; 0x05
    169c:	0f c0       	rjmp	.+30     	; 0x16bc <EEPROM_readByte+0xae>
	}

    /* Read Byte from Memory without send ACK */
	*u8data = TWI_readByteWithNACK();
    169e:	0e 94 0d 12 	call	0x241a	; 0x241a <TWI_readByteWithNACK>
    16a2:	eb 81       	ldd	r30, Y+3	; 0x03
    16a4:	fc 81       	ldd	r31, Y+4	; 0x04
    16a6:	80 83       	st	Z, r24
	if(TWI_getStatus() != TWI_MR_DATA_NACK){
    16a8:	0e 94 20 12 	call	0x2440	; 0x2440 <TWI_getStatus>
    16ac:	88 35       	cpi	r24, 0x58	; 88
    16ae:	11 f0       	breq	.+4      	; 0x16b4 <EEPROM_readByte+0xa6>
		return ERROR;
    16b0:	1d 82       	std	Y+5, r1	; 0x05
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <EEPROM_readByte+0xae>
	}
    /* Send the Stop Bit */
	TWI_stop();
    16b4:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <TWI_stop>

	return SUCCESS;
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	8d 83       	std	Y+5, r24	; 0x05
    16bc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <GPIO_setupPinDirection>:
/*@description: setup weather the function is input or output
 *  param1: port_num is the specified port number
 *  param2: pin_num is specified pin number
 *  param3: the direction of certain pin in certain port
 *  return: none*/
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction){
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <GPIO_setupPinDirection+0x6>
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <GPIO_setupPinDirection+0x8>
    16d6:	0f 92       	push	r0
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	6a 83       	std	Y+2, r22	; 0x02
    16e0:	4b 83       	std	Y+3, r20	; 0x03
	/*check if the input port number is greater than number of ports
	 * or if the number of the input pin is greater than number of pins per port
	 * in this case if it happened it will do nothing */

	if((port_num>=NUM_OF_PORTS)||(pin_num>=NUM_OF_PINS_PER_PORT)){
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	84 30       	cpi	r24, 0x04	; 4
    16e6:	08 f0       	brcs	.+2      	; 0x16ea <GPIO_setupPinDirection+0x1c>
    16e8:	d5 c0       	rjmp	.+426    	; 0x1894 <GPIO_setupPinDirection+0x1c6>
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	88 30       	cpi	r24, 0x08	; 8
    16ee:	08 f0       	brcs	.+2      	; 0x16f2 <GPIO_setupPinDirection+0x24>
    16f0:	d1 c0       	rjmp	.+418    	; 0x1894 <GPIO_setupPinDirection+0x1c6>
		/*do nothing*/
	}
	else{
		/*set pin direction according to given parameters */
		switch(port_num){
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	3d 83       	std	Y+5, r19	; 0x05
    16fa:	2c 83       	std	Y+4, r18	; 0x04
    16fc:	8c 81       	ldd	r24, Y+4	; 0x04
    16fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	91 05       	cpc	r25, r1
    1704:	09 f4       	brne	.+2      	; 0x1708 <GPIO_setupPinDirection+0x3a>
    1706:	43 c0       	rjmp	.+134    	; 0x178e <GPIO_setupPinDirection+0xc0>
    1708:	2c 81       	ldd	r18, Y+4	; 0x04
    170a:	3d 81       	ldd	r19, Y+5	; 0x05
    170c:	22 30       	cpi	r18, 0x02	; 2
    170e:	31 05       	cpc	r19, r1
    1710:	2c f4       	brge	.+10     	; 0x171c <GPIO_setupPinDirection+0x4e>
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	9d 81       	ldd	r25, Y+5	; 0x05
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	71 f0       	breq	.+28     	; 0x1736 <GPIO_setupPinDirection+0x68>
    171a:	bc c0       	rjmp	.+376    	; 0x1894 <GPIO_setupPinDirection+0x1c6>
    171c:	2c 81       	ldd	r18, Y+4	; 0x04
    171e:	3d 81       	ldd	r19, Y+5	; 0x05
    1720:	22 30       	cpi	r18, 0x02	; 2
    1722:	31 05       	cpc	r19, r1
    1724:	09 f4       	brne	.+2      	; 0x1728 <GPIO_setupPinDirection+0x5a>
    1726:	5f c0       	rjmp	.+190    	; 0x17e6 <GPIO_setupPinDirection+0x118>
    1728:	8c 81       	ldd	r24, Y+4	; 0x04
    172a:	9d 81       	ldd	r25, Y+5	; 0x05
    172c:	83 30       	cpi	r24, 0x03	; 3
    172e:	91 05       	cpc	r25, r1
    1730:	09 f4       	brne	.+2      	; 0x1734 <GPIO_setupPinDirection+0x66>
    1732:	85 c0       	rjmp	.+266    	; 0x183e <GPIO_setupPinDirection+0x170>
    1734:	af c0       	rjmp	.+350    	; 0x1894 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID :
			if(direction==PIN_OUTPUT){
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	a1 f4       	brne	.+40     	; 0x1764 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA,pin_num);
    173c:	aa e3       	ldi	r26, 0x3A	; 58
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ea e3       	ldi	r30, 0x3A	; 58
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 2e       	mov	r0, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <GPIO_setupPinDirection+0x8c>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	0a 94       	dec	r0
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <GPIO_setupPinDirection+0x88>
    175e:	84 2b       	or	r24, r20
    1760:	8c 93       	st	X, r24
    1762:	98 c0       	rjmp	.+304    	; 0x1894 <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRA,pin_num);
    1764:	aa e3       	ldi	r26, 0x3A	; 58
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	ea e3       	ldi	r30, 0x3A	; 58
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	48 2f       	mov	r20, r24
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	02 2e       	mov	r0, r18
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <GPIO_setupPinDirection+0xb4>
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	0a 94       	dec	r0
    1784:	e2 f7       	brpl	.-8      	; 0x177e <GPIO_setupPinDirection+0xb0>
    1786:	80 95       	com	r24
    1788:	84 23       	and	r24, r20
    178a:	8c 93       	st	X, r24
    178c:	83 c0       	rjmp	.+262    	; 0x1894 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID :
			if(direction ==PIN_OUTPUT){
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	a1 f4       	brne	.+40     	; 0x17bc <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB,pin_num);
    1794:	a7 e3       	ldi	r26, 0x37	; 55
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e7 e3       	ldi	r30, 0x37	; 55
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	48 2f       	mov	r20, r24
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 2e       	mov	r0, r18
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <GPIO_setupPinDirection+0xe4>
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	0a 94       	dec	r0
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <GPIO_setupPinDirection+0xe0>
    17b6:	84 2b       	or	r24, r20
    17b8:	8c 93       	st	X, r24
    17ba:	6c c0       	rjmp	.+216    	; 0x1894 <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRB,pin_num);
    17bc:	a7 e3       	ldi	r26, 0x37	; 55
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e7 e3       	ldi	r30, 0x37	; 55
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	48 2f       	mov	r20, r24
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	02 2e       	mov	r0, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <GPIO_setupPinDirection+0x10c>
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	0a 94       	dec	r0
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <GPIO_setupPinDirection+0x108>
    17de:	80 95       	com	r24
    17e0:	84 23       	and	r24, r20
    17e2:	8c 93       	st	X, r24
    17e4:	57 c0       	rjmp	.+174    	; 0x1894 <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTC_ID :
			if(direction==PIN_OUTPUT){
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	a1 f4       	brne	.+40     	; 0x1814 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC,pin_num);
    17ec:	a4 e3       	ldi	r26, 0x34	; 52
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e4 e3       	ldi	r30, 0x34	; 52
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <GPIO_setupPinDirection+0x13c>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <GPIO_setupPinDirection+0x138>
    180e:	84 2b       	or	r24, r20
    1810:	8c 93       	st	X, r24
    1812:	40 c0       	rjmp	.+128    	; 0x1894 <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRC,pin_num);
    1814:	a4 e3       	ldi	r26, 0x34	; 52
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e4 e3       	ldi	r30, 0x34	; 52
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	48 2f       	mov	r20, r24
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 2e       	mov	r0, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <GPIO_setupPinDirection+0x164>
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <GPIO_setupPinDirection+0x160>
    1836:	80 95       	com	r24
    1838:	84 23       	and	r24, r20
    183a:	8c 93       	st	X, r24
    183c:	2b c0       	rjmp	.+86     	; 0x1894 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID :
			if(direction==PIN_OUTPUT){
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	a1 f4       	brne	.+40     	; 0x186c <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD,pin_num);
    1844:	a1 e3       	ldi	r26, 0x31	; 49
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e1 e3       	ldi	r30, 0x31	; 49
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	48 2f       	mov	r20, r24
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	02 2e       	mov	r0, r18
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <GPIO_setupPinDirection+0x194>
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	0a 94       	dec	r0
    1864:	e2 f7       	brpl	.-8      	; 0x185e <GPIO_setupPinDirection+0x190>
    1866:	84 2b       	or	r24, r20
    1868:	8c 93       	st	X, r24
    186a:	14 c0       	rjmp	.+40     	; 0x1894 <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRD,pin_num);
    186c:	a1 e3       	ldi	r26, 0x31	; 49
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e1 e3       	ldi	r30, 0x31	; 49
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	48 2f       	mov	r20, r24
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <GPIO_setupPinDirection+0x1bc>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <GPIO_setupPinDirection+0x1b8>
    188e:	80 95       	com	r24
    1890:	84 23       	and	r24, r20
    1892:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <GPIO_writePin>:
                if pin is input this function will control to turn on or turn off the Pull-up resistor
 *  param1: port_num is the specified port number
 *  param2: pin_num is specified pin number
 *  param3: value is the value of certain pin in certain port
 *  return: none*/
void GPIO_writePin(uint8 port_num,uint8 pin_num, uint8 value){
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <GPIO_writePin+0x6>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <GPIO_writePin+0x8>
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	6a 83       	std	Y+2, r22	; 0x02
    18b6:	4b 83       	std	Y+3, r20	; 0x03
	/*check if the input port number is greater than number of ports
	 * or if the number of the input pin is greater than number of pins per port
	 * in this case if it happened it will do nothing */
	if((port_num >= NUM_OF_PORTS)||(pin_num>=NUM_OF_PINS_PER_PORT)){
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	84 30       	cpi	r24, 0x04	; 4
    18bc:	08 f0       	brcs	.+2      	; 0x18c0 <GPIO_writePin+0x1c>
    18be:	d5 c0       	rjmp	.+426    	; 0x1a6a <GPIO_writePin+0x1c6>
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	88 30       	cpi	r24, 0x08	; 8
    18c4:	08 f0       	brcs	.+2      	; 0x18c8 <GPIO_writePin+0x24>
    18c6:	d1 c0       	rjmp	.+418    	; 0x1a6a <GPIO_writePin+0x1c6>
		/*do nothing*/
	}
	else{
		/*write in a certain pin according to given parameters */
		switch(port_num){
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	3d 83       	std	Y+5, r19	; 0x05
    18d0:	2c 83       	std	Y+4, r18	; 0x04
    18d2:	8c 81       	ldd	r24, Y+4	; 0x04
    18d4:	9d 81       	ldd	r25, Y+5	; 0x05
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	91 05       	cpc	r25, r1
    18da:	09 f4       	brne	.+2      	; 0x18de <GPIO_writePin+0x3a>
    18dc:	43 c0       	rjmp	.+134    	; 0x1964 <GPIO_writePin+0xc0>
    18de:	2c 81       	ldd	r18, Y+4	; 0x04
    18e0:	3d 81       	ldd	r19, Y+5	; 0x05
    18e2:	22 30       	cpi	r18, 0x02	; 2
    18e4:	31 05       	cpc	r19, r1
    18e6:	2c f4       	brge	.+10     	; 0x18f2 <GPIO_writePin+0x4e>
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	9d 81       	ldd	r25, Y+5	; 0x05
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	71 f0       	breq	.+28     	; 0x190c <GPIO_writePin+0x68>
    18f0:	bc c0       	rjmp	.+376    	; 0x1a6a <GPIO_writePin+0x1c6>
    18f2:	2c 81       	ldd	r18, Y+4	; 0x04
    18f4:	3d 81       	ldd	r19, Y+5	; 0x05
    18f6:	22 30       	cpi	r18, 0x02	; 2
    18f8:	31 05       	cpc	r19, r1
    18fa:	09 f4       	brne	.+2      	; 0x18fe <GPIO_writePin+0x5a>
    18fc:	5f c0       	rjmp	.+190    	; 0x19bc <GPIO_writePin+0x118>
    18fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1900:	9d 81       	ldd	r25, Y+5	; 0x05
    1902:	83 30       	cpi	r24, 0x03	; 3
    1904:	91 05       	cpc	r25, r1
    1906:	09 f4       	brne	.+2      	; 0x190a <GPIO_writePin+0x66>
    1908:	85 c0       	rjmp	.+266    	; 0x1a14 <GPIO_writePin+0x170>
    190a:	af c0       	rjmp	.+350    	; 0x1a6a <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if(value==LOGIC_HIGH){
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	a1 f4       	brne	.+40     	; 0x193a <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    1912:	ab e3       	ldi	r26, 0x3B	; 59
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	eb e3       	ldi	r30, 0x3B	; 59
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <GPIO_writePin+0x8c>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <GPIO_writePin+0x88>
    1934:	84 2b       	or	r24, r20
    1936:	8c 93       	st	X, r24
    1938:	98 c0       	rjmp	.+304    	; 0x1a6a <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTA,pin_num);
    193a:	ab e3       	ldi	r26, 0x3B	; 59
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	eb e3       	ldi	r30, 0x3B	; 59
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	48 2f       	mov	r20, r24
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	02 2e       	mov	r0, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <GPIO_writePin+0xb4>
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	0a 94       	dec	r0
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <GPIO_writePin+0xb0>
    195c:	80 95       	com	r24
    195e:	84 23       	and	r24, r20
    1960:	8c 93       	st	X, r24
    1962:	83 c0       	rjmp	.+262    	; 0x1a6a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value==LOGIC_HIGH){
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	a1 f4       	brne	.+40     	; 0x1992 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    196a:	a8 e3       	ldi	r26, 0x38	; 56
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e8 e3       	ldi	r30, 0x38	; 56
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	48 2f       	mov	r20, r24
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	02 2e       	mov	r0, r18
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <GPIO_writePin+0xe4>
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25
    1988:	0a 94       	dec	r0
    198a:	e2 f7       	brpl	.-8      	; 0x1984 <GPIO_writePin+0xe0>
    198c:	84 2b       	or	r24, r20
    198e:	8c 93       	st	X, r24
    1990:	6c c0       	rjmp	.+216    	; 0x1a6a <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTB,pin_num);
    1992:	a8 e3       	ldi	r26, 0x38	; 56
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e8 e3       	ldi	r30, 0x38	; 56
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	48 2f       	mov	r20, r24
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	02 2e       	mov	r0, r18
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <GPIO_writePin+0x10c>
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	0a 94       	dec	r0
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <GPIO_writePin+0x108>
    19b4:	80 95       	com	r24
    19b6:	84 23       	and	r24, r20
    19b8:	8c 93       	st	X, r24
    19ba:	57 c0       	rjmp	.+174    	; 0x1a6a <GPIO_writePin+0x1c6>
			}
			break;

		case PORTC_ID:
			if(value==LOGIC_HIGH){
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	81 30       	cpi	r24, 0x01	; 1
    19c0:	a1 f4       	brne	.+40     	; 0x19ea <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    19c2:	a5 e3       	ldi	r26, 0x35	; 53
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e5 e3       	ldi	r30, 0x35	; 53
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	48 2f       	mov	r20, r24
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	02 2e       	mov	r0, r18
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <GPIO_writePin+0x13c>
    19dc:	88 0f       	add	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	0a 94       	dec	r0
    19e2:	e2 f7       	brpl	.-8      	; 0x19dc <GPIO_writePin+0x138>
    19e4:	84 2b       	or	r24, r20
    19e6:	8c 93       	st	X, r24
    19e8:	40 c0       	rjmp	.+128    	; 0x1a6a <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTC,pin_num);
    19ea:	a5 e3       	ldi	r26, 0x35	; 53
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e5 e3       	ldi	r30, 0x35	; 53
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	48 2f       	mov	r20, r24
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	02 2e       	mov	r0, r18
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <GPIO_writePin+0x164>
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	0a 94       	dec	r0
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <GPIO_writePin+0x160>
    1a0c:	80 95       	com	r24
    1a0e:	84 23       	and	r24, r20
    1a10:	8c 93       	st	X, r24
    1a12:	2b c0       	rjmp	.+86     	; 0x1a6a <GPIO_writePin+0x1c6>
			}
			break;

		case PORTD_ID:
			if(value==LOGIC_HIGH){
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	a1 f4       	brne	.+40     	; 0x1a42 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    1a1a:	a2 e3       	ldi	r26, 0x32	; 50
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e2 e3       	ldi	r30, 0x32	; 50
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	48 2f       	mov	r20, r24
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	02 2e       	mov	r0, r18
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <GPIO_writePin+0x194>
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	0a 94       	dec	r0
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <GPIO_writePin+0x190>
    1a3c:	84 2b       	or	r24, r20
    1a3e:	8c 93       	st	X, r24
    1a40:	14 c0       	rjmp	.+40     	; 0x1a6a <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTD,pin_num);
    1a42:	a2 e3       	ldi	r26, 0x32	; 50
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e2 e3       	ldi	r30, 0x32	; 50
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 2e       	mov	r0, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <GPIO_writePin+0x1bc>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	0a 94       	dec	r0
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <GPIO_writePin+0x1b8>
    1a64:	80 95       	com	r24
    1a66:	84 23       	and	r24, r20
    1a68:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <GPIO_readPin>:

/*@description: read the value of specific pin in a certain port
 * param1: port_num is the specified port number
 * param2: pin_num is specified pin number
 * return: the value of the specified pin (LOGIC_LOW or LOGIC_HIGH)  */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <GPIO_readPin+0x6>
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <GPIO_readPin+0x8>
    1a82:	0f 92       	push	r0
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	8a 83       	std	Y+2, r24	; 0x02
    1a8a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 result = LOGIC_LOW; /*default value is LOGIC_LOW*/
    1a8c:	19 82       	std	Y+1, r1	; 0x01
	/*check if the input port number is greater than number of ports
	 * or if the number of the input pin is greater than number of pins per port
	 * in this case if it happened it will do nothing */
	if((port_num>=NUM_OF_PORTS)||(pin_num>=NUM_OF_PINS_PER_PORT)){
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	84 30       	cpi	r24, 0x04	; 4
    1a92:	08 f0       	brcs	.+2      	; 0x1a96 <GPIO_readPin+0x1c>
    1a94:	84 c0       	rjmp	.+264    	; 0x1b9e <GPIO_readPin+0x124>
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	88 30       	cpi	r24, 0x08	; 8
    1a9a:	08 f0       	brcs	.+2      	; 0x1a9e <GPIO_readPin+0x24>
    1a9c:	80 c0       	rjmp	.+256    	; 0x1b9e <GPIO_readPin+0x124>
		/*do nothing*/
	}
	else{
		/*read a certain pin according to given parameters */
		switch (port_num) {
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	3d 83       	std	Y+5, r19	; 0x05
    1aa6:	2c 83       	std	Y+4, r18	; 0x04
    1aa8:	4c 81       	ldd	r20, Y+4	; 0x04
    1aaa:	5d 81       	ldd	r21, Y+5	; 0x05
    1aac:	41 30       	cpi	r20, 0x01	; 1
    1aae:	51 05       	cpc	r21, r1
    1ab0:	79 f1       	breq	.+94     	; 0x1b10 <GPIO_readPin+0x96>
    1ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab6:	82 30       	cpi	r24, 0x02	; 2
    1ab8:	91 05       	cpc	r25, r1
    1aba:	34 f4       	brge	.+12     	; 0x1ac8 <GPIO_readPin+0x4e>
    1abc:	2c 81       	ldd	r18, Y+4	; 0x04
    1abe:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac0:	21 15       	cp	r18, r1
    1ac2:	31 05       	cpc	r19, r1
    1ac4:	69 f0       	breq	.+26     	; 0x1ae0 <GPIO_readPin+0x66>
    1ac6:	6b c0       	rjmp	.+214    	; 0x1b9e <GPIO_readPin+0x124>
    1ac8:	4c 81       	ldd	r20, Y+4	; 0x04
    1aca:	5d 81       	ldd	r21, Y+5	; 0x05
    1acc:	42 30       	cpi	r20, 0x02	; 2
    1ace:	51 05       	cpc	r21, r1
    1ad0:	b9 f1       	breq	.+110    	; 0x1b40 <GPIO_readPin+0xc6>
    1ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad6:	83 30       	cpi	r24, 0x03	; 3
    1ad8:	91 05       	cpc	r25, r1
    1ada:	09 f4       	brne	.+2      	; 0x1ade <GPIO_readPin+0x64>
    1adc:	49 c0       	rjmp	.+146    	; 0x1b70 <GPIO_readPin+0xf6>
    1ade:	5f c0       	rjmp	.+190    	; 0x1b9e <GPIO_readPin+0x124>
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num)){
    1ae0:	e9 e3       	ldi	r30, 0x39	; 57
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	88 2f       	mov	r24, r24
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	a9 01       	movw	r20, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <GPIO_readPin+0x7e>
    1af4:	55 95       	asr	r21
    1af6:	47 95       	ror	r20
    1af8:	8a 95       	dec	r24
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <GPIO_readPin+0x7a>
    1afc:	ca 01       	movw	r24, r20
    1afe:	81 70       	andi	r24, 0x01	; 1
    1b00:	90 70       	andi	r25, 0x00	; 0
    1b02:	88 23       	and	r24, r24
    1b04:	19 f0       	breq	.+6      	; 0x1b0c <GPIO_readPin+0x92>
				result = LOGIC_HIGH;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	49 c0       	rjmp	.+146    	; 0x1b9e <GPIO_readPin+0x124>
			}
			else{
				result = LOGIC_LOW;
    1b0c:	19 82       	std	Y+1, r1	; 0x01
    1b0e:	47 c0       	rjmp	.+142    	; 0x1b9e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num)){
    1b10:	e6 e3       	ldi	r30, 0x36	; 54
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	88 2f       	mov	r24, r24
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	a9 01       	movw	r20, r18
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <GPIO_readPin+0xae>
    1b24:	55 95       	asr	r21
    1b26:	47 95       	ror	r20
    1b28:	8a 95       	dec	r24
    1b2a:	e2 f7       	brpl	.-8      	; 0x1b24 <GPIO_readPin+0xaa>
    1b2c:	ca 01       	movw	r24, r20
    1b2e:	81 70       	andi	r24, 0x01	; 1
    1b30:	90 70       	andi	r25, 0x00	; 0
    1b32:	88 23       	and	r24, r24
    1b34:	19 f0       	breq	.+6      	; 0x1b3c <GPIO_readPin+0xc2>
				result = LOGIC_HIGH;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	31 c0       	rjmp	.+98     	; 0x1b9e <GPIO_readPin+0x124>
			}
			else{
				result = LOGIC_LOW;
    1b3c:	19 82       	std	Y+1, r1	; 0x01
    1b3e:	2f c0       	rjmp	.+94     	; 0x1b9e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num)){
    1b40:	e3 e3       	ldi	r30, 0x33	; 51
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	88 2f       	mov	r24, r24
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	a9 01       	movw	r20, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <GPIO_readPin+0xde>
    1b54:	55 95       	asr	r21
    1b56:	47 95       	ror	r20
    1b58:	8a 95       	dec	r24
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <GPIO_readPin+0xda>
    1b5c:	ca 01       	movw	r24, r20
    1b5e:	81 70       	andi	r24, 0x01	; 1
    1b60:	90 70       	andi	r25, 0x00	; 0
    1b62:	88 23       	and	r24, r24
    1b64:	19 f0       	breq	.+6      	; 0x1b6c <GPIO_readPin+0xf2>
				result = LOGIC_HIGH;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	19 c0       	rjmp	.+50     	; 0x1b9e <GPIO_readPin+0x124>
			}
			else{
				result = LOGIC_LOW;
    1b6c:	19 82       	std	Y+1, r1	; 0x01
    1b6e:	17 c0       	rjmp	.+46     	; 0x1b9e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num)){
    1b70:	e0 e3       	ldi	r30, 0x30	; 48
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	88 2f       	mov	r24, r24
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	a9 01       	movw	r20, r18
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <GPIO_readPin+0x10e>
    1b84:	55 95       	asr	r21
    1b86:	47 95       	ror	r20
    1b88:	8a 95       	dec	r24
    1b8a:	e2 f7       	brpl	.-8      	; 0x1b84 <GPIO_readPin+0x10a>
    1b8c:	ca 01       	movw	r24, r20
    1b8e:	81 70       	andi	r24, 0x01	; 1
    1b90:	90 70       	andi	r25, 0x00	; 0
    1b92:	88 23       	and	r24, r24
    1b94:	19 f0       	breq	.+6      	; 0x1b9c <GPIO_readPin+0x122>
				result = LOGIC_HIGH;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <GPIO_readPin+0x124>
			}
			else{
				result = LOGIC_LOW;
    1b9c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return result;
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <GPIO_setupPortDirection>:
/*@description: set a port as input or output
 * param1: port_num is the specified port number
 * param2: direction is direction of specified port as input or output
 * return: none */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PortDirectionType direction)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <GPIO_setupPortDirection+0x6>
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <GPIO_setupPortDirection+0x8>
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	6a 83       	std	Y+2, r22	; 0x02
	/*check if the input port number is greater than number of ports
	 * in this case if it happened it will do nothing */
	if(port_num >= NUM_OF_PORTS)
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	84 30       	cpi	r24, 0x04	; 4
    1bc4:	90 f5       	brcc	.+100    	; 0x1c2a <GPIO_setupPortDirection+0x7a>
	/*do nothing*/
	}
	else
	{
		/*set the direction of a port according to given parameters */
		switch(port_num)
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	3c 83       	std	Y+4, r19	; 0x04
    1bce:	2b 83       	std	Y+3, r18	; 0x03
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	d1 f0       	breq	.+52     	; 0x1c0e <GPIO_setupPortDirection+0x5e>
    1bda:	2b 81       	ldd	r18, Y+3	; 0x03
    1bdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bde:	22 30       	cpi	r18, 0x02	; 2
    1be0:	31 05       	cpc	r19, r1
    1be2:	2c f4       	brge	.+10     	; 0x1bee <GPIO_setupPortDirection+0x3e>
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	9c 81       	ldd	r25, Y+4	; 0x04
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	61 f0       	breq	.+24     	; 0x1c04 <GPIO_setupPortDirection+0x54>
    1bec:	1e c0       	rjmp	.+60     	; 0x1c2a <GPIO_setupPortDirection+0x7a>
    1bee:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf2:	22 30       	cpi	r18, 0x02	; 2
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	81 f0       	breq	.+32     	; 0x1c18 <GPIO_setupPortDirection+0x68>
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	83 30       	cpi	r24, 0x03	; 3
    1bfe:	91 05       	cpc	r25, r1
    1c00:	81 f0       	breq	.+32     	; 0x1c22 <GPIO_setupPortDirection+0x72>
    1c02:	13 c0       	rjmp	.+38     	; 0x1c2a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c04:	ea e3       	ldi	r30, 0x3A	; 58
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	80 83       	st	Z, r24
    1c0c:	0e c0       	rjmp	.+28     	; 0x1c2a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1c0e:	e7 e3       	ldi	r30, 0x37	; 55
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	80 83       	st	Z, r24
    1c16:	09 c0       	rjmp	.+18     	; 0x1c2a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1c18:	e4 e3       	ldi	r30, 0x34	; 52
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	80 83       	st	Z, r24
    1c20:	04 c0       	rjmp	.+8      	; 0x1c2a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1c22:	e1 e3       	ldi	r30, 0x31	; 49
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <GPIO_writePort>:
/*@description: write a value in the full port if the port is assigned as input
 *              this function act to activate pull-up resistor for all pins
 *param1: port_num is the specified port number
 *param2: value is the value to be written in the port
 *return: none */
void GPIO_writePort(uint8 port_num,uint8 value){
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <GPIO_writePort+0x6>
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <GPIO_writePort+0x8>
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	6a 83       	std	Y+2, r22	; 0x02
	/*check if the input port number is greater than number of ports
	 * in this case if it happened it will do nothing */
	if(port_num>=NUM_OF_PORTS){
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	84 30       	cpi	r24, 0x04	; 4
    1c4c:	90 f5       	brcc	.+100    	; 0x1cb2 <GPIO_writePort+0x7a>
		/*do nothing*/
	}
	else{
		/*select certain port to write in*/
		switch(port_num){
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	3c 83       	std	Y+4, r19	; 0x04
    1c56:	2b 83       	std	Y+3, r18	; 0x03
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	81 30       	cpi	r24, 0x01	; 1
    1c5e:	91 05       	cpc	r25, r1
    1c60:	d1 f0       	breq	.+52     	; 0x1c96 <GPIO_writePort+0x5e>
    1c62:	2b 81       	ldd	r18, Y+3	; 0x03
    1c64:	3c 81       	ldd	r19, Y+4	; 0x04
    1c66:	22 30       	cpi	r18, 0x02	; 2
    1c68:	31 05       	cpc	r19, r1
    1c6a:	2c f4       	brge	.+10     	; 0x1c76 <GPIO_writePort+0x3e>
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	61 f0       	breq	.+24     	; 0x1c8c <GPIO_writePort+0x54>
    1c74:	1e c0       	rjmp	.+60     	; 0x1cb2 <GPIO_writePort+0x7a>
    1c76:	2b 81       	ldd	r18, Y+3	; 0x03
    1c78:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7a:	22 30       	cpi	r18, 0x02	; 2
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	81 f0       	breq	.+32     	; 0x1ca0 <GPIO_writePort+0x68>
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	83 30       	cpi	r24, 0x03	; 3
    1c86:	91 05       	cpc	r25, r1
    1c88:	81 f0       	breq	.+32     	; 0x1caa <GPIO_writePort+0x72>
    1c8a:	13 c0       	rjmp	.+38     	; 0x1cb2 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA=value;
    1c8c:	eb e3       	ldi	r30, 0x3B	; 59
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	80 83       	st	Z, r24
    1c94:	0e c0       	rjmp	.+28     	; 0x1cb2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    1c96:	e8 e3       	ldi	r30, 0x38	; 56
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	80 83       	st	Z, r24
    1c9e:	09 c0       	rjmp	.+18     	; 0x1cb2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    1ca0:	e5 e3       	ldi	r30, 0x35	; 53
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	80 83       	st	Z, r24
    1ca8:	04 c0       	rjmp	.+8      	; 0x1cb2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    1caa:	e2 e3       	ldi	r30, 0x32	; 50
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	08 95       	ret

00001cc0 <GPIO_readPort>:


/*@description: returns the value of the specified port
 *param1: port_num is the specified port number
 *return: value specified in certain port  */
uint8 GPIO_readPort(uint8 port_num){
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <GPIO_readPort+0x6>
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <GPIO_readPort+0x8>
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 result = 0;
    1cce:	19 82       	std	Y+1, r1	; 0x01
	if(port_num>=NUM_OF_PORTS){
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	84 30       	cpi	r24, 0x04	; 4
    1cd4:	90 f5       	brcc	.+100    	; 0x1d3a <GPIO_readPort+0x7a>

	}
	else{
		switch(port_num){
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	3c 83       	std	Y+4, r19	; 0x04
    1cde:	2b 83       	std	Y+3, r18	; 0x03
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	d1 f0       	breq	.+52     	; 0x1d1e <GPIO_readPort+0x5e>
    1cea:	2b 81       	ldd	r18, Y+3	; 0x03
    1cec:	3c 81       	ldd	r19, Y+4	; 0x04
    1cee:	22 30       	cpi	r18, 0x02	; 2
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	2c f4       	brge	.+10     	; 0x1cfe <GPIO_readPort+0x3e>
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	61 f0       	breq	.+24     	; 0x1d14 <GPIO_readPort+0x54>
    1cfc:	1e c0       	rjmp	.+60     	; 0x1d3a <GPIO_readPort+0x7a>
    1cfe:	2b 81       	ldd	r18, Y+3	; 0x03
    1d00:	3c 81       	ldd	r19, Y+4	; 0x04
    1d02:	22 30       	cpi	r18, 0x02	; 2
    1d04:	31 05       	cpc	r19, r1
    1d06:	81 f0       	breq	.+32     	; 0x1d28 <GPIO_readPort+0x68>
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	83 30       	cpi	r24, 0x03	; 3
    1d0e:	91 05       	cpc	r25, r1
    1d10:	81 f0       	breq	.+32     	; 0x1d32 <GPIO_readPort+0x72>
    1d12:	13 c0       	rjmp	.+38     	; 0x1d3a <GPIO_readPort+0x7a>
		case PORTA_ID:
			result =PINA;
    1d14:	e9 e3       	ldi	r30, 0x39	; 57
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	0e c0       	rjmp	.+28     	; 0x1d3a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			result =PINB;
    1d1e:	e6 e3       	ldi	r30, 0x36	; 54
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	89 83       	std	Y+1, r24	; 0x01
    1d26:	09 c0       	rjmp	.+18     	; 0x1d3a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			result =PINC;
    1d28:	e3 e3       	ldi	r30, 0x33	; 51
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	04 c0       	rjmp	.+8      	; 0x1d3a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			result =PIND;
    1d32:	e0 e3       	ldi	r30, 0x30	; 48
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return result;
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <__vector_9>:


/*****************************************************************************************
                                      timer0 ISRs
*****************************************************************************************/
ISR(TIMER0_OVF_vect){
    1d4a:	1f 92       	push	r1
    1d4c:	0f 92       	push	r0
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	0f 92       	push	r0
    1d52:	11 24       	eor	r1, r1
    1d54:	2f 93       	push	r18
    1d56:	3f 93       	push	r19
    1d58:	4f 93       	push	r20
    1d5a:	5f 93       	push	r21
    1d5c:	6f 93       	push	r22
    1d5e:	7f 93       	push	r23
    1d60:	8f 93       	push	r24
    1d62:	9f 93       	push	r25
    1d64:	af 93       	push	r26
    1d66:	bf 93       	push	r27
    1d68:	ef 93       	push	r30
    1d6a:	ff 93       	push	r31
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62

	if(g_Timer0CallBackPtr != NULL_PTR)
    1d74:	80 91 82 00 	lds	r24, 0x0082
    1d78:	90 91 83 00 	lds	r25, 0x0083
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	51 f0       	breq	.+20     	; 0x1d94 <__vector_9+0x4a>
	{
		TCNT0 = timer0_ovf_initial_value; /*in case of overflow mode initialize the timer with value specified from user each time*/
    1d80:	e2 e5       	ldi	r30, 0x52	; 82
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 91 88 00 	lds	r24, 0x0088
    1d88:	80 83       	st	Z, r24
		(*g_Timer0CallBackPtr)();
    1d8a:	e0 91 82 00 	lds	r30, 0x0082
    1d8e:	f0 91 83 00 	lds	r31, 0x0083
    1d92:	09 95       	icall
	}
}
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	ff 91       	pop	r31
    1d9a:	ef 91       	pop	r30
    1d9c:	bf 91       	pop	r27
    1d9e:	af 91       	pop	r26
    1da0:	9f 91       	pop	r25
    1da2:	8f 91       	pop	r24
    1da4:	7f 91       	pop	r23
    1da6:	6f 91       	pop	r22
    1da8:	5f 91       	pop	r21
    1daa:	4f 91       	pop	r20
    1dac:	3f 91       	pop	r19
    1dae:	2f 91       	pop	r18
    1db0:	0f 90       	pop	r0
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	0f 90       	pop	r0
    1db6:	1f 90       	pop	r1
    1db8:	18 95       	reti

00001dba <__vector_19>:

ISR(TIMER0_COMP_vect){
    1dba:	1f 92       	push	r1
    1dbc:	0f 92       	push	r0
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	0f 92       	push	r0
    1dc2:	11 24       	eor	r1, r1
    1dc4:	2f 93       	push	r18
    1dc6:	3f 93       	push	r19
    1dc8:	4f 93       	push	r20
    1dca:	5f 93       	push	r21
    1dcc:	6f 93       	push	r22
    1dce:	7f 93       	push	r23
    1dd0:	8f 93       	push	r24
    1dd2:	9f 93       	push	r25
    1dd4:	af 93       	push	r26
    1dd6:	bf 93       	push	r27
    1dd8:	ef 93       	push	r30
    1dda:	ff 93       	push	r31
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0CallBackPtr != NULL_PTR)
    1de4:	80 91 82 00 	lds	r24, 0x0082
    1de8:	90 91 83 00 	lds	r25, 0x0083
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	29 f0       	breq	.+10     	; 0x1dfa <__vector_19+0x40>
	{

		(*g_Timer0CallBackPtr)();
    1df0:	e0 91 82 00 	lds	r30, 0x0082
    1df4:	f0 91 83 00 	lds	r31, 0x0083
    1df8:	09 95       	icall
	}
}
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	ff 91       	pop	r31
    1e00:	ef 91       	pop	r30
    1e02:	bf 91       	pop	r27
    1e04:	af 91       	pop	r26
    1e06:	9f 91       	pop	r25
    1e08:	8f 91       	pop	r24
    1e0a:	7f 91       	pop	r23
    1e0c:	6f 91       	pop	r22
    1e0e:	5f 91       	pop	r21
    1e10:	4f 91       	pop	r20
    1e12:	3f 91       	pop	r19
    1e14:	2f 91       	pop	r18
    1e16:	0f 90       	pop	r0
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	0f 90       	pop	r0
    1e1c:	1f 90       	pop	r1
    1e1e:	18 95       	reti

00001e20 <__vector_8>:


/*****************************************************************************************
                                      timer1 ISRs
*****************************************************************************************/
ISR(TIMER1_OVF_vect){
    1e20:	1f 92       	push	r1
    1e22:	0f 92       	push	r0
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	0f 92       	push	r0
    1e28:	11 24       	eor	r1, r1
    1e2a:	2f 93       	push	r18
    1e2c:	3f 93       	push	r19
    1e2e:	4f 93       	push	r20
    1e30:	5f 93       	push	r21
    1e32:	6f 93       	push	r22
    1e34:	7f 93       	push	r23
    1e36:	8f 93       	push	r24
    1e38:	9f 93       	push	r25
    1e3a:	af 93       	push	r26
    1e3c:	bf 93       	push	r27
    1e3e:	ef 93       	push	r30
    1e40:	ff 93       	push	r31
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62

	if(g_Timer1CallBackPtr != NULL_PTR)
    1e4a:	80 91 84 00 	lds	r24, 0x0084
    1e4e:	90 91 85 00 	lds	r25, 0x0085
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	69 f0       	breq	.+26     	; 0x1e70 <__vector_8+0x50>
	{
		TCNT1 = timer1_ovf_initial_value; /*in case of overflow mode initialize the timer with value specified from user each time*/
    1e56:	ec e4       	ldi	r30, 0x4C	; 76
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 91 89 00 	lds	r24, 0x0089
    1e5e:	90 91 8a 00 	lds	r25, 0x008A
    1e62:	91 83       	std	Z+1, r25	; 0x01
    1e64:	80 83       	st	Z, r24
		(*g_Timer1CallBackPtr)();
    1e66:	e0 91 84 00 	lds	r30, 0x0084
    1e6a:	f0 91 85 00 	lds	r31, 0x0085
    1e6e:	09 95       	icall
	}
}
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	ff 91       	pop	r31
    1e76:	ef 91       	pop	r30
    1e78:	bf 91       	pop	r27
    1e7a:	af 91       	pop	r26
    1e7c:	9f 91       	pop	r25
    1e7e:	8f 91       	pop	r24
    1e80:	7f 91       	pop	r23
    1e82:	6f 91       	pop	r22
    1e84:	5f 91       	pop	r21
    1e86:	4f 91       	pop	r20
    1e88:	3f 91       	pop	r19
    1e8a:	2f 91       	pop	r18
    1e8c:	0f 90       	pop	r0
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	0f 90       	pop	r0
    1e92:	1f 90       	pop	r1
    1e94:	18 95       	reti

00001e96 <__vector_6>:

ISR(TIMER1_COMPA_vect){
    1e96:	1f 92       	push	r1
    1e98:	0f 92       	push	r0
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	0f 92       	push	r0
    1e9e:	11 24       	eor	r1, r1
    1ea0:	2f 93       	push	r18
    1ea2:	3f 93       	push	r19
    1ea4:	4f 93       	push	r20
    1ea6:	5f 93       	push	r21
    1ea8:	6f 93       	push	r22
    1eaa:	7f 93       	push	r23
    1eac:	8f 93       	push	r24
    1eae:	9f 93       	push	r25
    1eb0:	af 93       	push	r26
    1eb2:	bf 93       	push	r27
    1eb4:	ef 93       	push	r30
    1eb6:	ff 93       	push	r31
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1CallBackPtr != NULL_PTR)
    1ec0:	80 91 84 00 	lds	r24, 0x0084
    1ec4:	90 91 85 00 	lds	r25, 0x0085
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	29 f0       	breq	.+10     	; 0x1ed6 <__vector_6+0x40>
	{
		(*g_Timer1CallBackPtr)();
    1ecc:	e0 91 84 00 	lds	r30, 0x0084
    1ed0:	f0 91 85 00 	lds	r31, 0x0085
    1ed4:	09 95       	icall
	}
}
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	ff 91       	pop	r31
    1edc:	ef 91       	pop	r30
    1ede:	bf 91       	pop	r27
    1ee0:	af 91       	pop	r26
    1ee2:	9f 91       	pop	r25
    1ee4:	8f 91       	pop	r24
    1ee6:	7f 91       	pop	r23
    1ee8:	6f 91       	pop	r22
    1eea:	5f 91       	pop	r21
    1eec:	4f 91       	pop	r20
    1eee:	3f 91       	pop	r19
    1ef0:	2f 91       	pop	r18
    1ef2:	0f 90       	pop	r0
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	0f 90       	pop	r0
    1ef8:	1f 90       	pop	r1
    1efa:	18 95       	reti

00001efc <__vector_4>:

/*****************************************************************************************
                                      timer2 ISRs
*****************************************************************************************/
ISR(TIMER2_OVF_vect){
    1efc:	1f 92       	push	r1
    1efe:	0f 92       	push	r0
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	0f 92       	push	r0
    1f04:	11 24       	eor	r1, r1
    1f06:	2f 93       	push	r18
    1f08:	3f 93       	push	r19
    1f0a:	4f 93       	push	r20
    1f0c:	5f 93       	push	r21
    1f0e:	6f 93       	push	r22
    1f10:	7f 93       	push	r23
    1f12:	8f 93       	push	r24
    1f14:	9f 93       	push	r25
    1f16:	af 93       	push	r26
    1f18:	bf 93       	push	r27
    1f1a:	ef 93       	push	r30
    1f1c:	ff 93       	push	r31
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62

	if(g_Timer2CallBackPtr != NULL_PTR)
    1f26:	80 91 86 00 	lds	r24, 0x0086
    1f2a:	90 91 87 00 	lds	r25, 0x0087
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	51 f0       	breq	.+20     	; 0x1f46 <__vector_4+0x4a>
	{
		TCNT2 = timer2_ovf_initial_value; /*in case of overflow mode initialize the timer with value specified from user each time*/
    1f32:	e4 e4       	ldi	r30, 0x44	; 68
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 91 8b 00 	lds	r24, 0x008B
    1f3a:	80 83       	st	Z, r24
		(*g_Timer2CallBackPtr)();
    1f3c:	e0 91 86 00 	lds	r30, 0x0086
    1f40:	f0 91 87 00 	lds	r31, 0x0087
    1f44:	09 95       	icall
	}
}
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	ff 91       	pop	r31
    1f4c:	ef 91       	pop	r30
    1f4e:	bf 91       	pop	r27
    1f50:	af 91       	pop	r26
    1f52:	9f 91       	pop	r25
    1f54:	8f 91       	pop	r24
    1f56:	7f 91       	pop	r23
    1f58:	6f 91       	pop	r22
    1f5a:	5f 91       	pop	r21
    1f5c:	4f 91       	pop	r20
    1f5e:	3f 91       	pop	r19
    1f60:	2f 91       	pop	r18
    1f62:	0f 90       	pop	r0
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	0f 90       	pop	r0
    1f68:	1f 90       	pop	r1
    1f6a:	18 95       	reti

00001f6c <__vector_3>:

ISR(TIMER2_COMP_vect){
    1f6c:	1f 92       	push	r1
    1f6e:	0f 92       	push	r0
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	0f 92       	push	r0
    1f74:	11 24       	eor	r1, r1
    1f76:	2f 93       	push	r18
    1f78:	3f 93       	push	r19
    1f7a:	4f 93       	push	r20
    1f7c:	5f 93       	push	r21
    1f7e:	6f 93       	push	r22
    1f80:	7f 93       	push	r23
    1f82:	8f 93       	push	r24
    1f84:	9f 93       	push	r25
    1f86:	af 93       	push	r26
    1f88:	bf 93       	push	r27
    1f8a:	ef 93       	push	r30
    1f8c:	ff 93       	push	r31
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2CallBackPtr!= NULL_PTR)
    1f96:	80 91 86 00 	lds	r24, 0x0086
    1f9a:	90 91 87 00 	lds	r25, 0x0087
    1f9e:	00 97       	sbiw	r24, 0x00	; 0
    1fa0:	29 f0       	breq	.+10     	; 0x1fac <__vector_3+0x40>
	{
		(*g_Timer2CallBackPtr)();
    1fa2:	e0 91 86 00 	lds	r30, 0x0086
    1fa6:	f0 91 87 00 	lds	r31, 0x0087
    1faa:	09 95       	icall
	}
}
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	ff 91       	pop	r31
    1fb2:	ef 91       	pop	r30
    1fb4:	bf 91       	pop	r27
    1fb6:	af 91       	pop	r26
    1fb8:	9f 91       	pop	r25
    1fba:	8f 91       	pop	r24
    1fbc:	7f 91       	pop	r23
    1fbe:	6f 91       	pop	r22
    1fc0:	5f 91       	pop	r21
    1fc2:	4f 91       	pop	r20
    1fc4:	3f 91       	pop	r19
    1fc6:	2f 91       	pop	r18
    1fc8:	0f 90       	pop	r0
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	0f 90       	pop	r0
    1fce:	1f 90       	pop	r1
    1fd0:	18 95       	reti

00001fd2 <Timer_init>:
 * -set the mode of the timer overflow or compare
 * -set the clock source clock and prescaler
 * -if in compare mode set compare value
 * return: none
 * */
void Timer_init(const Timer_ConfigType * Config_Ptr){
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	00 d0       	rcall	.+0      	; 0x1fd8 <Timer_init+0x6>
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	89 83       	std	Y+1, r24	; 0x01
	/*initialize timer0*/
	if(Config_Ptr ->timer_id == TIMER0_ID){
    1fe0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe4:	80 81       	ld	r24, Z
    1fe6:	88 23       	and	r24, r24
    1fe8:	09 f0       	breq	.+2      	; 0x1fec <Timer_init+0x1a>
    1fea:	55 c0       	rjmp	.+170    	; 0x2096 <Timer_init+0xc4>
		SET_BIT(TCCR0,FOC0); /*this bit is set when we operate in non-PWM*/
    1fec:	a3 e5       	ldi	r26, 0x53	; 83
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	e3 e5       	ldi	r30, 0x53	; 83
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	80 68       	ori	r24, 0x80	; 128
    1ff8:	8c 93       	st	X, r24
		/*save initial value in case of overflow mode to start count from it*/
		timer0_ovf_initial_value = Config_Ptr->initial_value;
    1ffa:	e9 81       	ldd	r30, Y+1	; 0x01
    1ffc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffe:	83 81       	ldd	r24, Z+3	; 0x03
    2000:	80 93 88 00 	sts	0x0088, r24
		TCNT0 = Config_Ptr->initial_value; /*set timer initial value*/
    2004:	a2 e5       	ldi	r26, 0x52	; 82
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e9 81       	ldd	r30, Y+1	; 0x01
    200a:	fa 81       	ldd	r31, Y+2	; 0x02
    200c:	83 81       	ldd	r24, Z+3	; 0x03
    200e:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xB7) | (((Config_Ptr->mode)<<3)&0x08); /*set timer mode compare or overflow*/
    2010:	a3 e5       	ldi	r26, 0x53	; 83
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e3 e5       	ldi	r30, 0x53	; 83
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	28 2f       	mov	r18, r24
    201c:	27 7b       	andi	r18, 0xB7	; 183
    201e:	e9 81       	ldd	r30, Y+1	; 0x01
    2020:	fa 81       	ldd	r31, Y+2	; 0x02
    2022:	81 81       	ldd	r24, Z+1	; 0x01
    2024:	88 2f       	mov	r24, r24
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	88 70       	andi	r24, 0x08	; 8
    2036:	82 2b       	or	r24, r18
    2038:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | ((Config_Ptr->clock)&0x07); /*set timer source clock and prescaler*/
    203a:	a3 e5       	ldi	r26, 0x53	; 83
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e3 e5       	ldi	r30, 0x53	; 83
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	98 2f       	mov	r25, r24
    2046:	98 7f       	andi	r25, 0xF8	; 248
    2048:	e9 81       	ldd	r30, Y+1	; 0x01
    204a:	fa 81       	ldd	r31, Y+2	; 0x02
    204c:	82 81       	ldd	r24, Z+2	; 0x02
    204e:	87 70       	andi	r24, 0x07	; 7
    2050:	89 2b       	or	r24, r25
    2052:	8c 93       	st	X, r24
		OCR0 = Config_Ptr->compare_value; /*set compare value*/
    2054:	ac e5       	ldi	r26, 0x5C	; 92
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e9 81       	ldd	r30, Y+1	; 0x01
    205a:	fa 81       	ldd	r31, Y+2	; 0x02
    205c:	84 81       	ldd	r24, Z+4	; 0x04
    205e:	8c 93       	st	X, r24

		if(Config_Ptr->mode == NORMAL){
    2060:	e9 81       	ldd	r30, Y+1	; 0x01
    2062:	fa 81       	ldd	r31, Y+2	; 0x02
    2064:	81 81       	ldd	r24, Z+1	; 0x01
    2066:	88 23       	and	r24, r24
    2068:	41 f4       	brne	.+16     	; 0x207a <Timer_init+0xa8>
			SET_BIT(TIMSK,TOIE0); /*enable interrupt for timer0 in overflow mode*/
    206a:	a9 e5       	ldi	r26, 0x59	; 89
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e9 e5       	ldi	r30, 0x59	; 89
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	81 60       	ori	r24, 0x01	; 1
    2076:	8c 93       	st	X, r24
    2078:	ce c0       	rjmp	.+412    	; 0x2216 <Timer_init+0x244>
		}
		else if(Config_Ptr->mode == COMPARE){
    207a:	e9 81       	ldd	r30, Y+1	; 0x01
    207c:	fa 81       	ldd	r31, Y+2	; 0x02
    207e:	81 81       	ldd	r24, Z+1	; 0x01
    2080:	81 30       	cpi	r24, 0x01	; 1
    2082:	09 f0       	breq	.+2      	; 0x2086 <Timer_init+0xb4>
    2084:	c8 c0       	rjmp	.+400    	; 0x2216 <Timer_init+0x244>
			SET_BIT(TIMSK,OCIE0); /*enable interrupt for timer0 in compare mode*/
    2086:	a9 e5       	ldi	r26, 0x59	; 89
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e9 e5       	ldi	r30, 0x59	; 89
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	82 60       	ori	r24, 0x02	; 2
    2092:	8c 93       	st	X, r24
    2094:	c0 c0       	rjmp	.+384    	; 0x2216 <Timer_init+0x244>
		}
	}

	/*initialize timer1*/
	else if(Config_Ptr->timer_id == TIMER1_ID){
    2096:	e9 81       	ldd	r30, Y+1	; 0x01
    2098:	fa 81       	ldd	r31, Y+2	; 0x02
    209a:	80 81       	ld	r24, Z
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	09 f0       	breq	.+2      	; 0x20a2 <Timer_init+0xd0>
    20a0:	61 c0       	rjmp	.+194    	; 0x2164 <Timer_init+0x192>
		SET_BIT(TCCR1A,FOC1A);/*this bit is set when we operate in non-PWM*/
    20a2:	af e4       	ldi	r26, 0x4F	; 79
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	ef e4       	ldi	r30, 0x4F	; 79
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	88 60       	ori	r24, 0x08	; 8
    20ae:	8c 93       	st	X, r24
		/*save initial value in case of overflow mode to start count from it*/
		timer1_ovf_initial_value = Config_Ptr->initial_value;
    20b0:	e9 81       	ldd	r30, Y+1	; 0x01
    20b2:	fa 81       	ldd	r31, Y+2	; 0x02
    20b4:	83 81       	ldd	r24, Z+3	; 0x03
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	90 93 8a 00 	sts	0x008A, r25
    20be:	80 93 89 00 	sts	0x0089, r24
		TCNT1 = Config_Ptr->initial_value;/*set timer initial value*/
    20c2:	ac e4       	ldi	r26, 0x4C	; 76
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e9 81       	ldd	r30, Y+1	; 0x01
    20c8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ca:	83 81       	ldd	r24, Z+3	; 0x03
    20cc:	88 2f       	mov	r24, r24
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	11 96       	adiw	r26, 0x01	; 1
    20d2:	9c 93       	st	X, r25
    20d4:	8e 93       	st	-X, r24
		TCCR1B = (TCCR1B & 0xE7) | (((Config_Ptr->mode)<<3)&0x08);/*set timer mode compare or overflow*/
    20d6:	ae e4       	ldi	r26, 0x4E	; 78
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	ee e4       	ldi	r30, 0x4E	; 78
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	28 2f       	mov	r18, r24
    20e2:	27 7e       	andi	r18, 0xE7	; 231
    20e4:	e9 81       	ldd	r30, Y+1	; 0x01
    20e6:	fa 81       	ldd	r31, Y+2	; 0x02
    20e8:	81 81       	ldd	r24, Z+1	; 0x01
    20ea:	88 2f       	mov	r24, r24
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	88 0f       	add	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	88 0f       	add	r24, r24
    20f4:	99 1f       	adc	r25, r25
    20f6:	88 0f       	add	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	88 70       	andi	r24, 0x08	; 8
    20fc:	82 2b       	or	r24, r18
    20fe:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr->clock)&0x07);/*set timer source clock and prescaler*/
    2100:	ae e4       	ldi	r26, 0x4E	; 78
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	ee e4       	ldi	r30, 0x4E	; 78
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	98 2f       	mov	r25, r24
    210c:	98 7f       	andi	r25, 0xF8	; 248
    210e:	e9 81       	ldd	r30, Y+1	; 0x01
    2110:	fa 81       	ldd	r31, Y+2	; 0x02
    2112:	82 81       	ldd	r24, Z+2	; 0x02
    2114:	87 70       	andi	r24, 0x07	; 7
    2116:	89 2b       	or	r24, r25
    2118:	8c 93       	st	X, r24
		OCR1A = Config_Ptr->compare_value;/*set compare value*/
    211a:	aa e4       	ldi	r26, 0x4A	; 74
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e9 81       	ldd	r30, Y+1	; 0x01
    2120:	fa 81       	ldd	r31, Y+2	; 0x02
    2122:	84 81       	ldd	r24, Z+4	; 0x04
    2124:	88 2f       	mov	r24, r24
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	11 96       	adiw	r26, 0x01	; 1
    212a:	9c 93       	st	X, r25
    212c:	8e 93       	st	-X, r24

		if(Config_Ptr->mode == NORMAL){
    212e:	e9 81       	ldd	r30, Y+1	; 0x01
    2130:	fa 81       	ldd	r31, Y+2	; 0x02
    2132:	81 81       	ldd	r24, Z+1	; 0x01
    2134:	88 23       	and	r24, r24
    2136:	41 f4       	brne	.+16     	; 0x2148 <Timer_init+0x176>
			SET_BIT(TIMSK,TOIE1); /*enable interrupt for timer1 in overflow mode*/
    2138:	a9 e5       	ldi	r26, 0x59	; 89
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e9 e5       	ldi	r30, 0x59	; 89
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	84 60       	ori	r24, 0x04	; 4
    2144:	8c 93       	st	X, r24
    2146:	67 c0       	rjmp	.+206    	; 0x2216 <Timer_init+0x244>
		}
		else if(Config_Ptr->mode == COMPARE){
    2148:	e9 81       	ldd	r30, Y+1	; 0x01
    214a:	fa 81       	ldd	r31, Y+2	; 0x02
    214c:	81 81       	ldd	r24, Z+1	; 0x01
    214e:	81 30       	cpi	r24, 0x01	; 1
    2150:	09 f0       	breq	.+2      	; 0x2154 <Timer_init+0x182>
    2152:	61 c0       	rjmp	.+194    	; 0x2216 <Timer_init+0x244>
			SET_BIT(TIMSK,OCIE1A); /*enable interrupt for timer1 in compare mode*/
    2154:	a9 e5       	ldi	r26, 0x59	; 89
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e9 e5       	ldi	r30, 0x59	; 89
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	80 61       	ori	r24, 0x10	; 16
    2160:	8c 93       	st	X, r24
    2162:	59 c0       	rjmp	.+178    	; 0x2216 <Timer_init+0x244>
		}
	}
	/*initialize timer2*/
	else if(Config_Ptr ->timer_id == TIMER2_ID){
    2164:	e9 81       	ldd	r30, Y+1	; 0x01
    2166:	fa 81       	ldd	r31, Y+2	; 0x02
    2168:	80 81       	ld	r24, Z
    216a:	82 30       	cpi	r24, 0x02	; 2
    216c:	09 f0       	breq	.+2      	; 0x2170 <Timer_init+0x19e>
    216e:	53 c0       	rjmp	.+166    	; 0x2216 <Timer_init+0x244>

		SET_BIT(TCCR2,FOC2);/*this bit is set when we operate in non-PWM*/
    2170:	a5 e4       	ldi	r26, 0x45	; 69
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e5 e4       	ldi	r30, 0x45	; 69
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	80 68       	ori	r24, 0x80	; 128
    217c:	8c 93       	st	X, r24
		/*save initial value in case of overflow mode to start count from it*/
		timer2_ovf_initial_value = Config_Ptr->initial_value;
    217e:	e9 81       	ldd	r30, Y+1	; 0x01
    2180:	fa 81       	ldd	r31, Y+2	; 0x02
    2182:	83 81       	ldd	r24, Z+3	; 0x03
    2184:	80 93 8b 00 	sts	0x008B, r24
		TCNT2 = Config_Ptr->initial_value;/*set timer initial value*/
    2188:	a4 e4       	ldi	r26, 0x44	; 68
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	e9 81       	ldd	r30, Y+1	; 0x01
    218e:	fa 81       	ldd	r31, Y+2	; 0x02
    2190:	83 81       	ldd	r24, Z+3	; 0x03
    2192:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xB7) | (((Config_Ptr->mode)<<3)&0x08);/*set timer mode compare or overflow*/
    2194:	a5 e4       	ldi	r26, 0x45	; 69
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e5 e4       	ldi	r30, 0x45	; 69
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	28 2f       	mov	r18, r24
    21a0:	27 7b       	andi	r18, 0xB7	; 183
    21a2:	e9 81       	ldd	r30, Y+1	; 0x01
    21a4:	fa 81       	ldd	r31, Y+2	; 0x02
    21a6:	81 81       	ldd	r24, Z+1	; 0x01
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	88 0f       	add	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	88 70       	andi	r24, 0x08	; 8
    21ba:	82 2b       	or	r24, r18
    21bc:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xF8) | ((Config_Ptr->clock)&0x07);/*set timer source clock and prescaler*/
    21be:	a5 e4       	ldi	r26, 0x45	; 69
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e5 e4       	ldi	r30, 0x45	; 69
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	98 2f       	mov	r25, r24
    21ca:	98 7f       	andi	r25, 0xF8	; 248
    21cc:	e9 81       	ldd	r30, Y+1	; 0x01
    21ce:	fa 81       	ldd	r31, Y+2	; 0x02
    21d0:	82 81       	ldd	r24, Z+2	; 0x02
    21d2:	87 70       	andi	r24, 0x07	; 7
    21d4:	89 2b       	or	r24, r25
    21d6:	8c 93       	st	X, r24
		OCR2 = Config_Ptr->compare_value;/*set compare value*/
    21d8:	a3 e4       	ldi	r26, 0x43	; 67
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e9 81       	ldd	r30, Y+1	; 0x01
    21de:	fa 81       	ldd	r31, Y+2	; 0x02
    21e0:	84 81       	ldd	r24, Z+4	; 0x04
    21e2:	8c 93       	st	X, r24

		if(Config_Ptr->mode == NORMAL){
    21e4:	e9 81       	ldd	r30, Y+1	; 0x01
    21e6:	fa 81       	ldd	r31, Y+2	; 0x02
    21e8:	81 81       	ldd	r24, Z+1	; 0x01
    21ea:	88 23       	and	r24, r24
    21ec:	41 f4       	brne	.+16     	; 0x21fe <Timer_init+0x22c>
			SET_BIT(TIMSK,TOIE2); /*enable interrupt for timer2 in overflow mode*/
    21ee:	a9 e5       	ldi	r26, 0x59	; 89
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	e9 e5       	ldi	r30, 0x59	; 89
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	80 64       	ori	r24, 0x40	; 64
    21fa:	8c 93       	st	X, r24
    21fc:	0c c0       	rjmp	.+24     	; 0x2216 <Timer_init+0x244>
		}
		else if(Config_Ptr->mode == COMPARE){
    21fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2200:	fa 81       	ldd	r31, Y+2	; 0x02
    2202:	81 81       	ldd	r24, Z+1	; 0x01
    2204:	81 30       	cpi	r24, 0x01	; 1
    2206:	39 f4       	brne	.+14     	; 0x2216 <Timer_init+0x244>
			SET_BIT(TIMSK,OCIE2);/*enable interrupt for timer2 in compare mode*/
    2208:	a9 e5       	ldi	r26, 0x59	; 89
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e9 e5       	ldi	r30, 0x59	; 89
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	80 68       	ori	r24, 0x80	; 128
    2214:	8c 93       	st	X, r24

	else{
		/*do nothing*/
	}

}
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <Timer0_setCallBack>:

/*@description: function to set the call back function address of timer0
 * param1:address of the call back function
 * return: none
 * */
void Timer0_setCallBack(void(*a_ptr)(void)){
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	00 d0       	rcall	.+0      	; 0x2226 <Timer0_setCallBack+0x6>
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	9a 83       	std	Y+2, r25	; 0x02
    222c:	89 83       	std	Y+1, r24	; 0x01
	g_Timer0CallBackPtr = a_ptr;
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	90 93 83 00 	sts	0x0083, r25
    2236:	80 93 82 00 	sts	0x0082, r24
}
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <Timer1_setCallBack>:

/*@description: function to set the call back function address of timer1
 * param1:address of the call back function
 * return: none
 * */
void Timer1_setCallBack(void(*a_ptr)(void)){
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	00 d0       	rcall	.+0      	; 0x224a <Timer1_setCallBack+0x6>
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	9a 83       	std	Y+2, r25	; 0x02
    2250:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1CallBackPtr = a_ptr;
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	9a 81       	ldd	r25, Y+2	; 0x02
    2256:	90 93 85 00 	sts	0x0085, r25
    225a:	80 93 84 00 	sts	0x0084, r24
}
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	08 95       	ret

00002268 <Timer2_setCallBack>:

/*@description: function to set the call back function address of timer2
 * param1:address of the call back function
 * return: none
 * */
void Timer2_setCallBack(void(*a_ptr)(void)){
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	00 d0       	rcall	.+0      	; 0x226e <Timer2_setCallBack+0x6>
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	9a 83       	std	Y+2, r25	; 0x02
    2274:	89 83       	std	Y+1, r24	; 0x01
	g_Timer2CallBackPtr = a_ptr;
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	9a 81       	ldd	r25, Y+2	; 0x02
    227a:	90 93 87 00 	sts	0x0087, r25
    227e:	80 93 86 00 	sts	0x0086, r24
}
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <Timer_DeInit>:

/*@description: function to disable the timer
 * param1: Timer_Id to specify which timer to stop
 * return: none
 * */
void Timer_DeInit(Timer_Id timer_id){
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	0f 92       	push	r0
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	89 83       	std	Y+1, r24	; 0x01
	/*disable timer0*/
	if(timer_id == TIMER0_ID){
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	88 23       	and	r24, r24
    229c:	c1 f4       	brne	.+48     	; 0x22ce <Timer_DeInit+0x42>
		TCCR0 = 0;
    229e:	e3 e5       	ldi	r30, 0x53	; 83
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	10 82       	st	Z, r1
		TCNT0 = 0;
    22a4:	e2 e5       	ldi	r30, 0x52	; 82
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	10 82       	st	Z, r1
		OCR0 = 0;
    22aa:	ec e5       	ldi	r30, 0x5C	; 92
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0);
    22b0:	a9 e5       	ldi	r26, 0x59	; 89
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e9 e5       	ldi	r30, 0x59	; 89
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	8d 7f       	andi	r24, 0xFD	; 253
    22bc:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0);
    22be:	a9 e5       	ldi	r26, 0x59	; 89
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e9 e5       	ldi	r30, 0x59	; 89
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	8e 7f       	andi	r24, 0xFE	; 254
    22ca:	8c 93       	st	X, r24
    22cc:	3a c0       	rjmp	.+116    	; 0x2342 <Timer_DeInit+0xb6>
	}
	/*disable timer1*/
	else if(timer_id == TIMER1_ID){
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	81 30       	cpi	r24, 0x01	; 1
    22d2:	e9 f4       	brne	.+58     	; 0x230e <Timer_DeInit+0x82>
		TCCR1A = 0;
    22d4:	ef e4       	ldi	r30, 0x4F	; 79
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	10 82       	st	Z, r1
		TCCR1B = 0;
    22da:	ee e4       	ldi	r30, 0x4E	; 78
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	10 82       	st	Z, r1
		OCR1A = 0;
    22e0:	ea e4       	ldi	r30, 0x4A	; 74
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	11 82       	std	Z+1, r1	; 0x01
    22e6:	10 82       	st	Z, r1
		TCNT1 = 0;
    22e8:	ec e4       	ldi	r30, 0x4C	; 76
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	11 82       	std	Z+1, r1	; 0x01
    22ee:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE2);
    22f0:	a9 e5       	ldi	r26, 0x59	; 89
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	e9 e5       	ldi	r30, 0x59	; 89
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	8f 7b       	andi	r24, 0xBF	; 191
    22fc:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE2);
    22fe:	a9 e5       	ldi	r26, 0x59	; 89
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	e9 e5       	ldi	r30, 0x59	; 89
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	8f 77       	andi	r24, 0x7F	; 127
    230a:	8c 93       	st	X, r24
    230c:	1a c0       	rjmp	.+52     	; 0x2342 <Timer_DeInit+0xb6>

	}
	/*disable timer2*/
	else if(timer_id == TIMER2_ID){
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	82 30       	cpi	r24, 0x02	; 2
    2312:	b9 f4       	brne	.+46     	; 0x2342 <Timer_DeInit+0xb6>
		TCCR2 = 0;
    2314:	e5 e4       	ldi	r30, 0x45	; 69
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	10 82       	st	Z, r1
		TCNT2 = 0;
    231a:	e4 e4       	ldi	r30, 0x44	; 68
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	10 82       	st	Z, r1
		OCR2 = 0;
    2320:	e3 e4       	ldi	r30, 0x43	; 67
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE2);
    2326:	a9 e5       	ldi	r26, 0x59	; 89
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	e9 e5       	ldi	r30, 0x59	; 89
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	8f 77       	andi	r24, 0x7F	; 127
    2332:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE2);
    2334:	a9 e5       	ldi	r26, 0x59	; 89
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e9 e5       	ldi	r30, 0x59	; 89
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	8f 7b       	andi	r24, 0xBF	; 191
    2340:	8c 93       	st	X, r24
	}
	else{
		/*do nothing*/
	}
}
    2342:	0f 90       	pop	r0
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <TWI_init>:

/*@description: this function to initialize I2C driver
 * param1: pointer to configuration structure
 * to select bit rate and prescaler and address and enable enable TWI
 * return: none*/
void TWI_init(const Twi_ConfigType *Config_Ptr){
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	00 d0       	rcall	.+0      	; 0x2350 <TWI_init+0x6>
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	9a 83       	std	Y+2, r25	; 0x02
    2356:	89 83       	std	Y+1, r24	; 0x01

	TWBR = Config_Ptr->bit_rate;
    2358:	a0 e2       	ldi	r26, 0x20	; 32
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e9 81       	ldd	r30, Y+1	; 0x01
    235e:	fa 81       	ldd	r31, Y+2	; 0x02
    2360:	80 81       	ld	r24, Z
    2362:	8c 93       	st	X, r24
	TWSR = 0x03&(Config_Ptr->prescaler);
    2364:	a1 e2       	ldi	r26, 0x21	; 33
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e9 81       	ldd	r30, Y+1	; 0x01
    236a:	fa 81       	ldd	r31, Y+2	; 0x02
    236c:	81 81       	ldd	r24, Z+1	; 0x01
    236e:	83 70       	andi	r24, 0x03	; 3
    2370:	8c 93       	st	X, r24
	TWAR = Config_Ptr->my_address;
    2372:	a2 e2       	ldi	r26, 0x22	; 34
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e9 81       	ldd	r30, Y+1	; 0x01
    2378:	fa 81       	ldd	r31, Y+2	; 0x02
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	8c 93       	st	X, r24
	TWCR = (1<<TWEN);
    237e:	e6 e5       	ldi	r30, 0x56	; 86
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	84 e0       	ldi	r24, 0x04	; 4
    2384:	80 83       	st	Z, r24
}
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <TWI_start>:


void TWI_start(void){
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    2398:	e6 e5       	ldi	r30, 0x56	; 86
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	84 ea       	ldi	r24, 0xA4	; 164
    239e:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    23a0:	e6 e5       	ldi	r30, 0x56	; 86
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	88 23       	and	r24, r24
    23a8:	dc f7       	brge	.-10     	; 0x23a0 <TWI_start+0x10>
}
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <TWI_stop>:

void TWI_stop(void){
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    23b8:	e6 e5       	ldi	r30, 0x56	; 86
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	84 e9       	ldi	r24, 0x94	; 148
    23be:	80 83       	st	Z, r24
}
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <TWI_writeByte>:

void TWI_writeByte(uint8 data){
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	0f 92       	push	r0
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;  /* Put data On TWI data Register */
    23d2:	e3 e2       	ldi	r30, 0x23	; 35
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<<TWINT) | (1<<TWEN);
    23da:	e6 e5       	ldi	r30, 0x56	; 86
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	84 e8       	ldi	r24, 0x84	; 132
    23e0:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    23e2:	e6 e5       	ldi	r30, 0x56	; 86
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	88 23       	and	r24, r24
    23ea:	dc f7       	brge	.-10     	; 0x23e2 <TWI_writeByte+0x1c>
}
    23ec:	0f 90       	pop	r0
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void){
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<<TWINT) |(1<<TWEN) |(1<<TWEA);
    23fc:	e6 e5       	ldi	r30, 0x56	; 86
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	84 ec       	ldi	r24, 0xC4	; 196
    2402:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2404:	e6 e5       	ldi	r30, 0x56	; 86
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	88 23       	and	r24, r24
    240c:	dc f7       	brge	.-10     	; 0x2404 <TWI_readByteWithACK+0x10>
	return TWDR;
    240e:	e3 e2       	ldi	r30, 0x23	; 35
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
}
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void){
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<<TWINT) |(1<<TWEN);
    2422:	e6 e5       	ldi	r30, 0x56	; 86
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	84 e8       	ldi	r24, 0x84	; 132
    2428:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    242a:	e6 e5       	ldi	r30, 0x56	; 86
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	88 23       	and	r24, r24
    2432:	dc f7       	brge	.-10     	; 0x242a <TWI_readByteWithNACK+0x10>
	return TWDR;
    2434:	e3 e2       	ldi	r30, 0x23	; 35
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
}
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <TWI_getStatus>:


uint8 TWI_getStatus(void){
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	0f 92       	push	r0
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	 /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    244a:	e1 e2       	ldi	r30, 0x21	; 33
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	88 7f       	andi	r24, 0xF8	; 248
    2452:	89 83       	std	Y+1, r24	; 0x01
	return status;
    2454:	89 81       	ldd	r24, Y+1	; 0x01
}
    2456:	0f 90       	pop	r0
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <UART_init>:
 * -set baud rate
 * param1: pointer to configuration structure
 * return: none
 * */

void UART_init(const Uart_ConfigType *Config_Ptr){
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	00 d0       	rcall	.+0      	; 0x2464 <UART_init+0x6>
    2464:	00 d0       	rcall	.+0      	; 0x2466 <UART_init+0x8>
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	9c 83       	std	Y+4, r25	; 0x04
    246c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    246e:	1a 82       	std	Y+2, r1	; 0x02
    2470:	19 82       	std	Y+1, r1	; 0x01
	UCSRA = (1<<U2X);/*double transmission speed*/
    2472:	eb e2       	ldi	r30, 0x2B	; 43
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	82 e0       	ldi	r24, 0x02	; 2
    2478:	80 83       	st	Z, r24
	/*enable transmitter and receiver */
	UCSRB = (1<<RXEN)|(1<<TXEN)|(0x04 & Config_Ptr->char_size);
    247a:	aa e2       	ldi	r26, 0x2A	; 42
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	eb 81       	ldd	r30, Y+3	; 0x03
    2480:	fc 81       	ldd	r31, Y+4	; 0x04
    2482:	80 81       	ld	r24, Z
    2484:	84 70       	andi	r24, 0x04	; 4
    2486:	88 61       	ori	r24, 0x18	; 24
    2488:	8c 93       	st	X, r24
	/*select type of parity, select how many stop bit,select size of data*/
	UCSRC = (1<<URSEL) |(0x30 & Config_Ptr->parity_mode)|(0x08&Config_Ptr->stop_bit_select)|(0x06&Config_Ptr->char_size);
    248a:	a0 e4       	ldi	r26, 0x40	; 64
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	eb 81       	ldd	r30, Y+3	; 0x03
    2490:	fc 81       	ldd	r31, Y+4	; 0x04
    2492:	81 81       	ldd	r24, Z+1	; 0x01
    2494:	80 73       	andi	r24, 0x30	; 48
    2496:	98 2f       	mov	r25, r24
    2498:	90 68       	ori	r25, 0x80	; 128
    249a:	eb 81       	ldd	r30, Y+3	; 0x03
    249c:	fc 81       	ldd	r31, Y+4	; 0x04
    249e:	82 81       	ldd	r24, Z+2	; 0x02
    24a0:	88 70       	andi	r24, 0x08	; 8
    24a2:	98 2b       	or	r25, r24
    24a4:	eb 81       	ldd	r30, Y+3	; 0x03
    24a6:	fc 81       	ldd	r31, Y+4	; 0x04
    24a8:	80 81       	ld	r24, Z
    24aa:	86 70       	andi	r24, 0x06	; 6
    24ac:	89 2b       	or	r24, r25
    24ae:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    24b0:	eb 81       	ldd	r30, Y+3	; 0x03
    24b2:	fc 81       	ldd	r31, Y+4	; 0x04
    24b4:	83 81       	ldd	r24, Z+3	; 0x03
    24b6:	94 81       	ldd	r25, Z+4	; 0x04
    24b8:	a5 81       	ldd	r26, Z+5	; 0x05
    24ba:	b6 81       	ldd	r27, Z+6	; 0x06
    24bc:	88 0f       	add	r24, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	aa 1f       	adc	r26, r26
    24c2:	bb 1f       	adc	r27, r27
    24c4:	88 0f       	add	r24, r24
    24c6:	99 1f       	adc	r25, r25
    24c8:	aa 1f       	adc	r26, r26
    24ca:	bb 1f       	adc	r27, r27
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	aa 1f       	adc	r26, r26
    24d2:	bb 1f       	adc	r27, r27
    24d4:	9c 01       	movw	r18, r24
    24d6:	ad 01       	movw	r20, r26
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	92 e1       	ldi	r25, 0x12	; 18
    24dc:	aa e7       	ldi	r26, 0x7A	; 122
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	0e 94 1d 13 	call	0x263a	; 0x263a <__udivmodsi4>
    24e8:	da 01       	movw	r26, r20
    24ea:	c9 01       	movw	r24, r18
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	9a 83       	std	Y+2, r25	; 0x02
    24f0:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    24f2:	e0 e4       	ldi	r30, 0x40	; 64
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	9a 81       	ldd	r25, Y+2	; 0x02
    24fa:	89 2f       	mov	r24, r25
    24fc:	99 27       	eor	r25, r25
    24fe:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2500:	e9 e2       	ldi	r30, 0x29	; 41
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	80 83       	st	Z, r24
}
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <UART_sendByte>:


/*@description: function to send byte to the other UART device
 * param1: data the byte to be sent
 * return: none*/
void UART_sendByte(const uint8 data){
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	0f 92       	push	r0
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
    2520:	89 83       	std	Y+1, r24	; 0x01
	/*UDRE flag is set when the Tx buffer (UDR) is empty and ready for
     transmitting a new byte so wait until this flag is set to one*/
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    2522:	eb e2       	ldi	r30, 0x2B	; 43
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	88 2f       	mov	r24, r24
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	80 72       	andi	r24, 0x20	; 32
    252e:	90 70       	andi	r25, 0x00	; 0
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	b9 f3       	breq	.-18     	; 0x2522 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now*/
	UDR = data;
    2534:	ec e2       	ldi	r30, 0x2C	; 44
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	80 83       	st	Z, r24
}
    253c:	0f 90       	pop	r0
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <UART_recieveByte>:

/*@description: function to receive byte from the other UART device
 * param1: none
 * return: received byte from the other UART device */
uint8 UART_recieveByte(void){
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    254c:	eb e2       	ldi	r30, 0x2B	; 43
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	88 23       	and	r24, r24
    2554:	dc f7       	brge	.-10     	; 0x254c <UART_recieveByte+0x8>

	/* Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data*/
	return UDR;
    2556:	ec e2       	ldi	r30, 0x2C	; 44
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
}
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <UART_sendString>:

/*@description: function to send string to the other UART device
 * param1: the string to be sent
 * return: none */
void UART_sendString(const uint8 *Str){
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	00 d0       	rcall	.+0      	; 0x2568 <UART_sendString+0x6>
    2568:	0f 92       	push	r0
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
    256e:	9b 83       	std	Y+3, r25	; 0x03
    2570:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2572:	19 82       	std	Y+1, r1	; 0x01
    2574:	0e c0       	rjmp	.+28     	; 0x2592 <UART_sendString+0x30>
	/*loop to send all the string except the null we send byte by byte*/
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	8a 81       	ldd	r24, Y+2	; 0x02
    257e:	9b 81       	ldd	r25, Y+3	; 0x03
    2580:	fc 01       	movw	r30, r24
    2582:	e2 0f       	add	r30, r18
    2584:	f3 1f       	adc	r31, r19
    2586:	80 81       	ld	r24, Z
    2588:	0e 94 8b 12 	call	0x2516	; 0x2516 <UART_sendByte>
		i++;
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	8f 5f       	subi	r24, 0xFF	; 255
    2590:	89 83       	std	Y+1, r24	; 0x01
 * param1: the string to be sent
 * return: none */
void UART_sendString(const uint8 *Str){
	uint8 i = 0;
	/*loop to send all the string except the null we send byte by byte*/
	while(Str[i] != '\0')
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	28 2f       	mov	r18, r24
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	8a 81       	ldd	r24, Y+2	; 0x02
    259a:	9b 81       	ldd	r25, Y+3	; 0x03
    259c:	fc 01       	movw	r30, r24
    259e:	e2 0f       	add	r30, r18
    25a0:	f3 1f       	adc	r31, r19
    25a2:	80 81       	ld	r24, Z
    25a4:	88 23       	and	r24, r24
    25a6:	39 f7       	brne	.-50     	; 0x2576 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <UART_receiveString>:


/*@description: function to receive string from the other UART device
 * param1: address of array of current to store the string inside it
 * return: none*/
void UART_receiveString(uint8 *Str){
    25b4:	0f 93       	push	r16
    25b6:	1f 93       	push	r17
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	00 d0       	rcall	.+0      	; 0x25be <UART_receiveString+0xa>
    25be:	0f 92       	push	r0
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	9b 83       	std	Y+3, r25	; 0x03
    25c6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25c8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	28 2f       	mov	r18, r24
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	9b 81       	ldd	r25, Y+3	; 0x03
    25d4:	8c 01       	movw	r16, r24
    25d6:	02 0f       	add	r16, r18
    25d8:	13 1f       	adc	r17, r19
    25da:	0e 94 a2 12 	call	0x2544	; 0x2544 <UART_recieveByte>
    25de:	f8 01       	movw	r30, r16
    25e0:	80 83       	st	Z, r24
    25e2:	0f c0       	rjmp	.+30     	; 0x2602 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	8f 5f       	subi	r24, 0xFF	; 255
    25e8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	8a 81       	ldd	r24, Y+2	; 0x02
    25f2:	9b 81       	ldd	r25, Y+3	; 0x03
    25f4:	8c 01       	movw	r16, r24
    25f6:	02 0f       	add	r16, r18
    25f8:	13 1f       	adc	r17, r19
    25fa:	0e 94 a2 12 	call	0x2544	; 0x2544 <UART_recieveByte>
    25fe:	f8 01       	movw	r30, r16
    2600:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	9b 81       	ldd	r25, Y+3	; 0x03
    260c:	fc 01       	movw	r30, r24
    260e:	e2 0f       	add	r30, r18
    2610:	f3 1f       	adc	r31, r19
    2612:	80 81       	ld	r24, Z
    2614:	83 32       	cpi	r24, 0x23	; 35
    2616:	31 f7       	brne	.-52     	; 0x25e4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	28 2f       	mov	r18, r24
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	9b 81       	ldd	r25, Y+3	; 0x03
    2622:	fc 01       	movw	r30, r24
    2624:	e2 0f       	add	r30, r18
    2626:	f3 1f       	adc	r31, r19
    2628:	10 82       	st	Z, r1
}
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	cf 91       	pop	r28
    2632:	df 91       	pop	r29
    2634:	1f 91       	pop	r17
    2636:	0f 91       	pop	r16
    2638:	08 95       	ret

0000263a <__udivmodsi4>:
    263a:	a1 e2       	ldi	r26, 0x21	; 33
    263c:	1a 2e       	mov	r1, r26
    263e:	aa 1b       	sub	r26, r26
    2640:	bb 1b       	sub	r27, r27
    2642:	fd 01       	movw	r30, r26
    2644:	0d c0       	rjmp	.+26     	; 0x2660 <__udivmodsi4_ep>

00002646 <__udivmodsi4_loop>:
    2646:	aa 1f       	adc	r26, r26
    2648:	bb 1f       	adc	r27, r27
    264a:	ee 1f       	adc	r30, r30
    264c:	ff 1f       	adc	r31, r31
    264e:	a2 17       	cp	r26, r18
    2650:	b3 07       	cpc	r27, r19
    2652:	e4 07       	cpc	r30, r20
    2654:	f5 07       	cpc	r31, r21
    2656:	20 f0       	brcs	.+8      	; 0x2660 <__udivmodsi4_ep>
    2658:	a2 1b       	sub	r26, r18
    265a:	b3 0b       	sbc	r27, r19
    265c:	e4 0b       	sbc	r30, r20
    265e:	f5 0b       	sbc	r31, r21

00002660 <__udivmodsi4_ep>:
    2660:	66 1f       	adc	r22, r22
    2662:	77 1f       	adc	r23, r23
    2664:	88 1f       	adc	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	1a 94       	dec	r1
    266a:	69 f7       	brne	.-38     	; 0x2646 <__udivmodsi4_loop>
    266c:	60 95       	com	r22
    266e:	70 95       	com	r23
    2670:	80 95       	com	r24
    2672:	90 95       	com	r25
    2674:	9b 01       	movw	r18, r22
    2676:	ac 01       	movw	r20, r24
    2678:	bd 01       	movw	r22, r26
    267a:	cf 01       	movw	r24, r30
    267c:	08 95       	ret

0000267e <__prologue_saves__>:
    267e:	2f 92       	push	r2
    2680:	3f 92       	push	r3
    2682:	4f 92       	push	r4
    2684:	5f 92       	push	r5
    2686:	6f 92       	push	r6
    2688:	7f 92       	push	r7
    268a:	8f 92       	push	r8
    268c:	9f 92       	push	r9
    268e:	af 92       	push	r10
    2690:	bf 92       	push	r11
    2692:	cf 92       	push	r12
    2694:	df 92       	push	r13
    2696:	ef 92       	push	r14
    2698:	ff 92       	push	r15
    269a:	0f 93       	push	r16
    269c:	1f 93       	push	r17
    269e:	cf 93       	push	r28
    26a0:	df 93       	push	r29
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	ca 1b       	sub	r28, r26
    26a8:	db 0b       	sbc	r29, r27
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	09 94       	ijmp

000026b6 <__epilogue_restores__>:
    26b6:	2a 88       	ldd	r2, Y+18	; 0x12
    26b8:	39 88       	ldd	r3, Y+17	; 0x11
    26ba:	48 88       	ldd	r4, Y+16	; 0x10
    26bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    26be:	6e 84       	ldd	r6, Y+14	; 0x0e
    26c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    26c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    26c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    26c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    26c8:	b9 84       	ldd	r11, Y+9	; 0x09
    26ca:	c8 84       	ldd	r12, Y+8	; 0x08
    26cc:	df 80       	ldd	r13, Y+7	; 0x07
    26ce:	ee 80       	ldd	r14, Y+6	; 0x06
    26d0:	fd 80       	ldd	r15, Y+5	; 0x05
    26d2:	0c 81       	ldd	r16, Y+4	; 0x04
    26d4:	1b 81       	ldd	r17, Y+3	; 0x03
    26d6:	aa 81       	ldd	r26, Y+2	; 0x02
    26d8:	b9 81       	ldd	r27, Y+1	; 0x01
    26da:	ce 0f       	add	r28, r30
    26dc:	d1 1d       	adc	r29, r1
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	ed 01       	movw	r28, r26
    26ea:	08 95       	ret

000026ec <_exit>:
    26ec:	f8 94       	cli

000026ee <__stop_program>:
    26ee:	ff cf       	rjmp	.-2      	; 0x26ee <__stop_program>


HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000359e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  00800060  0000359e  00003632  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800148  00800148  0000371a  2**0
                  ALLOC
  3 .stab         0000330c  00000000  00000000  0000371c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017db  00000000  00000000  00006a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008203  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008343  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000084b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000afe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bd94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c181  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c94f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__vector_3>
      10:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__vector_8>
      24:	0c 94 41 16 	jmp	0x2c82	; 0x2c82 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 34       	cpi	r26, 0x48	; 72
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e4       	ldi	r26, 0x48	; 72
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 35       	cpi	r26, 0x5B	; 91
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e3       	ldi	r26, 0x34	; 52
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 e3       	ldi	r24, 0x34	; 52
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "application1.h"
#include "uart.h"
#include "lcd.h"
#include "avr/io.h"  /*to use SREG register*/

int main(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a0 97       	sbiw	r28, 0x20	; 32
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	Timer_ConfigType timer_config_ptr = {TIMER0_ID,COMPARE,TIMER0_F_CPU_1024,0,252};   /*ovf init = 4*/
     b5a:	9e 01       	movw	r18, r28
     b5c:	2c 5f       	subi	r18, 0xFC	; 252
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	38 8f       	std	Y+24, r19	; 0x18
     b62:	2f 8b       	std	Y+23, r18	; 0x17
     b64:	83 e4       	ldi	r24, 0x43	; 67
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	9a 8f       	std	Y+26, r25	; 0x1a
     b6a:	89 8f       	std	Y+25, r24	; 0x19
     b6c:	95 e0       	ldi	r25, 0x05	; 5
     b6e:	9b 8f       	std	Y+27, r25	; 0x1b
     b70:	e9 8d       	ldd	r30, Y+25	; 0x19
     b72:	fa 8d       	ldd	r31, Y+26	; 0x1a
     b74:	00 80       	ld	r0, Z
     b76:	29 8d       	ldd	r18, Y+25	; 0x19
     b78:	3a 8d       	ldd	r19, Y+26	; 0x1a
     b7a:	2f 5f       	subi	r18, 0xFF	; 255
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	3a 8f       	std	Y+26, r19	; 0x1a
     b80:	29 8f       	std	Y+25, r18	; 0x19
     b82:	ef 89       	ldd	r30, Y+23	; 0x17
     b84:	f8 8d       	ldd	r31, Y+24	; 0x18
     b86:	00 82       	st	Z, r0
     b88:	2f 89       	ldd	r18, Y+23	; 0x17
     b8a:	38 8d       	ldd	r19, Y+24	; 0x18
     b8c:	2f 5f       	subi	r18, 0xFF	; 255
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	38 8f       	std	Y+24, r19	; 0x18
     b92:	2f 8b       	std	Y+23, r18	; 0x17
     b94:	3b 8d       	ldd	r19, Y+27	; 0x1b
     b96:	31 50       	subi	r19, 0x01	; 1
     b98:	3b 8f       	std	Y+27, r19	; 0x1b
     b9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b9c:	88 23       	and	r24, r24
     b9e:	41 f7       	brne	.-48     	; 0xb70 <main+0x2a>
	uint8 password[PASSWORD_SIZE];
	uint8 access_options;
	uint8 main_options;
	uint8 escape_loop = 0;
     ba0:	19 82       	std	Y+1, r1	; 0x01
	Uart_ConfigType uart_config_ptr ={CHAR_SIZE_8_BITS,NO_PARITY,STOP_1,9600};
     ba2:	fe 01       	movw	r30, r28
     ba4:	3e 96       	adiw	r30, 0x0e	; 14
     ba6:	fd 8f       	std	Y+29, r31	; 0x1d
     ba8:	ec 8f       	std	Y+28, r30	; 0x1c
     baa:	2c e3       	ldi	r18, 0x3C	; 60
     bac:	31 e0       	ldi	r19, 0x01	; 1
     bae:	3f 8f       	std	Y+31, r19	; 0x1f
     bb0:	2e 8f       	std	Y+30, r18	; 0x1e
     bb2:	37 e0       	ldi	r19, 0x07	; 7
     bb4:	38 a3       	std	Y+32, r19	; 0x20
     bb6:	ee 8d       	ldd	r30, Y+30	; 0x1e
     bb8:	ff 8d       	ldd	r31, Y+31	; 0x1f
     bba:	00 80       	ld	r0, Z
     bbc:	2e 8d       	ldd	r18, Y+30	; 0x1e
     bbe:	3f 8d       	ldd	r19, Y+31	; 0x1f
     bc0:	2f 5f       	subi	r18, 0xFF	; 255
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	3f 8f       	std	Y+31, r19	; 0x1f
     bc6:	2e 8f       	std	Y+30, r18	; 0x1e
     bc8:	ec 8d       	ldd	r30, Y+28	; 0x1c
     bca:	fd 8d       	ldd	r31, Y+29	; 0x1d
     bcc:	00 82       	st	Z, r0
     bce:	2c 8d       	ldd	r18, Y+28	; 0x1c
     bd0:	3d 8d       	ldd	r19, Y+29	; 0x1d
     bd2:	2f 5f       	subi	r18, 0xFF	; 255
     bd4:	3f 4f       	sbci	r19, 0xFF	; 255
     bd6:	3d 8f       	std	Y+29, r19	; 0x1d
     bd8:	2c 8f       	std	Y+28, r18	; 0x1c
     bda:	38 a1       	ldd	r19, Y+32	; 0x20
     bdc:	31 50       	subi	r19, 0x01	; 1
     bde:	38 a3       	std	Y+32, r19	; 0x20
     be0:	88 a1       	ldd	r24, Y+32	; 0x20
     be2:	88 23       	and	r24, r24
     be4:	41 f7       	brne	.-48     	; 0xbb6 <main+0x70>
	UART_init(&uart_config_ptr);
     be6:	ce 01       	movw	r24, r28
     be8:	0e 96       	adiw	r24, 0x0e	; 14
     bea:	0e 94 41 19 	call	0x3282	; 0x3282 <UART_init>
	LCD_init();
     bee:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_init>
	SREG = (1<<7);
     bf2:	ef e5       	ldi	r30, 0x5F	; 95
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 e8       	ldi	r24, 0x80	; 128
     bf8:	80 83       	st	Z, r24
	displayOnLCD(WELCOMING);
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	91 e0       	ldi	r25, 0x01	; 1
     bfe:	0e 94 48 09 	call	0x1290	; 0x1290 <displayOnLCD>


	if(isFirstTime() == NO_SAVED_PASSWORD_NOT_FOUND){ /*check if there is stored previous password*/
     c02:	0e 94 ce 06 	call	0xd9c	; 0xd9c <isFirstTime>
     c06:	8a 32       	cpi	r24, 0x2A	; 42
     c08:	09 f5       	brne	.+66     	; 0xc4c <main+0x106>
		while(1){ /*will not escape loop till user enterd two matched passwords*/
			displayOnLCD(ENTER_PASSWORD);
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	92 e0       	ldi	r25, 0x02	; 2
     c0e:	0e 94 48 09 	call	0x1290	; 0x1290 <displayOnLCD>
			getPassword(password);
     c12:	ce 01       	movw	r24, r28
     c14:	09 96       	adiw	r24, 0x09	; 9
     c16:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <getPassword>
			sendPassword(password);
     c1a:	ce 01       	movw	r24, r28
     c1c:	09 96       	adiw	r24, 0x09	; 9
     c1e:	0e 94 1a 08 	call	0x1034	; 0x1034 <sendPassword>
			displayOnLCD(CONFIRM_PASSWORD);
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	93 e0       	ldi	r25, 0x03	; 3
     c26:	0e 94 48 09 	call	0x1290	; 0x1290 <displayOnLCD>
			getPassword(password);
     c2a:	ce 01       	movw	r24, r28
     c2c:	09 96       	adiw	r24, 0x09	; 9
     c2e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <getPassword>
			sendPassword(password);
     c32:	ce 01       	movw	r24, r28
     c34:	09 96       	adiw	r24, 0x09	; 9
     c36:	0e 94 1a 08 	call	0x1034	; 0x1034 <sendPassword>
			if(isMatchedPassword() == MATCHED_PASSWORDS){
     c3a:	0e 94 f5 07 	call	0xfea	; 0xfea <isMatchedPassword>
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	29 f0       	breq	.+10     	; 0xc4c <main+0x106>
				break;
			}
			displayOnLCD(NOT_MATCHED_PASSWORD);
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	9b e0       	ldi	r25, 0x0B	; 11
     c46:	0e 94 48 09 	call	0x1290	; 0x1290 <displayOnLCD>
     c4a:	df cf       	rjmp	.-66     	; 0xc0a <main+0xc4>
		}
	}

	while(1){
		escape_loop =0;
     c4c:	19 82       	std	Y+1, r1	; 0x01
		main_options = displayMainOptions();
     c4e:	0e 94 b5 08 	call	0x116a	; 0x116a <displayMainOptions>
     c52:	8a 83       	std	Y+2, r24	; 0x02
		while(1){
			displayOnLCD(ENTER_PASSWORD);
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	92 e0       	ldi	r25, 0x02	; 2
     c58:	0e 94 48 09 	call	0x1290	; 0x1290 <displayOnLCD>
			getPassword(password);
     c5c:	ce 01       	movw	r24, r28
     c5e:	09 96       	adiw	r24, 0x09	; 9
     c60:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <getPassword>
			sendPassword(password);
     c64:	ce 01       	movw	r24, r28
     c66:	09 96       	adiw	r24, 0x09	; 9
     c68:	0e 94 1a 08 	call	0x1034	; 0x1034 <sendPassword>
			access_options =getAccessOptions();
     c6c:	0e 94 00 08 	call	0x1000	; 0x1000 <getAccessOptions>
     c70:	8b 83       	std	Y+3, r24	; 0x03

			if(access_options == YOU_ARE_BANNED){/*this condition happens if the other device restric access*/
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	8e 30       	cpi	r24, 0x0E	; 14
     c76:	59 f4       	brne	.+22     	; 0xc8e <main+0x148>
				displayOnLCD(ALERT);
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	95 e0       	ldi	r25, 0x05	; 5
     c7c:	0e 94 48 09 	call	0x1290	; 0x1290 <displayOnLCD>
				waitOneMinute(&timer_config_ptr);
     c80:	ce 01       	movw	r24, r28
     c82:	04 96       	adiw	r24, 0x04	; 4
     c84:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <waitOneMinute>
				escape_loop = 1;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	89 83       	std	Y+1, r24	; 0x01
     c8c:	62 c0       	rjmp	.+196    	; 0xd52 <main+0x20c>
			}
			else if(access_options == YOU_ARE_ALLOWED){
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	8c 30       	cpi	r24, 0x0C	; 12
     c92:	09 f0       	breq	.+2      	; 0xc96 <main+0x150>
     c94:	5e c0       	rjmp	.+188    	; 0xd52 <main+0x20c>
				sendMainOption(main_options);
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	0e 94 0b 08 	call	0x1016	; 0x1016 <sendMainOption>

				switch(main_options){ /*display on screen according to main option*/
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	e8 2f       	mov	r30, r24
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	fe 8b       	std	Y+22, r31	; 0x16
     ca4:	ed 8b       	std	Y+21, r30	; 0x15
     ca6:	2d 89       	ldd	r18, Y+21	; 0x15
     ca8:	3e 89       	ldd	r19, Y+22	; 0x16
     caa:	2b 32       	cpi	r18, 0x2B	; 43
     cac:	31 05       	cpc	r19, r1
     cae:	31 f0       	breq	.+12     	; 0xcbc <main+0x176>
     cb0:	8d 89       	ldd	r24, Y+21	; 0x15
     cb2:	9e 89       	ldd	r25, Y+22	; 0x16
     cb4:	8d 32       	cpi	r24, 0x2D	; 45
     cb6:	91 05       	cpc	r25, r1
     cb8:	21 f1       	breq	.+72     	; 0xd02 <main+0x1bc>
     cba:	4b c0       	rjmp	.+150    	; 0xd52 <main+0x20c>
				case OPEN_DOOR:

					displayOnLCD(DOOR_UNLOCKING);
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	96 e0       	ldi	r25, 0x06	; 6
     cc0:	0e 94 48 09 	call	0x1290	; 0x1290 <displayOnLCD>
					waitFifteenSeconds(&timer_config_ptr);
     cc4:	ce 01       	movw	r24, r28
     cc6:	04 96       	adiw	r24, 0x04	; 4
     cc8:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <waitFifteenSeconds>

					displayOnLCD(PROCESSING);
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	97 e0       	ldi	r25, 0x07	; 7
     cd0:	0e 94 48 09 	call	0x1290	; 0x1290 <displayOnLCD>
					waitThreeSeconds(&timer_config_ptr);
     cd4:	ce 01       	movw	r24, r28
     cd6:	04 96       	adiw	r24, 0x04	; 4
     cd8:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <waitThreeSeconds>

					displayOnLCD(DOOR_LOCKING);
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	98 e0       	ldi	r25, 0x08	; 8
     ce0:	0e 94 48 09 	call	0x1290	; 0x1290 <displayOnLCD>
					waitFifteenSeconds(&timer_config_ptr);
     ce4:	ce 01       	movw	r24, r28
     ce6:	04 96       	adiw	r24, 0x04	; 4
     ce8:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <waitFifteenSeconds>

					displayOnLCD(PROCESSING);
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	97 e0       	ldi	r25, 0x07	; 7
     cf0:	0e 94 48 09 	call	0x1290	; 0x1290 <displayOnLCD>
					waitThreeSeconds(&timer_config_ptr);
     cf4:	ce 01       	movw	r24, r28
     cf6:	04 96       	adiw	r24, 0x04	; 4
     cf8:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <waitThreeSeconds>

					escape_loop = 1;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	89 83       	std	Y+1, r24	; 0x01
     d00:	28 c0       	rjmp	.+80     	; 0xd52 <main+0x20c>
					break;
				case CHANGE_PASSWORD:
					while(1){
						/*get first pass*/
						displayOnLCD(ENTER_NEW_PASSWORD);
     d02:	8a ea       	ldi	r24, 0xAA	; 170
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 48 09 	call	0x1290	; 0x1290 <displayOnLCD>
						getPassword(password);
     d0a:	ce 01       	movw	r24, r28
     d0c:	09 96       	adiw	r24, 0x09	; 9
     d0e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <getPassword>
						sendPassword(password);
     d12:	ce 01       	movw	r24, r28
     d14:	09 96       	adiw	r24, 0x09	; 9
     d16:	0e 94 1a 08 	call	0x1034	; 0x1034 <sendPassword>
						/*confirm pass*/
						displayOnLCD(CONFIRM_NEW_PASSWORD);
     d1a:	8b ea       	ldi	r24, 0xAB	; 171
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 48 09 	call	0x1290	; 0x1290 <displayOnLCD>
						getPassword(password);
     d22:	ce 01       	movw	r24, r28
     d24:	09 96       	adiw	r24, 0x09	; 9
     d26:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <getPassword>
						sendPassword(password);
     d2a:	ce 01       	movw	r24, r28
     d2c:	09 96       	adiw	r24, 0x09	; 9
     d2e:	0e 94 1a 08 	call	0x1034	; 0x1034 <sendPassword>

						if(isMatchedPassword()== MATCHED_PASSWORDS){
     d32:	0e 94 f5 07 	call	0xfea	; 0xfea <isMatchedPassword>
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	39 f4       	brne	.+14     	; 0xd48 <main+0x202>
							displayOnLCD(SUCCESS_CHANGED);
     d3a:	8b eb       	ldi	r24, 0xBB	; 187
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	0e 94 48 09 	call	0x1290	; 0x1290 <displayOnLCD>
							escape_loop = 1;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	89 83       	std	Y+1, r24	; 0x01
     d46:	05 c0       	rjmp	.+10     	; 0xd52 <main+0x20c>
							break;
						}
						displayOnLCD(NOT_MATCHED_PASSWORD);
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	9b e0       	ldi	r25, 0x0B	; 11
     d4c:	0e 94 48 09 	call	0x1290	; 0x1290 <displayOnLCD>
     d50:	d8 cf       	rjmp	.-80     	; 0xd02 <main+0x1bc>

				}

			}

			if(escape_loop){
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	88 23       	and	r24, r24
     d56:	09 f0       	breq	.+2      	; 0xd5a <main+0x214>
     d58:	79 cf       	rjmp	.-270    	; 0xc4c <main+0x106>
				break;
			}
			displayOnLCD(WRONG_PASSWORD);/*if user entered wrong pass*/
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	94 e0       	ldi	r25, 0x04	; 4
     d5e:	0e 94 48 09 	call	0x1290	; 0x1290 <displayOnLCD>
     d62:	78 cf       	rjmp	.-272    	; 0xc54 <main+0x10e>

00000d64 <waitOtherAvailability>:
 * the two UART devices this function asks the other device if it is ready
 * when the other device is ready it sends he is
 * param1: none
 * return: none
 * */
void static waitOtherAvailability(void){
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(ARE_YOU_READY);
     d6c:	8a e0       	ldi	r24, 0x0A	; 10
     d6e:	0e 94 9d 19 	call	0x333a	; 0x333a <UART_sendByte>
	while(UART_recieveByte() != IS_READY);
     d72:	0e 94 b4 19 	call	0x3368	; 0x3368 <UART_recieveByte>
     d76:	8b 30       	cpi	r24, 0x0B	; 11
     d78:	e1 f7       	brne	.-8      	; 0xd72 <waitOtherAvailability+0xe>
}
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <answeringAvailability>:


/*@description: this function to sync communication between
 * the two UART devices this function responds to question of the other UART
 * device and doesn't respond till it is available*/
void static answeringAvailability(void){
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != ARE_YOU_READY);
     d88:	0e 94 b4 19 	call	0x3368	; 0x3368 <UART_recieveByte>
     d8c:	8a 30       	cpi	r24, 0x0A	; 10
     d8e:	e1 f7       	brne	.-8      	; 0xd88 <answeringAvailability+0x8>
	UART_sendByte(IS_READY);
     d90:	8b e0       	ldi	r24, 0x0B	; 11
     d92:	0e 94 9d 19 	call	0x333a	; 0x333a <UART_sendByte>
}
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <isFirstTime>:
/*@description: this function check if it is first time to set password
 * as our system have the ability to take user from user first time only to set it
 * but if it is not the first time the system will asks the user to enter stored password to do any operation
 * param1: none
 * return: respond from the other UART device if it is first time or not*/
uint8 isFirstTime(void){
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
	answeringAvailability();
     da4:	0e 94 c0 06 	call	0xd80	; 0xd80 <answeringAvailability>
	return UART_recieveByte();
     da8:	0e 94 b4 19 	call	0x3368	; 0x3368 <UART_recieveByte>
}
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	08 95       	ret

00000db2 <getPassword>:


/*@description: this function is responsible to take the password from the user
 * param1: pointer to the array of char to store the password inside it
 * return: none*/
void getPassword(uint8 *password){
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	a0 97       	sbiw	r28, 0x20	; 32
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	98 a3       	std	Y+32, r25	; 0x20
     dc8:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 i = 0; /*variable used for looping*/
     dca:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 key;
	waitOtherAvailability();
     dcc:	0e 94 b2 06 	call	0xd64	; 0xd64 <waitOtherAvailability>
     dd0:	89 c0       	rjmp	.+274    	; 0xee4 <getPassword+0x132>

	while(i<PASSWORD_SIZE){
		key = KEYPAD_getPressedKey();
     dd2:	0e 94 9a 10 	call	0x2134	; 0x2134 <KEYPAD_getPressedKey>
     dd6:	8d 8f       	std	Y+29, r24	; 0x1d
		/*only numbers password is allowed*/
		if(key>=0 && key<=9){
     dd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dda:	8a 30       	cpi	r24, 0x0A	; 10
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <getPassword+0x2e>
     dde:	82 c0       	rjmp	.+260    	; 0xee4 <getPassword+0x132>
			*(password+i) = key; /**/
     de0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     de8:	98 a1       	ldd	r25, Y+32	; 0x20
     dea:	fc 01       	movw	r30, r24
     dec:	e2 0f       	add	r30, r18
     dee:	f3 1f       	adc	r31, r19
     df0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     df2:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
     df4:	8a e2       	ldi	r24, 0x2A	; 42
     df6:	0e 94 a9 13 	call	0x2752	; 0x2752 <LCD_displayCharacter>
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	a1 ee       	ldi	r26, 0xE1	; 225
     e00:	b3 e4       	ldi	r27, 0x43	; 67
     e02:	89 8f       	std	Y+25, r24	; 0x19
     e04:	9a 8f       	std	Y+26, r25	; 0x1a
     e06:	ab 8f       	std	Y+27, r26	; 0x1b
     e08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e0a:	69 8d       	ldd	r22, Y+25	; 0x19
     e0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e10:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	4a ef       	ldi	r20, 0xFA	; 250
     e18:	54 e4       	ldi	r21, 0x44	; 68
     e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	8d 8b       	std	Y+21, r24	; 0x15
     e24:	9e 8b       	std	Y+22, r25	; 0x16
     e26:	af 8b       	std	Y+23, r26	; 0x17
     e28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e2a:	6d 89       	ldd	r22, Y+21	; 0x15
     e2c:	7e 89       	ldd	r23, Y+22	; 0x16
     e2e:	8f 89       	ldd	r24, Y+23	; 0x17
     e30:	98 8d       	ldd	r25, Y+24	; 0x18
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	40 e8       	ldi	r20, 0x80	; 128
     e38:	5f e3       	ldi	r21, 0x3F	; 63
     e3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e3e:	88 23       	and	r24, r24
     e40:	2c f4       	brge	.+10     	; 0xe4c <getPassword+0x9a>
		__ticks = 1;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	9c 8b       	std	Y+20, r25	; 0x14
     e48:	8b 8b       	std	Y+19, r24	; 0x13
     e4a:	3f c0       	rjmp	.+126    	; 0xeca <getPassword+0x118>
	else if (__tmp > 65535)
     e4c:	6d 89       	ldd	r22, Y+21	; 0x15
     e4e:	7e 89       	ldd	r23, Y+22	; 0x16
     e50:	8f 89       	ldd	r24, Y+23	; 0x17
     e52:	98 8d       	ldd	r25, Y+24	; 0x18
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	3f ef       	ldi	r19, 0xFF	; 255
     e58:	4f e7       	ldi	r20, 0x7F	; 127
     e5a:	57 e4       	ldi	r21, 0x47	; 71
     e5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e60:	18 16       	cp	r1, r24
     e62:	4c f5       	brge	.+82     	; 0xeb6 <getPassword+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e64:	69 8d       	ldd	r22, Y+25	; 0x19
     e66:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e68:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e2       	ldi	r20, 0x20	; 32
     e72:	51 e4       	ldi	r21, 0x41	; 65
     e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	9c 8b       	std	Y+20, r25	; 0x14
     e8a:	8b 8b       	std	Y+19, r24	; 0x13
     e8c:	0f c0       	rjmp	.+30     	; 0xeac <getPassword+0xfa>
     e8e:	88 ec       	ldi	r24, 0xC8	; 200
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9a 8b       	std	Y+18, r25	; 0x12
     e94:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e96:	89 89       	ldd	r24, Y+17	; 0x11
     e98:	9a 89       	ldd	r25, Y+18	; 0x12
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <getPassword+0xe8>
     e9e:	9a 8b       	std	Y+18, r25	; 0x12
     ea0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea2:	8b 89       	ldd	r24, Y+19	; 0x13
     ea4:	9c 89       	ldd	r25, Y+20	; 0x14
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	9c 8b       	std	Y+20, r25	; 0x14
     eaa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eac:	8b 89       	ldd	r24, Y+19	; 0x13
     eae:	9c 89       	ldd	r25, Y+20	; 0x14
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	69 f7       	brne	.-38     	; 0xe8e <getPassword+0xdc>
     eb4:	14 c0       	rjmp	.+40     	; 0xede <getPassword+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb6:	6d 89       	ldd	r22, Y+21	; 0x15
     eb8:	7e 89       	ldd	r23, Y+22	; 0x16
     eba:	8f 89       	ldd	r24, Y+23	; 0x17
     ebc:	98 8d       	ldd	r25, Y+24	; 0x18
     ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	9c 8b       	std	Y+20, r25	; 0x14
     ec8:	8b 8b       	std	Y+19, r24	; 0x13
     eca:	8b 89       	ldd	r24, Y+19	; 0x13
     ecc:	9c 89       	ldd	r25, Y+20	; 0x14
     ece:	98 8b       	std	Y+16, r25	; 0x10
     ed0:	8f 87       	std	Y+15, r24	; 0x0f
     ed2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed4:	98 89       	ldd	r25, Y+16	; 0x10
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <getPassword+0x124>
     eda:	98 8b       	std	Y+16, r25	; 0x10
     edc:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(450);
			i++;
     ede:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ee0:	8f 5f       	subi	r24, 0xFF	; 255
     ee2:	8e 8f       	std	Y+30, r24	; 0x1e
void getPassword(uint8 *password){
	uint8 i = 0; /*variable used for looping*/
	uint8 key;
	waitOtherAvailability();

	while(i<PASSWORD_SIZE){
     ee4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ee6:	85 30       	cpi	r24, 0x05	; 5
     ee8:	08 f4       	brcc	.+2      	; 0xeec <getPassword+0x13a>
     eea:	73 cf       	rjmp	.-282    	; 0xdd2 <getPassword+0x20>
			_delay_ms(450);
			i++;
		}
	}
	/*wait until the user select enter */
	while(KEYPAD_getPressedKey()!= ENTER);
     eec:	0e 94 9a 10 	call	0x2134	; 0x2134 <KEYPAD_getPressedKey>
     ef0:	8d 33       	cpi	r24, 0x3D	; 61
     ef2:	e1 f7       	brne	.-8      	; 0xeec <getPassword+0x13a>
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	a1 ee       	ldi	r26, 0xE1	; 225
     efa:	b3 e4       	ldi	r27, 0x43	; 67
     efc:	8b 87       	std	Y+11, r24	; 0x0b
     efe:	9c 87       	std	Y+12, r25	; 0x0c
     f00:	ad 87       	std	Y+13, r26	; 0x0d
     f02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f04:	6b 85       	ldd	r22, Y+11	; 0x0b
     f06:	7c 85       	ldd	r23, Y+12	; 0x0c
     f08:	8d 85       	ldd	r24, Y+13	; 0x0d
     f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	4a ef       	ldi	r20, 0xFA	; 250
     f12:	54 e4       	ldi	r21, 0x44	; 68
     f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	8f 83       	std	Y+7, r24	; 0x07
     f1e:	98 87       	std	Y+8, r25	; 0x08
     f20:	a9 87       	std	Y+9, r26	; 0x09
     f22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f24:	6f 81       	ldd	r22, Y+7	; 0x07
     f26:	78 85       	ldd	r23, Y+8	; 0x08
     f28:	89 85       	ldd	r24, Y+9	; 0x09
     f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e8       	ldi	r20, 0x80	; 128
     f32:	5f e3       	ldi	r21, 0x3F	; 63
     f34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f38:	88 23       	and	r24, r24
     f3a:	2c f4       	brge	.+10     	; 0xf46 <getPassword+0x194>
		__ticks = 1;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	9e 83       	std	Y+6, r25	; 0x06
     f42:	8d 83       	std	Y+5, r24	; 0x05
     f44:	3f c0       	rjmp	.+126    	; 0xfc4 <getPassword+0x212>
	else if (__tmp > 65535)
     f46:	6f 81       	ldd	r22, Y+7	; 0x07
     f48:	78 85       	ldd	r23, Y+8	; 0x08
     f4a:	89 85       	ldd	r24, Y+9	; 0x09
     f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	3f ef       	ldi	r19, 0xFF	; 255
     f52:	4f e7       	ldi	r20, 0x7F	; 127
     f54:	57 e4       	ldi	r21, 0x47	; 71
     f56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f5a:	18 16       	cp	r1, r24
     f5c:	4c f5       	brge	.+82     	; 0xfb0 <getPassword+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f60:	7c 85       	ldd	r23, Y+12	; 0x0c
     f62:	8d 85       	ldd	r24, Y+13	; 0x0d
     f64:	9e 85       	ldd	r25, Y+14	; 0x0e
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	40 e2       	ldi	r20, 0x20	; 32
     f6c:	51 e4       	ldi	r21, 0x41	; 65
     f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	bc 01       	movw	r22, r24
     f78:	cd 01       	movw	r24, r26
     f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	9e 83       	std	Y+6, r25	; 0x06
     f84:	8d 83       	std	Y+5, r24	; 0x05
     f86:	0f c0       	rjmp	.+30     	; 0xfa6 <getPassword+0x1f4>
     f88:	88 ec       	ldi	r24, 0xC8	; 200
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	9c 83       	std	Y+4, r25	; 0x04
     f8e:	8b 83       	std	Y+3, r24	; 0x03
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <getPassword+0x1e2>
     f98:	9c 83       	std	Y+4, r25	; 0x04
     f9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9c:	8d 81       	ldd	r24, Y+5	; 0x05
     f9e:	9e 81       	ldd	r25, Y+6	; 0x06
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	9e 83       	std	Y+6, r25	; 0x06
     fa4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa6:	8d 81       	ldd	r24, Y+5	; 0x05
     fa8:	9e 81       	ldd	r25, Y+6	; 0x06
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	69 f7       	brne	.-38     	; 0xf88 <getPassword+0x1d6>
     fae:	14 c0       	rjmp	.+40     	; 0xfd8 <getPassword+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb0:	6f 81       	ldd	r22, Y+7	; 0x07
     fb2:	78 85       	ldd	r23, Y+8	; 0x08
     fb4:	89 85       	ldd	r24, Y+9	; 0x09
     fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	9e 83       	std	Y+6, r25	; 0x06
     fc2:	8d 83       	std	Y+5, r24	; 0x05
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	9e 81       	ldd	r25, Y+6	; 0x06
     fc8:	9a 83       	std	Y+2, r25	; 0x02
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	9a 81       	ldd	r25, Y+2	; 0x02
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <getPassword+0x21e>
     fd4:	9a 83       	std	Y+2, r25	; 0x02
     fd6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(450);
}
     fd8:	a0 96       	adiw	r28, 0x20	; 32
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <isMatchedPassword>:

/*@description:this function ask the other UART if the entered passwords are matched
 * param1: none
 * return: if matched or not*/
uint8 isMatchedPassword(void){
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
	answeringAvailability();
     ff2:	0e 94 c0 06 	call	0xd80	; 0xd80 <answeringAvailability>
	return UART_recieveByte();
     ff6:	0e 94 b4 19 	call	0x3368	; 0x3368 <UART_recieveByte>
}
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <getAccessOptions>:

/*@description:this function ask the other device to give access or not
 * param1: none
 * return: access or not*/
uint8 getAccessOptions(void){
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
	answeringAvailability();
    1008:	0e 94 c0 06 	call	0xd80	; 0xd80 <answeringAvailability>
	return UART_recieveByte();
    100c:	0e 94 b4 19 	call	0x3368	; 0x3368 <UART_recieveByte>
}
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <sendMainOption>:

/*@description: this function send to the other UART device what option does the
 * user need
 * param1: the main option we want to excute
 * return: none*/
void sendMainOption(uint8 main_option){
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	0f 92       	push	r0
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	89 83       	std	Y+1, r24	; 0x01
	waitOtherAvailability();
    1022:	0e 94 b2 06 	call	0xd64	; 0xd64 <waitOtherAvailability>
	UART_sendByte(main_option);
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	0e 94 9d 19 	call	0x333a	; 0x333a <UART_sendByte>
}
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <sendPassword>:

/*@description: this function send password entered by user to the other UART device
 * param1: pointer to the password array
 * return: none*/
void sendPassword(const uint8 *password){
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	61 97       	sbiw	r28, 0x11	; 17
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	99 8b       	std	Y+17, r25	; 0x11
    104a:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	/*looping and send byte byte*/
	for(i = 0;i<PASSWORD_SIZE;i++){
    104c:	1f 86       	std	Y+15, r1	; 0x0f
    104e:	80 c0       	rjmp	.+256    	; 0x1150 <sendPassword+0x11c>
		UART_sendByte(*(password+i));
    1050:	8f 85       	ldd	r24, Y+15	; 0x0f
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	88 89       	ldd	r24, Y+16	; 0x10
    1058:	99 89       	ldd	r25, Y+17	; 0x11
    105a:	fc 01       	movw	r30, r24
    105c:	e2 0f       	add	r30, r18
    105e:	f3 1f       	adc	r31, r19
    1060:	80 81       	ld	r24, Z
    1062:	0e 94 9d 19 	call	0x333a	; 0x333a <UART_sendByte>
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	a8 e4       	ldi	r26, 0x48	; 72
    106c:	b2 e4       	ldi	r27, 0x42	; 66
    106e:	8b 87       	std	Y+11, r24	; 0x0b
    1070:	9c 87       	std	Y+12, r25	; 0x0c
    1072:	ad 87       	std	Y+13, r26	; 0x0d
    1074:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1076:	6b 85       	ldd	r22, Y+11	; 0x0b
    1078:	7c 85       	ldd	r23, Y+12	; 0x0c
    107a:	8d 85       	ldd	r24, Y+13	; 0x0d
    107c:	9e 85       	ldd	r25, Y+14	; 0x0e
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	4a ef       	ldi	r20, 0xFA	; 250
    1084:	54 e4       	ldi	r21, 0x44	; 68
    1086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	8f 83       	std	Y+7, r24	; 0x07
    1090:	98 87       	std	Y+8, r25	; 0x08
    1092:	a9 87       	std	Y+9, r26	; 0x09
    1094:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1096:	6f 81       	ldd	r22, Y+7	; 0x07
    1098:	78 85       	ldd	r23, Y+8	; 0x08
    109a:	89 85       	ldd	r24, Y+9	; 0x09
    109c:	9a 85       	ldd	r25, Y+10	; 0x0a
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	40 e8       	ldi	r20, 0x80	; 128
    10a4:	5f e3       	ldi	r21, 0x3F	; 63
    10a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10aa:	88 23       	and	r24, r24
    10ac:	2c f4       	brge	.+10     	; 0x10b8 <sendPassword+0x84>
		__ticks = 1;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	9e 83       	std	Y+6, r25	; 0x06
    10b4:	8d 83       	std	Y+5, r24	; 0x05
    10b6:	3f c0       	rjmp	.+126    	; 0x1136 <sendPassword+0x102>
	else if (__tmp > 65535)
    10b8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ba:	78 85       	ldd	r23, Y+8	; 0x08
    10bc:	89 85       	ldd	r24, Y+9	; 0x09
    10be:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	3f ef       	ldi	r19, 0xFF	; 255
    10c4:	4f e7       	ldi	r20, 0x7F	; 127
    10c6:	57 e4       	ldi	r21, 0x47	; 71
    10c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10cc:	18 16       	cp	r1, r24
    10ce:	4c f5       	brge	.+82     	; 0x1122 <sendPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	40 e2       	ldi	r20, 0x20	; 32
    10de:	51 e4       	ldi	r21, 0x41	; 65
    10e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	bc 01       	movw	r22, r24
    10ea:	cd 01       	movw	r24, r26
    10ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	9e 83       	std	Y+6, r25	; 0x06
    10f6:	8d 83       	std	Y+5, r24	; 0x05
    10f8:	0f c0       	rjmp	.+30     	; 0x1118 <sendPassword+0xe4>
    10fa:	88 ec       	ldi	r24, 0xC8	; 200
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	9c 83       	std	Y+4, r25	; 0x04
    1100:	8b 83       	std	Y+3, r24	; 0x03
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	9c 81       	ldd	r25, Y+4	; 0x04
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <sendPassword+0xd2>
    110a:	9c 83       	std	Y+4, r25	; 0x04
    110c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	9e 83       	std	Y+6, r25	; 0x06
    1116:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1118:	8d 81       	ldd	r24, Y+5	; 0x05
    111a:	9e 81       	ldd	r25, Y+6	; 0x06
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	69 f7       	brne	.-38     	; 0x10fa <sendPassword+0xc6>
    1120:	14 c0       	rjmp	.+40     	; 0x114a <sendPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1122:	6f 81       	ldd	r22, Y+7	; 0x07
    1124:	78 85       	ldd	r23, Y+8	; 0x08
    1126:	89 85       	ldd	r24, Y+9	; 0x09
    1128:	9a 85       	ldd	r25, Y+10	; 0x0a
    112a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	9e 83       	std	Y+6, r25	; 0x06
    1134:	8d 83       	std	Y+5, r24	; 0x05
    1136:	8d 81       	ldd	r24, Y+5	; 0x05
    1138:	9e 81       	ldd	r25, Y+6	; 0x06
    113a:	9a 83       	std	Y+2, r25	; 0x02
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <sendPassword+0x10e>
    1146:	9a 83       	std	Y+2, r25	; 0x02
    1148:	89 83       	std	Y+1, r24	; 0x01
 * param1: pointer to the password array
 * return: none*/
void sendPassword(const uint8 *password){
	uint8 i;
	/*looping and send byte byte*/
	for(i = 0;i<PASSWORD_SIZE;i++){
    114a:	8f 85       	ldd	r24, Y+15	; 0x0f
    114c:	8f 5f       	subi	r24, 0xFF	; 255
    114e:	8f 87       	std	Y+15, r24	; 0x0f
    1150:	8f 85       	ldd	r24, Y+15	; 0x0f
    1152:	85 30       	cpi	r24, 0x05	; 5
    1154:	08 f4       	brcc	.+2      	; 0x1158 <sendPassword+0x124>
    1156:	7c cf       	rjmp	.-264    	; 0x1050 <sendPassword+0x1c>
		UART_sendByte(*(password+i));
		_delay_ms(50);
	}
}
    1158:	61 96       	adiw	r28, 0x11	; 17
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <displayMainOptions>:

/*@description: this function is responsible to display on the screen the main options
 * and wait the user to select the option
 * param1: none
 * return: the chosen option  */
uint8 displayMainOptions(void){
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	2f 97       	sbiw	r28, 0x0f	; 15
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
	uint8 main_option;
	displayOnLCD(MAIN_OPTIONS);
    117e:	8c ea       	ldi	r24, 0xAC	; 172
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	0e 94 48 09 	call	0x1290	; 0x1290 <displayOnLCD>
	do{
		main_option = KEYPAD_getPressedKey();
    1186:	0e 94 9a 10 	call	0x2134	; 0x2134 <KEYPAD_getPressedKey>
    118a:	8f 87       	std	Y+15, r24	; 0x0f
	}while(!((main_option == OPEN_DOOR) || (main_option== CHANGE_PASSWORD)));/*take only the two options as input*/
    118c:	8f 85       	ldd	r24, Y+15	; 0x0f
    118e:	8b 32       	cpi	r24, 0x2B	; 43
    1190:	19 f0       	breq	.+6      	; 0x1198 <displayMainOptions+0x2e>
    1192:	8f 85       	ldd	r24, Y+15	; 0x0f
    1194:	8d 32       	cpi	r24, 0x2D	; 45
    1196:	b9 f7       	brne	.-18     	; 0x1186 <displayMainOptions+0x1c>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a1 ee       	ldi	r26, 0xE1	; 225
    119e:	b3 e4       	ldi	r27, 0x43	; 67
    11a0:	8b 87       	std	Y+11, r24	; 0x0b
    11a2:	9c 87       	std	Y+12, r25	; 0x0c
    11a4:	ad 87       	std	Y+13, r26	; 0x0d
    11a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	4a ef       	ldi	r20, 0xFA	; 250
    11b6:	54 e4       	ldi	r21, 0x44	; 68
    11b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	8f 83       	std	Y+7, r24	; 0x07
    11c2:	98 87       	std	Y+8, r25	; 0x08
    11c4:	a9 87       	std	Y+9, r26	; 0x09
    11c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11c8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ca:	78 85       	ldd	r23, Y+8	; 0x08
    11cc:	89 85       	ldd	r24, Y+9	; 0x09
    11ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e8       	ldi	r20, 0x80	; 128
    11d6:	5f e3       	ldi	r21, 0x3F	; 63
    11d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11dc:	88 23       	and	r24, r24
    11de:	2c f4       	brge	.+10     	; 0x11ea <displayMainOptions+0x80>
		__ticks = 1;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	9e 83       	std	Y+6, r25	; 0x06
    11e6:	8d 83       	std	Y+5, r24	; 0x05
    11e8:	3f c0       	rjmp	.+126    	; 0x1268 <displayMainOptions+0xfe>
	else if (__tmp > 65535)
    11ea:	6f 81       	ldd	r22, Y+7	; 0x07
    11ec:	78 85       	ldd	r23, Y+8	; 0x08
    11ee:	89 85       	ldd	r24, Y+9	; 0x09
    11f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	3f ef       	ldi	r19, 0xFF	; 255
    11f6:	4f e7       	ldi	r20, 0x7F	; 127
    11f8:	57 e4       	ldi	r21, 0x47	; 71
    11fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11fe:	18 16       	cp	r1, r24
    1200:	4c f5       	brge	.+82     	; 0x1254 <displayMainOptions+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1202:	6b 85       	ldd	r22, Y+11	; 0x0b
    1204:	7c 85       	ldd	r23, Y+12	; 0x0c
    1206:	8d 85       	ldd	r24, Y+13	; 0x0d
    1208:	9e 85       	ldd	r25, Y+14	; 0x0e
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	40 e2       	ldi	r20, 0x20	; 32
    1210:	51 e4       	ldi	r21, 0x41	; 65
    1212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	bc 01       	movw	r22, r24
    121c:	cd 01       	movw	r24, r26
    121e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	9e 83       	std	Y+6, r25	; 0x06
    1228:	8d 83       	std	Y+5, r24	; 0x05
    122a:	0f c0       	rjmp	.+30     	; 0x124a <displayMainOptions+0xe0>
    122c:	88 ec       	ldi	r24, 0xC8	; 200
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	9c 83       	std	Y+4, r25	; 0x04
    1232:	8b 83       	std	Y+3, r24	; 0x03
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <displayMainOptions+0xce>
    123c:	9c 83       	std	Y+4, r25	; 0x04
    123e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1240:	8d 81       	ldd	r24, Y+5	; 0x05
    1242:	9e 81       	ldd	r25, Y+6	; 0x06
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	9e 83       	std	Y+6, r25	; 0x06
    1248:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	9e 81       	ldd	r25, Y+6	; 0x06
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	69 f7       	brne	.-38     	; 0x122c <displayMainOptions+0xc2>
    1252:	14 c0       	rjmp	.+40     	; 0x127c <displayMainOptions+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1254:	6f 81       	ldd	r22, Y+7	; 0x07
    1256:	78 85       	ldd	r23, Y+8	; 0x08
    1258:	89 85       	ldd	r24, Y+9	; 0x09
    125a:	9a 85       	ldd	r25, Y+10	; 0x0a
    125c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	9e 83       	std	Y+6, r25	; 0x06
    1266:	8d 83       	std	Y+5, r24	; 0x05
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	9e 81       	ldd	r25, Y+6	; 0x06
    126c:	9a 83       	std	Y+2, r25	; 0x02
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	9a 81       	ldd	r25, Y+2	; 0x02
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <displayMainOptions+0x10a>
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(450);
	return main_option;
    127c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    127e:	2f 96       	adiw	r28, 0x0f	; 15
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <displayOnLCD>:

/*@description: this function calling LCD displaying methods
 * param1: the message to be printed
 * return: none
 * */
void displayOnLCD(uint16 message){
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	ec 97       	sbiw	r28, 0x3c	; 60
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	9a af       	std	Y+58, r25	; 0x3a
    12a6:	89 af       	std	Y+57, r24	; 0x39
	LCD_clearScreen();
    12a8:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <LCD_clearScreen>
	switch (message) {
    12ac:	89 ad       	ldd	r24, Y+57	; 0x39
    12ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    12b0:	9c af       	std	Y+60, r25	; 0x3c
    12b2:	8b af       	std	Y+59, r24	; 0x3b
    12b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    12b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    12b8:	23 e0       	ldi	r18, 0x03	; 3
    12ba:	80 30       	cpi	r24, 0x00	; 0
    12bc:	92 07       	cpc	r25, r18
    12be:	09 f4       	brne	.+2      	; 0x12c2 <displayOnLCD+0x32>
    12c0:	eb c0       	rjmp	.+470    	; 0x1498 <displayOnLCD+0x208>
    12c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    12c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    12c6:	23 e0       	ldi	r18, 0x03	; 3
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	92 07       	cpc	r25, r18
    12cc:	80 f5       	brcc	.+96     	; 0x132e <displayOnLCD+0x9e>
    12ce:	8b ad       	ldd	r24, Y+59	; 0x3b
    12d0:	9c ad       	ldd	r25, Y+60	; 0x3c
    12d2:	21 e0       	ldi	r18, 0x01	; 1
    12d4:	80 30       	cpi	r24, 0x00	; 0
    12d6:	92 07       	cpc	r25, r18
    12d8:	09 f4       	brne	.+2      	; 0x12dc <displayOnLCD+0x4c>
    12da:	5b c0       	rjmp	.+182    	; 0x1392 <displayOnLCD+0x102>
    12dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    12de:	9c ad       	ldd	r25, Y+60	; 0x3c
    12e0:	21 e0       	ldi	r18, 0x01	; 1
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	92 07       	cpc	r25, r18
    12e6:	68 f4       	brcc	.+26     	; 0x1302 <displayOnLCD+0x72>
    12e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    12ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    12ec:	8a 3a       	cpi	r24, 0xAA	; 170
    12ee:	91 05       	cpc	r25, r1
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <displayOnLCD+0x64>
    12f2:	f5 c1       	rjmp	.+1002   	; 0x16de <displayOnLCD+0x44e>
    12f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    12f6:	9c ad       	ldd	r25, Y+60	; 0x3c
    12f8:	8b 3a       	cpi	r24, 0xAB	; 171
    12fa:	91 05       	cpc	r25, r1
    12fc:	09 f4       	brne	.+2      	; 0x1300 <displayOnLCD+0x70>
    12fe:	fb c1       	rjmp	.+1014   	; 0x16f6 <displayOnLCD+0x466>
    1300:	86 c2       	rjmp	.+1292   	; 0x180e <displayOnLCD+0x57e>
    1302:	8b ad       	ldd	r24, Y+59	; 0x3b
    1304:	9c ad       	ldd	r25, Y+60	; 0x3c
    1306:	21 e0       	ldi	r18, 0x01	; 1
    1308:	8b 3b       	cpi	r24, 0xBB	; 187
    130a:	92 07       	cpc	r25, r18
    130c:	09 f4       	brne	.+2      	; 0x1310 <displayOnLCD+0x80>
    130e:	ff c1       	rjmp	.+1022   	; 0x170e <displayOnLCD+0x47e>
    1310:	8b ad       	ldd	r24, Y+59	; 0x3b
    1312:	9c ad       	ldd	r25, Y+60	; 0x3c
    1314:	22 e0       	ldi	r18, 0x02	; 2
    1316:	80 30       	cpi	r24, 0x00	; 0
    1318:	92 07       	cpc	r25, r18
    131a:	09 f4       	brne	.+2      	; 0x131e <displayOnLCD+0x8e>
    131c:	b1 c0       	rjmp	.+354    	; 0x1480 <displayOnLCD+0x1f0>
    131e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1320:	9c ad       	ldd	r25, Y+60	; 0x3c
    1322:	21 e0       	ldi	r18, 0x01	; 1
    1324:	8c 3a       	cpi	r24, 0xAC	; 172
    1326:	92 07       	cpc	r25, r18
    1328:	09 f4       	brne	.+2      	; 0x132c <displayOnLCD+0x9c>
    132a:	b6 c1       	rjmp	.+876    	; 0x1698 <displayOnLCD+0x408>
    132c:	70 c2       	rjmp	.+1248   	; 0x180e <displayOnLCD+0x57e>
    132e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1330:	9c ad       	ldd	r25, Y+60	; 0x3c
    1332:	26 e0       	ldi	r18, 0x06	; 6
    1334:	80 30       	cpi	r24, 0x00	; 0
    1336:	92 07       	cpc	r25, r18
    1338:	09 f4       	brne	.+2      	; 0x133c <displayOnLCD+0xac>
    133a:	c2 c1       	rjmp	.+900    	; 0x16c0 <displayOnLCD+0x430>
    133c:	8b ad       	ldd	r24, Y+59	; 0x3b
    133e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1340:	26 e0       	ldi	r18, 0x06	; 6
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	92 07       	cpc	r25, r18
    1346:	78 f4       	brcc	.+30     	; 0x1366 <displayOnLCD+0xd6>
    1348:	8b ad       	ldd	r24, Y+59	; 0x3b
    134a:	9c ad       	ldd	r25, Y+60	; 0x3c
    134c:	24 e0       	ldi	r18, 0x04	; 4
    134e:	80 30       	cpi	r24, 0x00	; 0
    1350:	92 07       	cpc	r25, r18
    1352:	09 f4       	brne	.+2      	; 0x1356 <displayOnLCD+0xc6>
    1354:	27 c1       	rjmp	.+590    	; 0x15a4 <displayOnLCD+0x314>
    1356:	8b ad       	ldd	r24, Y+59	; 0x3b
    1358:	9c ad       	ldd	r25, Y+60	; 0x3c
    135a:	25 e0       	ldi	r18, 0x05	; 5
    135c:	80 30       	cpi	r24, 0x00	; 0
    135e:	92 07       	cpc	r25, r18
    1360:	09 f4       	brne	.+2      	; 0x1364 <displayOnLCD+0xd4>
    1362:	a9 c1       	rjmp	.+850    	; 0x16b6 <displayOnLCD+0x426>
    1364:	54 c2       	rjmp	.+1192   	; 0x180e <displayOnLCD+0x57e>
    1366:	8b ad       	ldd	r24, Y+59	; 0x3b
    1368:	9c ad       	ldd	r25, Y+60	; 0x3c
    136a:	28 e0       	ldi	r18, 0x08	; 8
    136c:	80 30       	cpi	r24, 0x00	; 0
    136e:	92 07       	cpc	r25, r18
    1370:	09 f4       	brne	.+2      	; 0x1374 <displayOnLCD+0xe4>
    1372:	b0 c1       	rjmp	.+864    	; 0x16d4 <displayOnLCD+0x444>
    1374:	8b ad       	ldd	r24, Y+59	; 0x3b
    1376:	9c ad       	ldd	r25, Y+60	; 0x3c
    1378:	2b e0       	ldi	r18, 0x0B	; 11
    137a:	80 30       	cpi	r24, 0x00	; 0
    137c:	92 07       	cpc	r25, r18
    137e:	09 f4       	brne	.+2      	; 0x1382 <displayOnLCD+0xf2>
    1380:	97 c0       	rjmp	.+302    	; 0x14b0 <displayOnLCD+0x220>
    1382:	8b ad       	ldd	r24, Y+59	; 0x3b
    1384:	9c ad       	ldd	r25, Y+60	; 0x3c
    1386:	27 e0       	ldi	r18, 0x07	; 7
    1388:	80 30       	cpi	r24, 0x00	; 0
    138a:	92 07       	cpc	r25, r18
    138c:	09 f4       	brne	.+2      	; 0x1390 <displayOnLCD+0x100>
    138e:	9d c1       	rjmp	.+826    	; 0x16ca <displayOnLCD+0x43a>
    1390:	3e c2       	rjmp	.+1148   	; 0x180e <displayOnLCD+0x57e>

		case WELCOMING:
			LCD_displayString("    Welcome!   ");
    1392:	80 e6       	ldi	r24, 0x60	; 96
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_displayString>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	af e2       	ldi	r26, 0x2F	; 47
    13a0:	b4 e4       	ldi	r27, 0x44	; 68
    13a2:	8d ab       	std	Y+53, r24	; 0x35
    13a4:	9e ab       	std	Y+54, r25	; 0x36
    13a6:	af ab       	std	Y+55, r26	; 0x37
    13a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13aa:	6d a9       	ldd	r22, Y+53	; 0x35
    13ac:	7e a9       	ldd	r23, Y+54	; 0x36
    13ae:	8f a9       	ldd	r24, Y+55	; 0x37
    13b0:	98 ad       	ldd	r25, Y+56	; 0x38
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	4a ef       	ldi	r20, 0xFA	; 250
    13b8:	54 e4       	ldi	r21, 0x44	; 68
    13ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	89 ab       	std	Y+49, r24	; 0x31
    13c4:	9a ab       	std	Y+50, r25	; 0x32
    13c6:	ab ab       	std	Y+51, r26	; 0x33
    13c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13ca:	69 a9       	ldd	r22, Y+49	; 0x31
    13cc:	7a a9       	ldd	r23, Y+50	; 0x32
    13ce:	8b a9       	ldd	r24, Y+51	; 0x33
    13d0:	9c a9       	ldd	r25, Y+52	; 0x34
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e8       	ldi	r20, 0x80	; 128
    13d8:	5f e3       	ldi	r21, 0x3F	; 63
    13da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13de:	88 23       	and	r24, r24
    13e0:	2c f4       	brge	.+10     	; 0x13ec <displayOnLCD+0x15c>
		__ticks = 1;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	98 ab       	std	Y+48, r25	; 0x30
    13e8:	8f a7       	std	Y+47, r24	; 0x2f
    13ea:	3f c0       	rjmp	.+126    	; 0x146a <displayOnLCD+0x1da>
	else if (__tmp > 65535)
    13ec:	69 a9       	ldd	r22, Y+49	; 0x31
    13ee:	7a a9       	ldd	r23, Y+50	; 0x32
    13f0:	8b a9       	ldd	r24, Y+51	; 0x33
    13f2:	9c a9       	ldd	r25, Y+52	; 0x34
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	3f ef       	ldi	r19, 0xFF	; 255
    13f8:	4f e7       	ldi	r20, 0x7F	; 127
    13fa:	57 e4       	ldi	r21, 0x47	; 71
    13fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1400:	18 16       	cp	r1, r24
    1402:	4c f5       	brge	.+82     	; 0x1456 <displayOnLCD+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1404:	6d a9       	ldd	r22, Y+53	; 0x35
    1406:	7e a9       	ldd	r23, Y+54	; 0x36
    1408:	8f a9       	ldd	r24, Y+55	; 0x37
    140a:	98 ad       	ldd	r25, Y+56	; 0x38
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e2       	ldi	r20, 0x20	; 32
    1412:	51 e4       	ldi	r21, 0x41	; 65
    1414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	bc 01       	movw	r22, r24
    141e:	cd 01       	movw	r24, r26
    1420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	98 ab       	std	Y+48, r25	; 0x30
    142a:	8f a7       	std	Y+47, r24	; 0x2f
    142c:	0f c0       	rjmp	.+30     	; 0x144c <displayOnLCD+0x1bc>
    142e:	88 ec       	ldi	r24, 0xC8	; 200
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	9e a7       	std	Y+46, r25	; 0x2e
    1434:	8d a7       	std	Y+45, r24	; 0x2d
    1436:	8d a5       	ldd	r24, Y+45	; 0x2d
    1438:	9e a5       	ldd	r25, Y+46	; 0x2e
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <displayOnLCD+0x1aa>
    143e:	9e a7       	std	Y+46, r25	; 0x2e
    1440:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1442:	8f a5       	ldd	r24, Y+47	; 0x2f
    1444:	98 a9       	ldd	r25, Y+48	; 0x30
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	98 ab       	std	Y+48, r25	; 0x30
    144a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144c:	8f a5       	ldd	r24, Y+47	; 0x2f
    144e:	98 a9       	ldd	r25, Y+48	; 0x30
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	69 f7       	brne	.-38     	; 0x142e <displayOnLCD+0x19e>
    1454:	dc c1       	rjmp	.+952    	; 0x180e <displayOnLCD+0x57e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1456:	69 a9       	ldd	r22, Y+49	; 0x31
    1458:	7a a9       	ldd	r23, Y+50	; 0x32
    145a:	8b a9       	ldd	r24, Y+51	; 0x33
    145c:	9c a9       	ldd	r25, Y+52	; 0x34
    145e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	98 ab       	std	Y+48, r25	; 0x30
    1468:	8f a7       	std	Y+47, r24	; 0x2f
    146a:	8f a5       	ldd	r24, Y+47	; 0x2f
    146c:	98 a9       	ldd	r25, Y+48	; 0x30
    146e:	9c a7       	std	Y+44, r25	; 0x2c
    1470:	8b a7       	std	Y+43, r24	; 0x2b
    1472:	8b a5       	ldd	r24, Y+43	; 0x2b
    1474:	9c a5       	ldd	r25, Y+44	; 0x2c
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <displayOnLCD+0x1e6>
    147a:	9c a7       	std	Y+44, r25	; 0x2c
    147c:	8b a7       	std	Y+43, r24	; 0x2b
    147e:	c7 c1       	rjmp	.+910    	; 0x180e <displayOnLCD+0x57e>
			_delay_ms(700);
			break;

		case ENTER_PASSWORD:
			LCD_displayStringRowColumn(0, 0, "Enter Pass");
    1480:	20 e7       	ldi	r18, 0x70	; 112
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	a9 01       	movw	r20, r18
    148a:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0);
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_moveCursor>
    1496:	bb c1       	rjmp	.+886    	; 0x180e <displayOnLCD+0x57e>
			break;

		case CONFIRM_PASSWORD:
			LCD_displayStringRowColumn(0, 0, "ReEnter Pass");
    1498:	2b e7       	ldi	r18, 0x7B	; 123
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	a9 01       	movw	r20, r18
    14a2:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0);
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_moveCursor>
    14ae:	af c1       	rjmp	.+862    	; 0x180e <displayOnLCD+0x57e>
			break;

		case NOT_MATCHED_PASSWORD:
			LCD_displayStringRowColumn(0, 0, "Mismatched Pass!");
    14b0:	28 e8       	ldi	r18, 0x88	; 136
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	a9 01       	movw	r20, r18
    14ba:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_displayStringRowColumn>
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e8       	ldi	r25, 0x80	; 128
    14c2:	a2 ea       	ldi	r26, 0xA2	; 162
    14c4:	b4 e4       	ldi	r27, 0x44	; 68
    14c6:	8f a3       	std	Y+39, r24	; 0x27
    14c8:	98 a7       	std	Y+40, r25	; 0x28
    14ca:	a9 a7       	std	Y+41, r26	; 0x29
    14cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ce:	6f a1       	ldd	r22, Y+39	; 0x27
    14d0:	78 a5       	ldd	r23, Y+40	; 0x28
    14d2:	89 a5       	ldd	r24, Y+41	; 0x29
    14d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	4a ef       	ldi	r20, 0xFA	; 250
    14dc:	54 e4       	ldi	r21, 0x44	; 68
    14de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	8b a3       	std	Y+35, r24	; 0x23
    14e8:	9c a3       	std	Y+36, r25	; 0x24
    14ea:	ad a3       	std	Y+37, r26	; 0x25
    14ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14ee:	6b a1       	ldd	r22, Y+35	; 0x23
    14f0:	7c a1       	ldd	r23, Y+36	; 0x24
    14f2:	8d a1       	ldd	r24, Y+37	; 0x25
    14f4:	9e a1       	ldd	r25, Y+38	; 0x26
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 e8       	ldi	r20, 0x80	; 128
    14fc:	5f e3       	ldi	r21, 0x3F	; 63
    14fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1502:	88 23       	and	r24, r24
    1504:	2c f4       	brge	.+10     	; 0x1510 <displayOnLCD+0x280>
		__ticks = 1;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	9a a3       	std	Y+34, r25	; 0x22
    150c:	89 a3       	std	Y+33, r24	; 0x21
    150e:	3f c0       	rjmp	.+126    	; 0x158e <displayOnLCD+0x2fe>
	else if (__tmp > 65535)
    1510:	6b a1       	ldd	r22, Y+35	; 0x23
    1512:	7c a1       	ldd	r23, Y+36	; 0x24
    1514:	8d a1       	ldd	r24, Y+37	; 0x25
    1516:	9e a1       	ldd	r25, Y+38	; 0x26
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	3f ef       	ldi	r19, 0xFF	; 255
    151c:	4f e7       	ldi	r20, 0x7F	; 127
    151e:	57 e4       	ldi	r21, 0x47	; 71
    1520:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1524:	18 16       	cp	r1, r24
    1526:	4c f5       	brge	.+82     	; 0x157a <displayOnLCD+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1528:	6f a1       	ldd	r22, Y+39	; 0x27
    152a:	78 a5       	ldd	r23, Y+40	; 0x28
    152c:	89 a5       	ldd	r24, Y+41	; 0x29
    152e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e2       	ldi	r20, 0x20	; 32
    1536:	51 e4       	ldi	r21, 0x41	; 65
    1538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	bc 01       	movw	r22, r24
    1542:	cd 01       	movw	r24, r26
    1544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	9a a3       	std	Y+34, r25	; 0x22
    154e:	89 a3       	std	Y+33, r24	; 0x21
    1550:	0f c0       	rjmp	.+30     	; 0x1570 <displayOnLCD+0x2e0>
    1552:	88 ec       	ldi	r24, 0xC8	; 200
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	98 a3       	std	Y+32, r25	; 0x20
    1558:	8f 8f       	std	Y+31, r24	; 0x1f
    155a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    155c:	98 a1       	ldd	r25, Y+32	; 0x20
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	f1 f7       	brne	.-4      	; 0x155e <displayOnLCD+0x2ce>
    1562:	98 a3       	std	Y+32, r25	; 0x20
    1564:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1566:	89 a1       	ldd	r24, Y+33	; 0x21
    1568:	9a a1       	ldd	r25, Y+34	; 0x22
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	9a a3       	std	Y+34, r25	; 0x22
    156e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1570:	89 a1       	ldd	r24, Y+33	; 0x21
    1572:	9a a1       	ldd	r25, Y+34	; 0x22
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	69 f7       	brne	.-38     	; 0x1552 <displayOnLCD+0x2c2>
    1578:	4a c1       	rjmp	.+660    	; 0x180e <displayOnLCD+0x57e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157a:	6b a1       	ldd	r22, Y+35	; 0x23
    157c:	7c a1       	ldd	r23, Y+36	; 0x24
    157e:	8d a1       	ldd	r24, Y+37	; 0x25
    1580:	9e a1       	ldd	r25, Y+38	; 0x26
    1582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	9a a3       	std	Y+34, r25	; 0x22
    158c:	89 a3       	std	Y+33, r24	; 0x21
    158e:	89 a1       	ldd	r24, Y+33	; 0x21
    1590:	9a a1       	ldd	r25, Y+34	; 0x22
    1592:	9e 8f       	std	Y+30, r25	; 0x1e
    1594:	8d 8f       	std	Y+29, r24	; 0x1d
    1596:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1598:	9e 8d       	ldd	r25, Y+30	; 0x1e
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	f1 f7       	brne	.-4      	; 0x159a <displayOnLCD+0x30a>
    159e:	9e 8f       	std	Y+30, r25	; 0x1e
    15a0:	8d 8f       	std	Y+29, r24	; 0x1d
    15a2:	35 c1       	rjmp	.+618    	; 0x180e <displayOnLCD+0x57e>
			_delay_ms(1300);
			break;

		case WRONG_PASSWORD:
			LCD_displayStringRowColumn(0, 0, "Wrong Pass!!!");
    15a4:	29 e9       	ldi	r18, 0x99	; 153
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	a9 01       	movw	r20, r18
    15ae:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_displayStringRowColumn>
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	a1 e6       	ldi	r26, 0x61	; 97
    15b8:	b4 e4       	ldi	r27, 0x44	; 68
    15ba:	89 8f       	std	Y+25, r24	; 0x19
    15bc:	9a 8f       	std	Y+26, r25	; 0x1a
    15be:	ab 8f       	std	Y+27, r26	; 0x1b
    15c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c2:	69 8d       	ldd	r22, Y+25	; 0x19
    15c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	4a ef       	ldi	r20, 0xFA	; 250
    15d0:	54 e4       	ldi	r21, 0x44	; 68
    15d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	8d 8b       	std	Y+21, r24	; 0x15
    15dc:	9e 8b       	std	Y+22, r25	; 0x16
    15de:	af 8b       	std	Y+23, r26	; 0x17
    15e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15e2:	6d 89       	ldd	r22, Y+21	; 0x15
    15e4:	7e 89       	ldd	r23, Y+22	; 0x16
    15e6:	8f 89       	ldd	r24, Y+23	; 0x17
    15e8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e8       	ldi	r20, 0x80	; 128
    15f0:	5f e3       	ldi	r21, 0x3F	; 63
    15f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15f6:	88 23       	and	r24, r24
    15f8:	2c f4       	brge	.+10     	; 0x1604 <displayOnLCD+0x374>
		__ticks = 1;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	9c 8b       	std	Y+20, r25	; 0x14
    1600:	8b 8b       	std	Y+19, r24	; 0x13
    1602:	3f c0       	rjmp	.+126    	; 0x1682 <displayOnLCD+0x3f2>
	else if (__tmp > 65535)
    1604:	6d 89       	ldd	r22, Y+21	; 0x15
    1606:	7e 89       	ldd	r23, Y+22	; 0x16
    1608:	8f 89       	ldd	r24, Y+23	; 0x17
    160a:	98 8d       	ldd	r25, Y+24	; 0x18
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	3f ef       	ldi	r19, 0xFF	; 255
    1610:	4f e7       	ldi	r20, 0x7F	; 127
    1612:	57 e4       	ldi	r21, 0x47	; 71
    1614:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1618:	18 16       	cp	r1, r24
    161a:	4c f5       	brge	.+82     	; 0x166e <displayOnLCD+0x3de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161c:	69 8d       	ldd	r22, Y+25	; 0x19
    161e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1620:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1622:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	40 e2       	ldi	r20, 0x20	; 32
    162a:	51 e4       	ldi	r21, 0x41	; 65
    162c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	9c 8b       	std	Y+20, r25	; 0x14
    1642:	8b 8b       	std	Y+19, r24	; 0x13
    1644:	0f c0       	rjmp	.+30     	; 0x1664 <displayOnLCD+0x3d4>
    1646:	88 ec       	ldi	r24, 0xC8	; 200
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	9a 8b       	std	Y+18, r25	; 0x12
    164c:	89 8b       	std	Y+17, r24	; 0x11
    164e:	89 89       	ldd	r24, Y+17	; 0x11
    1650:	9a 89       	ldd	r25, Y+18	; 0x12
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <displayOnLCD+0x3c2>
    1656:	9a 8b       	std	Y+18, r25	; 0x12
    1658:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165a:	8b 89       	ldd	r24, Y+19	; 0x13
    165c:	9c 89       	ldd	r25, Y+20	; 0x14
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	9c 8b       	std	Y+20, r25	; 0x14
    1662:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1664:	8b 89       	ldd	r24, Y+19	; 0x13
    1666:	9c 89       	ldd	r25, Y+20	; 0x14
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	69 f7       	brne	.-38     	; 0x1646 <displayOnLCD+0x3b6>
    166c:	d0 c0       	rjmp	.+416    	; 0x180e <displayOnLCD+0x57e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166e:	6d 89       	ldd	r22, Y+21	; 0x15
    1670:	7e 89       	ldd	r23, Y+22	; 0x16
    1672:	8f 89       	ldd	r24, Y+23	; 0x17
    1674:	98 8d       	ldd	r25, Y+24	; 0x18
    1676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	9c 8b       	std	Y+20, r25	; 0x14
    1680:	8b 8b       	std	Y+19, r24	; 0x13
    1682:	8b 89       	ldd	r24, Y+19	; 0x13
    1684:	9c 89       	ldd	r25, Y+20	; 0x14
    1686:	98 8b       	std	Y+16, r25	; 0x10
    1688:	8f 87       	std	Y+15, r24	; 0x0f
    168a:	8f 85       	ldd	r24, Y+15	; 0x0f
    168c:	98 89       	ldd	r25, Y+16	; 0x10
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <displayOnLCD+0x3fe>
    1692:	98 8b       	std	Y+16, r25	; 0x10
    1694:	8f 87       	std	Y+15, r24	; 0x0f
    1696:	bb c0       	rjmp	.+374    	; 0x180e <displayOnLCD+0x57e>
			_delay_ms(900);
			break;
		case MAIN_OPTIONS:
			LCD_displayStringRowColumn(0, 0, "+ Open Door");
    1698:	27 ea       	ldi	r18, 0xA7	; 167
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	a9 01       	movw	r20, r18
    16a2:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "- Change Pass");
    16a6:	23 eb       	ldi	r18, 0xB3	; 179
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	a9 01       	movw	r20, r18
    16b0:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_displayStringRowColumn>
    16b4:	ac c0       	rjmp	.+344    	; 0x180e <displayOnLCD+0x57e>
			break;
		case ALERT:
			LCD_displayString("Alert!!!!!!");
    16b6:	81 ec       	ldi	r24, 0xC1	; 193
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_displayString>
    16be:	a7 c0       	rjmp	.+334    	; 0x180e <displayOnLCD+0x57e>
			break;
		case DOOR_UNLOCKING:
			LCD_displayString("Door unlocking");
    16c0:	8d ec       	ldi	r24, 0xCD	; 205
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_displayString>
    16c8:	a2 c0       	rjmp	.+324    	; 0x180e <displayOnLCD+0x57e>
			break;
		case PROCESSING:
			LCD_displayString("Please hold");
    16ca:	8c ed       	ldi	r24, 0xDC	; 220
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_displayString>
    16d2:	9d c0       	rjmp	.+314    	; 0x180e <displayOnLCD+0x57e>
			break;
		case DOOR_LOCKING:

			LCD_displayString("Door locking");
    16d4:	88 ee       	ldi	r24, 0xE8	; 232
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_displayString>
    16dc:	98 c0       	rjmp	.+304    	; 0x180e <displayOnLCD+0x57e>
			break;
		case ENTER_NEW_PASSWORD:
			LCD_displayStringRowColumn(0, 0, "Enter new Pass");
    16de:	25 ef       	ldi	r18, 0xF5	; 245
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	a9 01       	movw	r20, r18
    16e8:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0);
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_moveCursor>
    16f4:	8c c0       	rjmp	.+280    	; 0x180e <displayOnLCD+0x57e>
			break;
		case CONFIRM_NEW_PASSWORD:
			LCD_displayStringRowColumn(0, 0, "Confirm new Pass");
    16f6:	24 e0       	ldi	r18, 0x04	; 4
    16f8:	31 e0       	ldi	r19, 0x01	; 1
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	a9 01       	movw	r20, r18
    1700:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0);
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_moveCursor>
    170c:	80 c0       	rjmp	.+256    	; 0x180e <displayOnLCD+0x57e>
			break;
		case SUCCESS_CHANGED:
			LCD_displayStringRowColumn(0, 0, "  Pass changed");
    170e:	25 e1       	ldi	r18, 0x15	; 21
    1710:	31 e0       	ldi	r19, 0x01	; 1
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	a9 01       	movw	r20, r18
    1718:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, " Successfully!!");
    171c:	24 e2       	ldi	r18, 0x24	; 36
    171e:	31 e0       	ldi	r19, 0x01	; 1
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	a9 01       	movw	r20, r18
    1726:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_displayStringRowColumn>
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	a1 e6       	ldi	r26, 0x61	; 97
    1730:	b4 e4       	ldi	r27, 0x44	; 68
    1732:	8b 87       	std	Y+11, r24	; 0x0b
    1734:	9c 87       	std	Y+12, r25	; 0x0c
    1736:	ad 87       	std	Y+13, r26	; 0x0d
    1738:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173a:	6b 85       	ldd	r22, Y+11	; 0x0b
    173c:	7c 85       	ldd	r23, Y+12	; 0x0c
    173e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1740:	9e 85       	ldd	r25, Y+14	; 0x0e
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	4a ef       	ldi	r20, 0xFA	; 250
    1748:	54 e4       	ldi	r21, 0x44	; 68
    174a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	8f 83       	std	Y+7, r24	; 0x07
    1754:	98 87       	std	Y+8, r25	; 0x08
    1756:	a9 87       	std	Y+9, r26	; 0x09
    1758:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    175a:	6f 81       	ldd	r22, Y+7	; 0x07
    175c:	78 85       	ldd	r23, Y+8	; 0x08
    175e:	89 85       	ldd	r24, Y+9	; 0x09
    1760:	9a 85       	ldd	r25, Y+10	; 0x0a
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e8       	ldi	r20, 0x80	; 128
    1768:	5f e3       	ldi	r21, 0x3F	; 63
    176a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    176e:	88 23       	and	r24, r24
    1770:	2c f4       	brge	.+10     	; 0x177c <displayOnLCD+0x4ec>
		__ticks = 1;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	9e 83       	std	Y+6, r25	; 0x06
    1778:	8d 83       	std	Y+5, r24	; 0x05
    177a:	3f c0       	rjmp	.+126    	; 0x17fa <displayOnLCD+0x56a>
	else if (__tmp > 65535)
    177c:	6f 81       	ldd	r22, Y+7	; 0x07
    177e:	78 85       	ldd	r23, Y+8	; 0x08
    1780:	89 85       	ldd	r24, Y+9	; 0x09
    1782:	9a 85       	ldd	r25, Y+10	; 0x0a
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	3f ef       	ldi	r19, 0xFF	; 255
    1788:	4f e7       	ldi	r20, 0x7F	; 127
    178a:	57 e4       	ldi	r21, 0x47	; 71
    178c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1790:	18 16       	cp	r1, r24
    1792:	4c f5       	brge	.+82     	; 0x17e6 <displayOnLCD+0x556>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1794:	6b 85       	ldd	r22, Y+11	; 0x0b
    1796:	7c 85       	ldd	r23, Y+12	; 0x0c
    1798:	8d 85       	ldd	r24, Y+13	; 0x0d
    179a:	9e 85       	ldd	r25, Y+14	; 0x0e
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e2       	ldi	r20, 0x20	; 32
    17a2:	51 e4       	ldi	r21, 0x41	; 65
    17a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	bc 01       	movw	r22, r24
    17ae:	cd 01       	movw	r24, r26
    17b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	9e 83       	std	Y+6, r25	; 0x06
    17ba:	8d 83       	std	Y+5, r24	; 0x05
    17bc:	0f c0       	rjmp	.+30     	; 0x17dc <displayOnLCD+0x54c>
    17be:	88 ec       	ldi	r24, 0xC8	; 200
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	9c 83       	std	Y+4, r25	; 0x04
    17c4:	8b 83       	std	Y+3, r24	; 0x03
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <displayOnLCD+0x53a>
    17ce:	9c 83       	std	Y+4, r25	; 0x04
    17d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d2:	8d 81       	ldd	r24, Y+5	; 0x05
    17d4:	9e 81       	ldd	r25, Y+6	; 0x06
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	9e 83       	std	Y+6, r25	; 0x06
    17da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	9e 81       	ldd	r25, Y+6	; 0x06
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	69 f7       	brne	.-38     	; 0x17be <displayOnLCD+0x52e>
    17e4:	14 c0       	rjmp	.+40     	; 0x180e <displayOnLCD+0x57e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e6:	6f 81       	ldd	r22, Y+7	; 0x07
    17e8:	78 85       	ldd	r23, Y+8	; 0x08
    17ea:	89 85       	ldd	r24, Y+9	; 0x09
    17ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	9e 83       	std	Y+6, r25	; 0x06
    17f8:	8d 83       	std	Y+5, r24	; 0x05
    17fa:	8d 81       	ldd	r24, Y+5	; 0x05
    17fc:	9e 81       	ldd	r25, Y+6	; 0x06
    17fe:	9a 83       	std	Y+2, r25	; 0x02
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <displayOnLCD+0x576>
    180a:	9a 83       	std	Y+2, r25	; 0x02
    180c:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
	}

}
    180e:	ec 96       	adiw	r28, 0x3c	; 60
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <threeSecondsDelayTimer>:
/*@description: this is the call back function called by timer driver
 * and this function count 3 seconds
 * param1: none
 * return: none*/

void threeSecondsDelayTimer(void){
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    1828:	80 91 4c 01 	lds	r24, 0x014C
    182c:	90 91 4d 01 	lds	r25, 0x014D
    1830:	a0 91 4e 01 	lds	r26, 0x014E
    1834:	b0 91 4f 01 	lds	r27, 0x014F
    1838:	01 96       	adiw	r24, 0x01	; 1
    183a:	a1 1d       	adc	r26, r1
    183c:	b1 1d       	adc	r27, r1
    183e:	80 93 4c 01 	sts	0x014C, r24
    1842:	90 93 4d 01 	sts	0x014D, r25
    1846:	a0 93 4e 01 	sts	0x014E, r26
    184a:	b0 93 4f 01 	sts	0x014F, r27
	if(ticks==93){    /*31 = second*/
    184e:	80 91 4c 01 	lds	r24, 0x014C
    1852:	90 91 4d 01 	lds	r25, 0x014D
    1856:	a0 91 4e 01 	lds	r26, 0x014E
    185a:	b0 91 4f 01 	lds	r27, 0x014F
    185e:	8d 35       	cpi	r24, 0x5D	; 93
    1860:	91 05       	cpc	r25, r1
    1862:	a1 05       	cpc	r26, r1
    1864:	b1 05       	cpc	r27, r1
    1866:	a1 f4       	brne	.+40     	; 0x1890 <threeSecondsDelayTimer+0x70>
		sec =3;
    1868:	83 e0       	ldi	r24, 0x03	; 3
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a0 e0       	ldi	r26, 0x00	; 0
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	80 93 48 01 	sts	0x0148, r24
    1874:	90 93 49 01 	sts	0x0149, r25
    1878:	a0 93 4a 01 	sts	0x014A, r26
    187c:	b0 93 4b 01 	sts	0x014B, r27
		ticks = 0;
    1880:	10 92 4c 01 	sts	0x014C, r1
    1884:	10 92 4d 01 	sts	0x014D, r1
    1888:	10 92 4e 01 	sts	0x014E, r1
    188c:	10 92 4f 01 	sts	0x014F, r1
	}
}
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <fifteenSecondsDelayTimer>:

/*@description: this is the call back function called by timer driver
 * and this function count 15 seconds
 * param1: none
 * return: none*/
void fifteenSecondsDelayTimer(void){
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    189e:	80 91 4c 01 	lds	r24, 0x014C
    18a2:	90 91 4d 01 	lds	r25, 0x014D
    18a6:	a0 91 4e 01 	lds	r26, 0x014E
    18aa:	b0 91 4f 01 	lds	r27, 0x014F
    18ae:	01 96       	adiw	r24, 0x01	; 1
    18b0:	a1 1d       	adc	r26, r1
    18b2:	b1 1d       	adc	r27, r1
    18b4:	80 93 4c 01 	sts	0x014C, r24
    18b8:	90 93 4d 01 	sts	0x014D, r25
    18bc:	a0 93 4e 01 	sts	0x014E, r26
    18c0:	b0 93 4f 01 	sts	0x014F, r27
	if(ticks == 465){
    18c4:	80 91 4c 01 	lds	r24, 0x014C
    18c8:	90 91 4d 01 	lds	r25, 0x014D
    18cc:	a0 91 4e 01 	lds	r26, 0x014E
    18d0:	b0 91 4f 01 	lds	r27, 0x014F
    18d4:	81 3d       	cpi	r24, 0xD1	; 209
    18d6:	21 e0       	ldi	r18, 0x01	; 1
    18d8:	92 07       	cpc	r25, r18
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	a2 07       	cpc	r26, r18
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	b2 07       	cpc	r27, r18
    18e2:	a1 f4       	brne	.+40     	; 0x190c <fifteenSecondsDelayTimer+0x76>
		sec =15;
    18e4:	8f e0       	ldi	r24, 0x0F	; 15
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a0 e0       	ldi	r26, 0x00	; 0
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	80 93 48 01 	sts	0x0148, r24
    18f0:	90 93 49 01 	sts	0x0149, r25
    18f4:	a0 93 4a 01 	sts	0x014A, r26
    18f8:	b0 93 4b 01 	sts	0x014B, r27
		ticks = 0;
    18fc:	10 92 4c 01 	sts	0x014C, r1
    1900:	10 92 4d 01 	sts	0x014D, r1
    1904:	10 92 4e 01 	sts	0x014E, r1
    1908:	10 92 4f 01 	sts	0x014F, r1
	}
}
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <oneMinuteDelayTimer>:

/*@description: this is the call back function called by timer driver
 * and this function count one minute
 * param1: none
 * return: none*/
void oneMinuteDelayTimer(void){
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
	static uint8 count = 0;
	ticks++;
    191a:	80 91 4c 01 	lds	r24, 0x014C
    191e:	90 91 4d 01 	lds	r25, 0x014D
    1922:	a0 91 4e 01 	lds	r26, 0x014E
    1926:	b0 91 4f 01 	lds	r27, 0x014F
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	a1 1d       	adc	r26, r1
    192e:	b1 1d       	adc	r27, r1
    1930:	80 93 4c 01 	sts	0x014C, r24
    1934:	90 93 4d 01 	sts	0x014D, r25
    1938:	a0 93 4e 01 	sts	0x014E, r26
    193c:	b0 93 4f 01 	sts	0x014F, r27
	if(ticks == 465){
    1940:	80 91 4c 01 	lds	r24, 0x014C
    1944:	90 91 4d 01 	lds	r25, 0x014D
    1948:	a0 91 4e 01 	lds	r26, 0x014E
    194c:	b0 91 4f 01 	lds	r27, 0x014F
    1950:	81 3d       	cpi	r24, 0xD1	; 209
    1952:	21 e0       	ldi	r18, 0x01	; 1
    1954:	92 07       	cpc	r25, r18
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	a2 07       	cpc	r26, r18
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	b2 07       	cpc	r27, r18
    195e:	f9 f4       	brne	.+62     	; 0x199e <oneMinuteDelayTimer+0x8c>
		count++;
    1960:	80 91 50 01 	lds	r24, 0x0150
    1964:	8f 5f       	subi	r24, 0xFF	; 255
    1966:	80 93 50 01 	sts	0x0150, r24
		ticks = 0;
    196a:	10 92 4c 01 	sts	0x014C, r1
    196e:	10 92 4d 01 	sts	0x014D, r1
    1972:	10 92 4e 01 	sts	0x014E, r1
    1976:	10 92 4f 01 	sts	0x014F, r1
		if(count == 4){
    197a:	80 91 50 01 	lds	r24, 0x0150
    197e:	84 30       	cpi	r24, 0x04	; 4
    1980:	71 f4       	brne	.+28     	; 0x199e <oneMinuteDelayTimer+0x8c>
			sec = 60;
    1982:	8c e3       	ldi	r24, 0x3C	; 60
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a0 e0       	ldi	r26, 0x00	; 0
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	80 93 48 01 	sts	0x0148, r24
    198e:	90 93 49 01 	sts	0x0149, r25
    1992:	a0 93 4a 01 	sts	0x014A, r26
    1996:	b0 93 4b 01 	sts	0x014B, r27
			count = 0;
    199a:	10 92 50 01 	sts	0x0150, r1

		}
	}
}
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <waitFifteenSeconds>:

/*@description: this function is to make delay for 15 seconds
 * param1: pointer to configuration structure to get timer id
 * return: none*/
void waitFifteenSeconds(const Timer_ConfigType * Config_Ptr){
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <waitFifteenSeconds+0x6>
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	9a 83       	std	Y+2, r25	; 0x02
    19b0:	89 83       	std	Y+1, r24	; 0x01
	Timer0_setCallBack(fifteenSecondsDelayTimer);
    19b2:	8b e4       	ldi	r24, 0x4B	; 75
    19b4:	9c e0       	ldi	r25, 0x0C	; 12
    19b6:	0e 94 ac 18 	call	0x3158	; 0x3158 <Timer0_setCallBack>
	Timer_init(Config_Ptr);
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	9a 81       	ldd	r25, Y+2	; 0x02
    19be:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <Timer_init>
	while(sec!=15);
    19c2:	80 91 48 01 	lds	r24, 0x0148
    19c6:	90 91 49 01 	lds	r25, 0x0149
    19ca:	a0 91 4a 01 	lds	r26, 0x014A
    19ce:	b0 91 4b 01 	lds	r27, 0x014B
    19d2:	8f 30       	cpi	r24, 0x0F	; 15
    19d4:	91 05       	cpc	r25, r1
    19d6:	a1 05       	cpc	r26, r1
    19d8:	b1 05       	cpc	r27, r1
    19da:	99 f7       	brne	.-26     	; 0x19c2 <waitFifteenSeconds+0x1e>
	Timer_DeInit(Config_Ptr->timer_id);
    19dc:	e9 81       	ldd	r30, Y+1	; 0x01
    19de:	fa 81       	ldd	r31, Y+2	; 0x02
    19e0:	80 81       	ld	r24, Z
    19e2:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <Timer_DeInit>
	sec = 0;
    19e6:	10 92 48 01 	sts	0x0148, r1
    19ea:	10 92 49 01 	sts	0x0149, r1
    19ee:	10 92 4a 01 	sts	0x014A, r1
    19f2:	10 92 4b 01 	sts	0x014B, r1
}
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <waitThreeSeconds>:

/*@description: this function is to make delay for 3 seconds
 * param1: pointer to configuration structure to get timer id
 * return: none*/
void waitThreeSeconds(const Timer_ConfigType *Config_Ptr){
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <waitThreeSeconds+0x6>
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	9a 83       	std	Y+2, r25	; 0x02
    1a0c:	89 83       	std	Y+1, r24	; 0x01
	Timer0_setCallBack(threeSecondsDelayTimer);
    1a0e:	80 e1       	ldi	r24, 0x10	; 16
    1a10:	9c e0       	ldi	r25, 0x0C	; 12
    1a12:	0e 94 ac 18 	call	0x3158	; 0x3158 <Timer0_setCallBack>
	Timer_init(Config_Ptr);
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1a:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <Timer_init>
	while(sec!=3);
    1a1e:	80 91 48 01 	lds	r24, 0x0148
    1a22:	90 91 49 01 	lds	r25, 0x0149
    1a26:	a0 91 4a 01 	lds	r26, 0x014A
    1a2a:	b0 91 4b 01 	lds	r27, 0x014B
    1a2e:	83 30       	cpi	r24, 0x03	; 3
    1a30:	91 05       	cpc	r25, r1
    1a32:	a1 05       	cpc	r26, r1
    1a34:	b1 05       	cpc	r27, r1
    1a36:	99 f7       	brne	.-26     	; 0x1a1e <waitThreeSeconds+0x1e>
	Timer_DeInit(Config_Ptr->timer_id);
    1a38:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3c:	80 81       	ld	r24, Z
    1a3e:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <Timer_DeInit>
	sec = 0;
    1a42:	10 92 48 01 	sts	0x0148, r1
    1a46:	10 92 49 01 	sts	0x0149, r1
    1a4a:	10 92 4a 01 	sts	0x014A, r1
    1a4e:	10 92 4b 01 	sts	0x014B, r1
}
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <waitOneMinute>:

/*@description: this function is to make delay for one minute
 * param1: pointer to configuration structure to get timer id
 * return: none*/
void waitOneMinute(const Timer_ConfigType * Config_Ptr){
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <waitOneMinute+0x6>
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01
	Timer0_setCallBack(oneMinuteDelayTimer);
    1a6a:	89 e8       	ldi	r24, 0x89	; 137
    1a6c:	9c e0       	ldi	r25, 0x0C	; 12
    1a6e:	0e 94 ac 18 	call	0x3158	; 0x3158 <Timer0_setCallBack>
	Timer_init(Config_Ptr);
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <Timer_init>
	while(sec!=60);
    1a7a:	80 91 48 01 	lds	r24, 0x0148
    1a7e:	90 91 49 01 	lds	r25, 0x0149
    1a82:	a0 91 4a 01 	lds	r26, 0x014A
    1a86:	b0 91 4b 01 	lds	r27, 0x014B
    1a8a:	8c 33       	cpi	r24, 0x3C	; 60
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	a1 05       	cpc	r26, r1
    1a90:	b1 05       	cpc	r27, r1
    1a92:	99 f7       	brne	.-26     	; 0x1a7a <waitOneMinute+0x1e>
	Timer_DeInit(Config_Ptr->timer_id);
    1a94:	e9 81       	ldd	r30, Y+1	; 0x01
    1a96:	fa 81       	ldd	r31, Y+2	; 0x02
    1a98:	80 81       	ld	r24, Z
    1a9a:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <Timer_DeInit>
	sec = 0;
    1a9e:	10 92 48 01 	sts	0x0148, r1
    1aa2:	10 92 49 01 	sts	0x0149, r1
    1aa6:	10 92 4a 01 	sts	0x014A, r1
    1aaa:	10 92 4b 01 	sts	0x014B, r1
}
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <GPIO_setupPinDirection>:
/*@description: setup weather the function is input or output
 *  param1: port_num is the specified port number
 *  param2: pin_num is specified pin number
 *  param3: the direction of certain pin in certain port
 *  return: none*/
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction){
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <GPIO_setupPinDirection+0x6>
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <GPIO_setupPinDirection+0x8>
    1ac0:	0f 92       	push	r0
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	6a 83       	std	Y+2, r22	; 0x02
    1aca:	4b 83       	std	Y+3, r20	; 0x03
	/*check if the input port number is greater than number of ports
	 * or if the number of the input pin is greater than number of pins per port
	 * in this case if it happened it will do nothing */

	if((port_num>=NUM_OF_PORTS)||(pin_num>=NUM_OF_PINS_PER_PORT)){
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	84 30       	cpi	r24, 0x04	; 4
    1ad0:	08 f0       	brcs	.+2      	; 0x1ad4 <GPIO_setupPinDirection+0x1c>
    1ad2:	d5 c0       	rjmp	.+426    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	88 30       	cpi	r24, 0x08	; 8
    1ad8:	08 f0       	brcs	.+2      	; 0x1adc <GPIO_setupPinDirection+0x24>
    1ada:	d1 c0       	rjmp	.+418    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
		/*do nothing*/
	}
	else{
		/*set pin direction according to given parameters */
		switch(port_num){
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	3d 83       	std	Y+5, r19	; 0x05
    1ae4:	2c 83       	std	Y+4, r18	; 0x04
    1ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aea:	81 30       	cpi	r24, 0x01	; 1
    1aec:	91 05       	cpc	r25, r1
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <GPIO_setupPinDirection+0x3a>
    1af0:	43 c0       	rjmp	.+134    	; 0x1b78 <GPIO_setupPinDirection+0xc0>
    1af2:	2c 81       	ldd	r18, Y+4	; 0x04
    1af4:	3d 81       	ldd	r19, Y+5	; 0x05
    1af6:	22 30       	cpi	r18, 0x02	; 2
    1af8:	31 05       	cpc	r19, r1
    1afa:	2c f4       	brge	.+10     	; 0x1b06 <GPIO_setupPinDirection+0x4e>
    1afc:	8c 81       	ldd	r24, Y+4	; 0x04
    1afe:	9d 81       	ldd	r25, Y+5	; 0x05
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	71 f0       	breq	.+28     	; 0x1b20 <GPIO_setupPinDirection+0x68>
    1b04:	bc c0       	rjmp	.+376    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
    1b06:	2c 81       	ldd	r18, Y+4	; 0x04
    1b08:	3d 81       	ldd	r19, Y+5	; 0x05
    1b0a:	22 30       	cpi	r18, 0x02	; 2
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <GPIO_setupPinDirection+0x5a>
    1b10:	5f c0       	rjmp	.+190    	; 0x1bd0 <GPIO_setupPinDirection+0x118>
    1b12:	8c 81       	ldd	r24, Y+4	; 0x04
    1b14:	9d 81       	ldd	r25, Y+5	; 0x05
    1b16:	83 30       	cpi	r24, 0x03	; 3
    1b18:	91 05       	cpc	r25, r1
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <GPIO_setupPinDirection+0x66>
    1b1c:	85 c0       	rjmp	.+266    	; 0x1c28 <GPIO_setupPinDirection+0x170>
    1b1e:	af c0       	rjmp	.+350    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID :
			if(direction==PIN_OUTPUT){
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	81 30       	cpi	r24, 0x01	; 1
    1b24:	a1 f4       	brne	.+40     	; 0x1b4e <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA,pin_num);
    1b26:	aa e3       	ldi	r26, 0x3A	; 58
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	ea e3       	ldi	r30, 0x3A	; 58
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	48 2f       	mov	r20, r24
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	02 2e       	mov	r0, r18
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <GPIO_setupPinDirection+0x8c>
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	0a 94       	dec	r0
    1b46:	e2 f7       	brpl	.-8      	; 0x1b40 <GPIO_setupPinDirection+0x88>
    1b48:	84 2b       	or	r24, r20
    1b4a:	8c 93       	st	X, r24
    1b4c:	98 c0       	rjmp	.+304    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRA,pin_num);
    1b4e:	aa e3       	ldi	r26, 0x3A	; 58
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	ea e3       	ldi	r30, 0x3A	; 58
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	48 2f       	mov	r20, r24
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	02 2e       	mov	r0, r18
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <GPIO_setupPinDirection+0xb4>
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	0a 94       	dec	r0
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <GPIO_setupPinDirection+0xb0>
    1b70:	80 95       	com	r24
    1b72:	84 23       	and	r24, r20
    1b74:	8c 93       	st	X, r24
    1b76:	83 c0       	rjmp	.+262    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID :
			if(direction ==PIN_OUTPUT){
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	a1 f4       	brne	.+40     	; 0x1ba6 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB,pin_num);
    1b7e:	a7 e3       	ldi	r26, 0x37	; 55
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e7 e3       	ldi	r30, 0x37	; 55
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <GPIO_setupPinDirection+0xe4>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <GPIO_setupPinDirection+0xe0>
    1ba0:	84 2b       	or	r24, r20
    1ba2:	8c 93       	st	X, r24
    1ba4:	6c c0       	rjmp	.+216    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRB,pin_num);
    1ba6:	a7 e3       	ldi	r26, 0x37	; 55
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e7 e3       	ldi	r30, 0x37	; 55
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	48 2f       	mov	r20, r24
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	02 2e       	mov	r0, r18
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <GPIO_setupPinDirection+0x10c>
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	0a 94       	dec	r0
    1bc6:	e2 f7       	brpl	.-8      	; 0x1bc0 <GPIO_setupPinDirection+0x108>
    1bc8:	80 95       	com	r24
    1bca:	84 23       	and	r24, r20
    1bcc:	8c 93       	st	X, r24
    1bce:	57 c0       	rjmp	.+174    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTC_ID :
			if(direction==PIN_OUTPUT){
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	a1 f4       	brne	.+40     	; 0x1bfe <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC,pin_num);
    1bd6:	a4 e3       	ldi	r26, 0x34	; 52
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e4 e3       	ldi	r30, 0x34	; 52
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	48 2f       	mov	r20, r24
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <GPIO_setupPinDirection+0x13c>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <GPIO_setupPinDirection+0x138>
    1bf8:	84 2b       	or	r24, r20
    1bfa:	8c 93       	st	X, r24
    1bfc:	40 c0       	rjmp	.+128    	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRC,pin_num);
    1bfe:	a4 e3       	ldi	r26, 0x34	; 52
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e4 e3       	ldi	r30, 0x34	; 52
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	48 2f       	mov	r20, r24
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	02 2e       	mov	r0, r18
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <GPIO_setupPinDirection+0x164>
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	0a 94       	dec	r0
    1c1e:	e2 f7       	brpl	.-8      	; 0x1c18 <GPIO_setupPinDirection+0x160>
    1c20:	80 95       	com	r24
    1c22:	84 23       	and	r24, r20
    1c24:	8c 93       	st	X, r24
    1c26:	2b c0       	rjmp	.+86     	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID :
			if(direction==PIN_OUTPUT){
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	81 30       	cpi	r24, 0x01	; 1
    1c2c:	a1 f4       	brne	.+40     	; 0x1c56 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD,pin_num);
    1c2e:	a1 e3       	ldi	r26, 0x31	; 49
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e1 e3       	ldi	r30, 0x31	; 49
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <GPIO_setupPinDirection+0x194>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <GPIO_setupPinDirection+0x190>
    1c50:	84 2b       	or	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	14 c0       	rjmp	.+40     	; 0x1c7e <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRD,pin_num);
    1c56:	a1 e3       	ldi	r26, 0x31	; 49
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e1 e3       	ldi	r30, 0x31	; 49
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 2e       	mov	r0, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <GPIO_setupPinDirection+0x1bc>
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	0a 94       	dec	r0
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <GPIO_setupPinDirection+0x1b8>
    1c78:	80 95       	com	r24
    1c7a:	84 23       	and	r24, r20
    1c7c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <GPIO_writePin>:
                if pin is input this function will control to turn on or turn off the Pull-up resistor
 *  param1: port_num is the specified port number
 *  param2: pin_num is specified pin number
 *  param3: value is the value of certain pin in certain port
 *  return: none*/
void GPIO_writePin(uint8 port_num,uint8 pin_num, uint8 value){
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <GPIO_writePin+0x6>
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <GPIO_writePin+0x8>
    1c96:	0f 92       	push	r0
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	6a 83       	std	Y+2, r22	; 0x02
    1ca0:	4b 83       	std	Y+3, r20	; 0x03
	/*check if the input port number is greater than number of ports
	 * or if the number of the input pin is greater than number of pins per port
	 * in this case if it happened it will do nothing */
	if((port_num >= NUM_OF_PORTS)||(pin_num>=NUM_OF_PINS_PER_PORT)){
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	84 30       	cpi	r24, 0x04	; 4
    1ca6:	08 f0       	brcs	.+2      	; 0x1caa <GPIO_writePin+0x1c>
    1ca8:	d5 c0       	rjmp	.+426    	; 0x1e54 <GPIO_writePin+0x1c6>
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	88 30       	cpi	r24, 0x08	; 8
    1cae:	08 f0       	brcs	.+2      	; 0x1cb2 <GPIO_writePin+0x24>
    1cb0:	d1 c0       	rjmp	.+418    	; 0x1e54 <GPIO_writePin+0x1c6>
		/*do nothing*/
	}
	else{
		/*write in a certain pin according to given parameters */
		switch(port_num){
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	3d 83       	std	Y+5, r19	; 0x05
    1cba:	2c 83       	std	Y+4, r18	; 0x04
    1cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <GPIO_writePin+0x3a>
    1cc6:	43 c0       	rjmp	.+134    	; 0x1d4e <GPIO_writePin+0xc0>
    1cc8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cca:	3d 81       	ldd	r19, Y+5	; 0x05
    1ccc:	22 30       	cpi	r18, 0x02	; 2
    1cce:	31 05       	cpc	r19, r1
    1cd0:	2c f4       	brge	.+10     	; 0x1cdc <GPIO_writePin+0x4e>
    1cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	71 f0       	breq	.+28     	; 0x1cf6 <GPIO_writePin+0x68>
    1cda:	bc c0       	rjmp	.+376    	; 0x1e54 <GPIO_writePin+0x1c6>
    1cdc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cde:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce0:	22 30       	cpi	r18, 0x02	; 2
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <GPIO_writePin+0x5a>
    1ce6:	5f c0       	rjmp	.+190    	; 0x1da6 <GPIO_writePin+0x118>
    1ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cea:	9d 81       	ldd	r25, Y+5	; 0x05
    1cec:	83 30       	cpi	r24, 0x03	; 3
    1cee:	91 05       	cpc	r25, r1
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <GPIO_writePin+0x66>
    1cf2:	85 c0       	rjmp	.+266    	; 0x1dfe <GPIO_writePin+0x170>
    1cf4:	af c0       	rjmp	.+350    	; 0x1e54 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if(value==LOGIC_HIGH){
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	a1 f4       	brne	.+40     	; 0x1d24 <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    1cfc:	ab e3       	ldi	r26, 0x3B	; 59
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	eb e3       	ldi	r30, 0x3B	; 59
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	48 2f       	mov	r20, r24
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 2e       	mov	r0, r18
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <GPIO_writePin+0x8c>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	0a 94       	dec	r0
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <GPIO_writePin+0x88>
    1d1e:	84 2b       	or	r24, r20
    1d20:	8c 93       	st	X, r24
    1d22:	98 c0       	rjmp	.+304    	; 0x1e54 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTA,pin_num);
    1d24:	ab e3       	ldi	r26, 0x3B	; 59
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	eb e3       	ldi	r30, 0x3B	; 59
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	48 2f       	mov	r20, r24
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	02 2e       	mov	r0, r18
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <GPIO_writePin+0xb4>
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	0a 94       	dec	r0
    1d44:	e2 f7       	brpl	.-8      	; 0x1d3e <GPIO_writePin+0xb0>
    1d46:	80 95       	com	r24
    1d48:	84 23       	and	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	83 c0       	rjmp	.+262    	; 0x1e54 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value==LOGIC_HIGH){
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	a1 f4       	brne	.+40     	; 0x1d7c <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    1d54:	a8 e3       	ldi	r26, 0x38	; 56
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e8 e3       	ldi	r30, 0x38	; 56
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 2e       	mov	r0, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <GPIO_writePin+0xe4>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <GPIO_writePin+0xe0>
    1d76:	84 2b       	or	r24, r20
    1d78:	8c 93       	st	X, r24
    1d7a:	6c c0       	rjmp	.+216    	; 0x1e54 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTB,pin_num);
    1d7c:	a8 e3       	ldi	r26, 0x38	; 56
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e8 e3       	ldi	r30, 0x38	; 56
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	48 2f       	mov	r20, r24
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	02 2e       	mov	r0, r18
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <GPIO_writePin+0x10c>
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	0a 94       	dec	r0
    1d9c:	e2 f7       	brpl	.-8      	; 0x1d96 <GPIO_writePin+0x108>
    1d9e:	80 95       	com	r24
    1da0:	84 23       	and	r24, r20
    1da2:	8c 93       	st	X, r24
    1da4:	57 c0       	rjmp	.+174    	; 0x1e54 <GPIO_writePin+0x1c6>
			}
			break;

		case PORTC_ID:
			if(value==LOGIC_HIGH){
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	a1 f4       	brne	.+40     	; 0x1dd4 <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1dac:	a5 e3       	ldi	r26, 0x35	; 53
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e5 e3       	ldi	r30, 0x35	; 53
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	48 2f       	mov	r20, r24
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	02 2e       	mov	r0, r18
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <GPIO_writePin+0x13c>
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	0a 94       	dec	r0
    1dcc:	e2 f7       	brpl	.-8      	; 0x1dc6 <GPIO_writePin+0x138>
    1dce:	84 2b       	or	r24, r20
    1dd0:	8c 93       	st	X, r24
    1dd2:	40 c0       	rjmp	.+128    	; 0x1e54 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTC,pin_num);
    1dd4:	a5 e3       	ldi	r26, 0x35	; 53
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e5 e3       	ldi	r30, 0x35	; 53
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	48 2f       	mov	r20, r24
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	02 2e       	mov	r0, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <GPIO_writePin+0x164>
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	0a 94       	dec	r0
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <GPIO_writePin+0x160>
    1df6:	80 95       	com	r24
    1df8:	84 23       	and	r24, r20
    1dfa:	8c 93       	st	X, r24
    1dfc:	2b c0       	rjmp	.+86     	; 0x1e54 <GPIO_writePin+0x1c6>
			}
			break;

		case PORTD_ID:
			if(value==LOGIC_HIGH){
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	a1 f4       	brne	.+40     	; 0x1e2c <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    1e04:	a2 e3       	ldi	r26, 0x32	; 50
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e2 e3       	ldi	r30, 0x32	; 50
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	48 2f       	mov	r20, r24
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	02 2e       	mov	r0, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <GPIO_writePin+0x194>
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	0a 94       	dec	r0
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <GPIO_writePin+0x190>
    1e26:	84 2b       	or	r24, r20
    1e28:	8c 93       	st	X, r24
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTD,pin_num);
    1e2c:	a2 e3       	ldi	r26, 0x32	; 50
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e2 e3       	ldi	r30, 0x32	; 50
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	48 2f       	mov	r20, r24
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	02 2e       	mov	r0, r18
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <GPIO_writePin+0x1bc>
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	0a 94       	dec	r0
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <GPIO_writePin+0x1b8>
    1e4e:	80 95       	com	r24
    1e50:	84 23       	and	r24, r20
    1e52:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <GPIO_readPin>:

/*@description: read the value of specific pin in a certain port
 * param1: port_num is the specified port number
 * param2: pin_num is specified pin number
 * return: the value of the specified pin (LOGIC_LOW or LOGIC_HIGH)  */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <GPIO_readPin+0x6>
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <GPIO_readPin+0x8>
    1e6c:	0f 92       	push	r0
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	8a 83       	std	Y+2, r24	; 0x02
    1e74:	6b 83       	std	Y+3, r22	; 0x03
	uint8 result = LOGIC_LOW; /*default value is LOGIC_LOW*/
    1e76:	19 82       	std	Y+1, r1	; 0x01
	/*check if the input port number is greater than number of ports
	 * or if the number of the input pin is greater than number of pins per port
	 * in this case if it happened it will do nothing */
	if((port_num>=NUM_OF_PORTS)||(pin_num>=NUM_OF_PINS_PER_PORT)){
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	84 30       	cpi	r24, 0x04	; 4
    1e7c:	08 f0       	brcs	.+2      	; 0x1e80 <GPIO_readPin+0x1c>
    1e7e:	84 c0       	rjmp	.+264    	; 0x1f88 <GPIO_readPin+0x124>
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	88 30       	cpi	r24, 0x08	; 8
    1e84:	08 f0       	brcs	.+2      	; 0x1e88 <GPIO_readPin+0x24>
    1e86:	80 c0       	rjmp	.+256    	; 0x1f88 <GPIO_readPin+0x124>
		/*do nothing*/
	}
	else{
		/*read a certain pin according to given parameters */
		switch (port_num) {
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	3d 83       	std	Y+5, r19	; 0x05
    1e90:	2c 83       	std	Y+4, r18	; 0x04
    1e92:	4c 81       	ldd	r20, Y+4	; 0x04
    1e94:	5d 81       	ldd	r21, Y+5	; 0x05
    1e96:	41 30       	cpi	r20, 0x01	; 1
    1e98:	51 05       	cpc	r21, r1
    1e9a:	79 f1       	breq	.+94     	; 0x1efa <GPIO_readPin+0x96>
    1e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea0:	82 30       	cpi	r24, 0x02	; 2
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	34 f4       	brge	.+12     	; 0x1eb2 <GPIO_readPin+0x4e>
    1ea6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eaa:	21 15       	cp	r18, r1
    1eac:	31 05       	cpc	r19, r1
    1eae:	69 f0       	breq	.+26     	; 0x1eca <GPIO_readPin+0x66>
    1eb0:	6b c0       	rjmp	.+214    	; 0x1f88 <GPIO_readPin+0x124>
    1eb2:	4c 81       	ldd	r20, Y+4	; 0x04
    1eb4:	5d 81       	ldd	r21, Y+5	; 0x05
    1eb6:	42 30       	cpi	r20, 0x02	; 2
    1eb8:	51 05       	cpc	r21, r1
    1eba:	b9 f1       	breq	.+110    	; 0x1f2a <GPIO_readPin+0xc6>
    1ebc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebe:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec0:	83 30       	cpi	r24, 0x03	; 3
    1ec2:	91 05       	cpc	r25, r1
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <GPIO_readPin+0x64>
    1ec6:	49 c0       	rjmp	.+146    	; 0x1f5a <GPIO_readPin+0xf6>
    1ec8:	5f c0       	rjmp	.+190    	; 0x1f88 <GPIO_readPin+0x124>
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num)){
    1eca:	e9 e3       	ldi	r30, 0x39	; 57
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	88 2f       	mov	r24, r24
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a9 01       	movw	r20, r18
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <GPIO_readPin+0x7e>
    1ede:	55 95       	asr	r21
    1ee0:	47 95       	ror	r20
    1ee2:	8a 95       	dec	r24
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <GPIO_readPin+0x7a>
    1ee6:	ca 01       	movw	r24, r20
    1ee8:	81 70       	andi	r24, 0x01	; 1
    1eea:	90 70       	andi	r25, 0x00	; 0
    1eec:	88 23       	and	r24, r24
    1eee:	19 f0       	breq	.+6      	; 0x1ef6 <GPIO_readPin+0x92>
				result = LOGIC_HIGH;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	49 c0       	rjmp	.+146    	; 0x1f88 <GPIO_readPin+0x124>
			}
			else{
				result = LOGIC_LOW;
    1ef6:	19 82       	std	Y+1, r1	; 0x01
    1ef8:	47 c0       	rjmp	.+142    	; 0x1f88 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num)){
    1efa:	e6 e3       	ldi	r30, 0x36	; 54
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	88 2f       	mov	r24, r24
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	a9 01       	movw	r20, r18
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <GPIO_readPin+0xae>
    1f0e:	55 95       	asr	r21
    1f10:	47 95       	ror	r20
    1f12:	8a 95       	dec	r24
    1f14:	e2 f7       	brpl	.-8      	; 0x1f0e <GPIO_readPin+0xaa>
    1f16:	ca 01       	movw	r24, r20
    1f18:	81 70       	andi	r24, 0x01	; 1
    1f1a:	90 70       	andi	r25, 0x00	; 0
    1f1c:	88 23       	and	r24, r24
    1f1e:	19 f0       	breq	.+6      	; 0x1f26 <GPIO_readPin+0xc2>
				result = LOGIC_HIGH;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	31 c0       	rjmp	.+98     	; 0x1f88 <GPIO_readPin+0x124>
			}
			else{
				result = LOGIC_LOW;
    1f26:	19 82       	std	Y+1, r1	; 0x01
    1f28:	2f c0       	rjmp	.+94     	; 0x1f88 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num)){
    1f2a:	e3 e3       	ldi	r30, 0x33	; 51
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	88 2f       	mov	r24, r24
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	a9 01       	movw	r20, r18
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <GPIO_readPin+0xde>
    1f3e:	55 95       	asr	r21
    1f40:	47 95       	ror	r20
    1f42:	8a 95       	dec	r24
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <GPIO_readPin+0xda>
    1f46:	ca 01       	movw	r24, r20
    1f48:	81 70       	andi	r24, 0x01	; 1
    1f4a:	90 70       	andi	r25, 0x00	; 0
    1f4c:	88 23       	and	r24, r24
    1f4e:	19 f0       	breq	.+6      	; 0x1f56 <GPIO_readPin+0xf2>
				result = LOGIC_HIGH;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	19 c0       	rjmp	.+50     	; 0x1f88 <GPIO_readPin+0x124>
			}
			else{
				result = LOGIC_LOW;
    1f56:	19 82       	std	Y+1, r1	; 0x01
    1f58:	17 c0       	rjmp	.+46     	; 0x1f88 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num)){
    1f5a:	e0 e3       	ldi	r30, 0x30	; 48
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	88 2f       	mov	r24, r24
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	a9 01       	movw	r20, r18
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <GPIO_readPin+0x10e>
    1f6e:	55 95       	asr	r21
    1f70:	47 95       	ror	r20
    1f72:	8a 95       	dec	r24
    1f74:	e2 f7       	brpl	.-8      	; 0x1f6e <GPIO_readPin+0x10a>
    1f76:	ca 01       	movw	r24, r20
    1f78:	81 70       	andi	r24, 0x01	; 1
    1f7a:	90 70       	andi	r25, 0x00	; 0
    1f7c:	88 23       	and	r24, r24
    1f7e:	19 f0       	breq	.+6      	; 0x1f86 <GPIO_readPin+0x122>
				result = LOGIC_HIGH;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	01 c0       	rjmp	.+2      	; 0x1f88 <GPIO_readPin+0x124>
			}
			else{
				result = LOGIC_LOW;
    1f86:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return result;
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	08 95       	ret

00001f9a <GPIO_setupPortDirection>:
/*@description: set a port as input or output
 * param1: port_num is the specified port number
 * param2: direction is direction of specified port as input or output
 * return: none */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PortDirectionType direction)
{
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <GPIO_setupPortDirection+0x6>
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <GPIO_setupPortDirection+0x8>
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	6a 83       	std	Y+2, r22	; 0x02
	/*check if the input port number is greater than number of ports
	 * in this case if it happened it will do nothing */
	if(port_num >= NUM_OF_PORTS)
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	84 30       	cpi	r24, 0x04	; 4
    1fae:	90 f5       	brcc	.+100    	; 0x2014 <GPIO_setupPortDirection+0x7a>
	/*do nothing*/
	}
	else
	{
		/*set the direction of a port according to given parameters */
		switch(port_num)
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	3c 83       	std	Y+4, r19	; 0x04
    1fb8:	2b 83       	std	Y+3, r18	; 0x03
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	81 30       	cpi	r24, 0x01	; 1
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	d1 f0       	breq	.+52     	; 0x1ff8 <GPIO_setupPortDirection+0x5e>
    1fc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc8:	22 30       	cpi	r18, 0x02	; 2
    1fca:	31 05       	cpc	r19, r1
    1fcc:	2c f4       	brge	.+10     	; 0x1fd8 <GPIO_setupPortDirection+0x3e>
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	61 f0       	breq	.+24     	; 0x1fee <GPIO_setupPortDirection+0x54>
    1fd6:	1e c0       	rjmp	.+60     	; 0x2014 <GPIO_setupPortDirection+0x7a>
    1fd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fda:	3c 81       	ldd	r19, Y+4	; 0x04
    1fdc:	22 30       	cpi	r18, 0x02	; 2
    1fde:	31 05       	cpc	r19, r1
    1fe0:	81 f0       	breq	.+32     	; 0x2002 <GPIO_setupPortDirection+0x68>
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe6:	83 30       	cpi	r24, 0x03	; 3
    1fe8:	91 05       	cpc	r25, r1
    1fea:	81 f0       	breq	.+32     	; 0x200c <GPIO_setupPortDirection+0x72>
    1fec:	13 c0       	rjmp	.+38     	; 0x2014 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1fee:	ea e3       	ldi	r30, 0x3A	; 58
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	80 83       	st	Z, r24
    1ff6:	0e c0       	rjmp	.+28     	; 0x2014 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ff8:	e7 e3       	ldi	r30, 0x37	; 55
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	80 83       	st	Z, r24
    2000:	09 c0       	rjmp	.+18     	; 0x2014 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2002:	e4 e3       	ldi	r30, 0x34	; 52
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	80 83       	st	Z, r24
    200a:	04 c0       	rjmp	.+8      	; 0x2014 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    200c:	e1 e3       	ldi	r30, 0x31	; 49
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	80 83       	st	Z, r24
			break;
		}
	}
}
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <GPIO_writePort>:
/*@description: write a value in the full port if the port is assigned as input
 *              this function act to activate pull-up resistor for all pins
 *param1: port_num is the specified port number
 *param2: value is the value to be written in the port
 *return: none */
void GPIO_writePort(uint8 port_num,uint8 value){
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	00 d0       	rcall	.+0      	; 0x2028 <GPIO_writePort+0x6>
    2028:	00 d0       	rcall	.+0      	; 0x202a <GPIO_writePort+0x8>
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	6a 83       	std	Y+2, r22	; 0x02
	/*check if the input port number is greater than number of ports
	 * in this case if it happened it will do nothing */
	if(port_num>=NUM_OF_PORTS){
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	84 30       	cpi	r24, 0x04	; 4
    2036:	90 f5       	brcc	.+100    	; 0x209c <GPIO_writePort+0x7a>
		/*do nothing*/
	}
	else{
		/*select certain port to write in*/
		switch(port_num){
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	3c 83       	std	Y+4, r19	; 0x04
    2040:	2b 83       	std	Y+3, r18	; 0x03
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	9c 81       	ldd	r25, Y+4	; 0x04
    2046:	81 30       	cpi	r24, 0x01	; 1
    2048:	91 05       	cpc	r25, r1
    204a:	d1 f0       	breq	.+52     	; 0x2080 <GPIO_writePort+0x5e>
    204c:	2b 81       	ldd	r18, Y+3	; 0x03
    204e:	3c 81       	ldd	r19, Y+4	; 0x04
    2050:	22 30       	cpi	r18, 0x02	; 2
    2052:	31 05       	cpc	r19, r1
    2054:	2c f4       	brge	.+10     	; 0x2060 <GPIO_writePort+0x3e>
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	9c 81       	ldd	r25, Y+4	; 0x04
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	61 f0       	breq	.+24     	; 0x2076 <GPIO_writePort+0x54>
    205e:	1e c0       	rjmp	.+60     	; 0x209c <GPIO_writePort+0x7a>
    2060:	2b 81       	ldd	r18, Y+3	; 0x03
    2062:	3c 81       	ldd	r19, Y+4	; 0x04
    2064:	22 30       	cpi	r18, 0x02	; 2
    2066:	31 05       	cpc	r19, r1
    2068:	81 f0       	breq	.+32     	; 0x208a <GPIO_writePort+0x68>
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	83 30       	cpi	r24, 0x03	; 3
    2070:	91 05       	cpc	r25, r1
    2072:	81 f0       	breq	.+32     	; 0x2094 <GPIO_writePort+0x72>
    2074:	13 c0       	rjmp	.+38     	; 0x209c <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA=value;
    2076:	eb e3       	ldi	r30, 0x3B	; 59
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	80 83       	st	Z, r24
    207e:	0e c0       	rjmp	.+28     	; 0x209c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    2080:	e8 e3       	ldi	r30, 0x38	; 56
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	8a 81       	ldd	r24, Y+2	; 0x02
    2086:	80 83       	st	Z, r24
    2088:	09 c0       	rjmp	.+18     	; 0x209c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    208a:	e5 e3       	ldi	r30, 0x35	; 53
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	80 83       	st	Z, r24
    2092:	04 c0       	rjmp	.+8      	; 0x209c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    2094:	e2 e3       	ldi	r30, 0x32	; 50
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	80 83       	st	Z, r24
			break;
		}
	}
}
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <GPIO_readPort>:


/*@description: returns the value of the specified port
 *param1: port_num is the specified port number
 *return: value specified in certain port  */
uint8 GPIO_readPort(uint8 port_num){
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <GPIO_readPort+0x6>
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <GPIO_readPort+0x8>
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 result = 0;
    20b8:	19 82       	std	Y+1, r1	; 0x01
	if(port_num>=NUM_OF_PORTS){
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	84 30       	cpi	r24, 0x04	; 4
    20be:	90 f5       	brcc	.+100    	; 0x2124 <GPIO_readPort+0x7a>

	}
	else{
		switch(port_num){
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	3c 83       	std	Y+4, r19	; 0x04
    20c8:	2b 83       	std	Y+3, r18	; 0x03
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	81 30       	cpi	r24, 0x01	; 1
    20d0:	91 05       	cpc	r25, r1
    20d2:	d1 f0       	breq	.+52     	; 0x2108 <GPIO_readPort+0x5e>
    20d4:	2b 81       	ldd	r18, Y+3	; 0x03
    20d6:	3c 81       	ldd	r19, Y+4	; 0x04
    20d8:	22 30       	cpi	r18, 0x02	; 2
    20da:	31 05       	cpc	r19, r1
    20dc:	2c f4       	brge	.+10     	; 0x20e8 <GPIO_readPort+0x3e>
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	61 f0       	breq	.+24     	; 0x20fe <GPIO_readPort+0x54>
    20e6:	1e c0       	rjmp	.+60     	; 0x2124 <GPIO_readPort+0x7a>
    20e8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ea:	3c 81       	ldd	r19, Y+4	; 0x04
    20ec:	22 30       	cpi	r18, 0x02	; 2
    20ee:	31 05       	cpc	r19, r1
    20f0:	81 f0       	breq	.+32     	; 0x2112 <GPIO_readPort+0x68>
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	83 30       	cpi	r24, 0x03	; 3
    20f8:	91 05       	cpc	r25, r1
    20fa:	81 f0       	breq	.+32     	; 0x211c <GPIO_readPort+0x72>
    20fc:	13 c0       	rjmp	.+38     	; 0x2124 <GPIO_readPort+0x7a>
		case PORTA_ID:
			result =PINA;
    20fe:	e9 e3       	ldi	r30, 0x39	; 57
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	0e c0       	rjmp	.+28     	; 0x2124 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			result =PINB;
    2108:	e6 e3       	ldi	r30, 0x36	; 54
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	09 c0       	rjmp	.+18     	; 0x2124 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			result =PINC;
    2112:	e3 e3       	ldi	r30, 0x33	; 51
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	04 c0       	rjmp	.+8      	; 0x2124 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			result =PIND;
    211c:	e0 e3       	ldi	r30, 0x30	; 48
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return result;
    2124:	89 81       	ldd	r24, Y+1	; 0x01
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	00 d0       	rcall	.+0      	; 0x213a <KEYPAD_getPressedKey+0x6>
    213a:	0f 92       	push	r0
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2140:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2142:	1b 82       	std	Y+3, r1	; 0x03
    2144:	43 c0       	rjmp	.+134    	; 0x21cc <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	60 e0       	ldi	r22, 0x00	; 0
    214a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <GPIO_setupPortDirection>
			//GPIO_writePort(KEYPAD_PORT_ID, 0x00);
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	98 2f       	mov	r25, r24
    2152:	9c 5f       	subi	r25, 0xFC	; 252
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	69 2f       	mov	r22, r25
    2158:	41 e0       	ldi	r20, 0x01	; 1
    215a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9c 01       	movw	r18, r24
    2166:	2c 5f       	subi	r18, 0xFC	; 252
    2168:	3f 4f       	sbci	r19, 0xFF	; 255
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <KEYPAD_getPressedKey+0x40>
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	2a 95       	dec	r18
    2176:	e2 f7       	brpl	.-8      	; 0x2170 <KEYPAD_getPressedKey+0x3c>
    2178:	80 95       	com	r24
    217a:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	69 81       	ldd	r22, Y+1	; 0x01
    2180:	0e 94 11 10 	call	0x2022	; 0x2022 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2184:	1a 82       	std	Y+2, r1	; 0x02
    2186:	1c c0       	rjmp	.+56     	; 0x21c0 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	6a 81       	ldd	r22, Y+2	; 0x02
    218c:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <GPIO_readPin>
    2190:	88 23       	and	r24, r24
    2192:	99 f4       	brne	.+38     	; 0x21ba <KEYPAD_getPressedKey+0x86>
				{
#if (KEYPAD_NUM_COLS == 3)
					return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#elif (KEYPAD_NUM_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2194:	8a 81       	ldd	r24, Y+2	; 0x02
    2196:	88 2f       	mov	r24, r24
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	98 2f       	mov	r25, r24
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	89 0f       	add	r24, r25
    21a8:	8f 5f       	subi	r24, 0xFF	; 255
    21aa:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
		}

	}	
}
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	8f 5f       	subi	r24, 0xFF	; 255
    21be:	8a 83       	std	Y+2, r24	; 0x02
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	84 30       	cpi	r24, 0x04	; 4
    21c4:	08 f3       	brcs	.-62     	; 0x2188 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	8f 5f       	subi	r24, 0xFF	; 255
    21ca:	8b 83       	std	Y+3, r24	; 0x03
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	84 30       	cpi	r24, 0x04	; 4
    21d0:	08 f4       	brcc	.+2      	; 0x21d4 <KEYPAD_getPressedKey+0xa0>
    21d2:	b9 cf       	rjmp	.-142    	; 0x2146 <KEYPAD_getPressedKey+0x12>
    21d4:	b6 cf       	rjmp	.-148    	; 0x2142 <KEYPAD_getPressedKey+0xe>

000021d6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	00 d0       	rcall	.+0      	; 0x21dc <KEYPAD_4x4_adjustKeyNumber+0x6>
    21dc:	00 d0       	rcall	.+0      	; 0x21de <KEYPAD_4x4_adjustKeyNumber+0x8>
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    21e4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	3c 83       	std	Y+4, r19	; 0x04
    21ee:	2b 83       	std	Y+3, r18	; 0x03
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	9c 81       	ldd	r25, Y+4	; 0x04
    21f4:	88 30       	cpi	r24, 0x08	; 8
    21f6:	91 05       	cpc	r25, r1
    21f8:	09 f4       	brne	.+2      	; 0x21fc <KEYPAD_4x4_adjustKeyNumber+0x26>
    21fa:	70 c0       	rjmp	.+224    	; 0x22dc <KEYPAD_4x4_adjustKeyNumber+0x106>
    21fc:	2b 81       	ldd	r18, Y+3	; 0x03
    21fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2200:	29 30       	cpi	r18, 0x09	; 9
    2202:	31 05       	cpc	r19, r1
    2204:	5c f5       	brge	.+86     	; 0x225c <KEYPAD_4x4_adjustKeyNumber+0x86>
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	9c 81       	ldd	r25, Y+4	; 0x04
    220a:	84 30       	cpi	r24, 0x04	; 4
    220c:	91 05       	cpc	r25, r1
    220e:	09 f4       	brne	.+2      	; 0x2212 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2210:	59 c0       	rjmp	.+178    	; 0x22c4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2212:	2b 81       	ldd	r18, Y+3	; 0x03
    2214:	3c 81       	ldd	r19, Y+4	; 0x04
    2216:	25 30       	cpi	r18, 0x05	; 5
    2218:	31 05       	cpc	r19, r1
    221a:	9c f4       	brge	.+38     	; 0x2242 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	9c 81       	ldd	r25, Y+4	; 0x04
    2220:	82 30       	cpi	r24, 0x02	; 2
    2222:	91 05       	cpc	r25, r1
    2224:	09 f4       	brne	.+2      	; 0x2228 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2226:	48 c0       	rjmp	.+144    	; 0x22b8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2228:	2b 81       	ldd	r18, Y+3	; 0x03
    222a:	3c 81       	ldd	r19, Y+4	; 0x04
    222c:	23 30       	cpi	r18, 0x03	; 3
    222e:	31 05       	cpc	r19, r1
    2230:	0c f0       	brlt	.+2      	; 0x2234 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2232:	45 c0       	rjmp	.+138    	; 0x22be <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	9c 81       	ldd	r25, Y+4	; 0x04
    2238:	81 30       	cpi	r24, 0x01	; 1
    223a:	91 05       	cpc	r25, r1
    223c:	09 f4       	brne	.+2      	; 0x2240 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    223e:	39 c0       	rjmp	.+114    	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2240:	67 c0       	rjmp	.+206    	; 0x2310 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2242:	2b 81       	ldd	r18, Y+3	; 0x03
    2244:	3c 81       	ldd	r19, Y+4	; 0x04
    2246:	26 30       	cpi	r18, 0x06	; 6
    2248:	31 05       	cpc	r19, r1
    224a:	09 f4       	brne	.+2      	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x78>
    224c:	41 c0       	rjmp	.+130    	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	87 30       	cpi	r24, 0x07	; 7
    2254:	91 05       	cpc	r25, r1
    2256:	0c f0       	brlt	.+2      	; 0x225a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2258:	3e c0       	rjmp	.+124    	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    225a:	37 c0       	rjmp	.+110    	; 0x22ca <KEYPAD_4x4_adjustKeyNumber+0xf4>
    225c:	2b 81       	ldd	r18, Y+3	; 0x03
    225e:	3c 81       	ldd	r19, Y+4	; 0x04
    2260:	2c 30       	cpi	r18, 0x0C	; 12
    2262:	31 05       	cpc	r19, r1
    2264:	09 f4       	brne	.+2      	; 0x2268 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2266:	46 c0       	rjmp	.+140    	; 0x22f4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	9c 81       	ldd	r25, Y+4	; 0x04
    226c:	8d 30       	cpi	r24, 0x0D	; 13
    226e:	91 05       	cpc	r25, r1
    2270:	5c f4       	brge	.+22     	; 0x2288 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2272:	2b 81       	ldd	r18, Y+3	; 0x03
    2274:	3c 81       	ldd	r19, Y+4	; 0x04
    2276:	2a 30       	cpi	r18, 0x0A	; 10
    2278:	31 05       	cpc	r19, r1
    227a:	b1 f1       	breq	.+108    	; 0x22e8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	9c 81       	ldd	r25, Y+4	; 0x04
    2280:	8b 30       	cpi	r24, 0x0B	; 11
    2282:	91 05       	cpc	r25, r1
    2284:	a4 f5       	brge	.+104    	; 0x22ee <KEYPAD_4x4_adjustKeyNumber+0x118>
    2286:	2d c0       	rjmp	.+90     	; 0x22e2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2288:	2b 81       	ldd	r18, Y+3	; 0x03
    228a:	3c 81       	ldd	r19, Y+4	; 0x04
    228c:	2e 30       	cpi	r18, 0x0E	; 14
    228e:	31 05       	cpc	r19, r1
    2290:	b9 f1       	breq	.+110    	; 0x2300 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	9c 81       	ldd	r25, Y+4	; 0x04
    2296:	8e 30       	cpi	r24, 0x0E	; 14
    2298:	91 05       	cpc	r25, r1
    229a:	7c f1       	brlt	.+94     	; 0x22fa <KEYPAD_4x4_adjustKeyNumber+0x124>
    229c:	2b 81       	ldd	r18, Y+3	; 0x03
    229e:	3c 81       	ldd	r19, Y+4	; 0x04
    22a0:	2f 30       	cpi	r18, 0x0F	; 15
    22a2:	31 05       	cpc	r19, r1
    22a4:	79 f1       	breq	.+94     	; 0x2304 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	9c 81       	ldd	r25, Y+4	; 0x04
    22aa:	80 31       	cpi	r24, 0x10	; 16
    22ac:	91 05       	cpc	r25, r1
    22ae:	69 f1       	breq	.+90     	; 0x230a <KEYPAD_4x4_adjustKeyNumber+0x134>
    22b0:	2f c0       	rjmp	.+94     	; 0x2310 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1: keypad_button = 7;
    22b2:	87 e0       	ldi	r24, 0x07	; 7
    22b4:	89 83       	std	Y+1, r24	; 0x01
    22b6:	2e c0       	rjmp	.+92     	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 2: keypad_button = 8;
    22b8:	88 e0       	ldi	r24, 0x08	; 8
    22ba:	89 83       	std	Y+1, r24	; 0x01
    22bc:	2b c0       	rjmp	.+86     	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 3: keypad_button = 9;
    22be:	89 e0       	ldi	r24, 0x09	; 9
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	28 c0       	rjmp	.+80     	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 4: keypad_button = '%'; // ASCII Code of %
    22c4:	85 e2       	ldi	r24, 0x25	; 37
    22c6:	89 83       	std	Y+1, r24	; 0x01
    22c8:	25 c0       	rjmp	.+74     	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 5: keypad_button = 4;
    22ca:	84 e0       	ldi	r24, 0x04	; 4
    22cc:	89 83       	std	Y+1, r24	; 0x01
    22ce:	22 c0       	rjmp	.+68     	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 6: keypad_button = 5;
    22d0:	85 e0       	ldi	r24, 0x05	; 5
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	1f c0       	rjmp	.+62     	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 7: keypad_button = 6;
    22d6:	86 e0       	ldi	r24, 0x06	; 6
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	1c c0       	rjmp	.+56     	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
    22dc:	8a e2       	ldi	r24, 0x2A	; 42
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	19 c0       	rjmp	.+50     	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 9: keypad_button = 1;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	16 c0       	rjmp	.+44     	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 10: keypad_button = 2;
    22e8:	82 e0       	ldi	r24, 0x02	; 2
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	13 c0       	rjmp	.+38     	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 11: keypad_button = 3;
    22ee:	83 e0       	ldi	r24, 0x03	; 3
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	10 c0       	rjmp	.+32     	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
    22f4:	8d e2       	ldi	r24, 0x2D	; 45
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	0d c0       	rjmp	.+26     	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 13: keypad_button = 13;  /* ASCII of Enter */
    22fa:	8d e0       	ldi	r24, 0x0D	; 13
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	0a c0       	rjmp	.+20     	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 14: keypad_button = 0;
    2300:	19 82       	std	Y+1, r1	; 0x01
    2302:	08 c0       	rjmp	.+16     	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 15: keypad_button = '='; /* ASCII Code of '=' */
    2304:	8d e3       	ldi	r24, 0x3D	; 61
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	05 c0       	rjmp	.+10     	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
    230a:	8b e2       	ldi	r24, 0x2B	; 43
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	default: keypad_button = button_number;
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return keypad_button;
    2314:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <LCD_init>:
 *******************************************************************************/

/*@description: this function is responsible for initialization of the LCD
 * param1: none
 * return: none*/
void LCD_init(void){
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);  /*set pin as output to RS of LCD*/
    232c:	82 e0       	ldi	r24, 0x02	; 2
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	41 e0       	ldi	r20, 0x01	; 1
    2332:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);  /*set pin as output to RW of LCD*/
    2336:	82 e0       	ldi	r24, 0x02	; 2
    2338:	61 e0       	ldi	r22, 0x01	; 1
    233a:	41 e0       	ldi	r20, 0x01	; 1
    233c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);      /*set pin as output to E of LCD */
    2340:	82 e0       	ldi	r24, 0x02	; 2
    2342:	62 e0       	ldi	r22, 0x02	; 2
    2344:	41 e0       	ldi	r20, 0x01	; 1
    2346:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);   /*set a port as output to DATA of the LCD*/
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	6f ef       	ldi	r22, 0xFF	; 255
    234e:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <GPIO_setupPortDirection>
	/*in case of 8 Data bits mode send command of two lines8 bits mode 5*7 dot display Mode*/
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2352:	88 e3       	ldi	r24, 0x38	; 56
    2354:	0e 94 b5 11 	call	0x236a	; 0x236a <LCD_sendCommand>
#endif
	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF); /*off cursor*/
    2358:	8c e0       	ldi	r24, 0x0C	; 12
    235a:	0e 94 b5 11 	call	0x236a	; 0x236a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);  /*clear the LCD at the beginning (display nothing at the beginning)*/
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	0e 94 b5 11 	call	0x236a	; 0x236a <LCD_sendCommand>
}
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <LCD_sendCommand>:


/*@description: send the required command to LCD
 * param1: command is the value of the corresponding command
 * return: none*/
void LCD_sendCommand(uint8 command){
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	e9 97       	sbiw	r28, 0x39	; 57
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	89 af       	std	Y+57, r24	; 0x39
#if (LCD_DATA_BITS_MODE == 4)
	uint8 lcd_port_value = 0;
#endif
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID,LOGIC_LOW); /*RS = 0 -> select command register*/
    2380:	82 e0       	ldi	r24, 0x02	; 2
    2382:	60 e0       	ldi	r22, 0x00	; 0
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);  /*RW = 0 -> select write*/
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	61 e0       	ldi	r22, 0x01	; 1
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	a0 e8       	ldi	r26, 0x80	; 128
    239a:	bf e3       	ldi	r27, 0x3F	; 63
    239c:	8d ab       	std	Y+53, r24	; 0x35
    239e:	9e ab       	std	Y+54, r25	; 0x36
    23a0:	af ab       	std	Y+55, r26	; 0x37
    23a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a4:	6d a9       	ldd	r22, Y+53	; 0x35
    23a6:	7e a9       	ldd	r23, Y+54	; 0x36
    23a8:	8f a9       	ldd	r24, Y+55	; 0x37
    23aa:	98 ad       	ldd	r25, Y+56	; 0x38
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	4a ef       	ldi	r20, 0xFA	; 250
    23b2:	54 e4       	ldi	r21, 0x44	; 68
    23b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	89 ab       	std	Y+49, r24	; 0x31
    23be:	9a ab       	std	Y+50, r25	; 0x32
    23c0:	ab ab       	std	Y+51, r26	; 0x33
    23c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23c4:	69 a9       	ldd	r22, Y+49	; 0x31
    23c6:	7a a9       	ldd	r23, Y+50	; 0x32
    23c8:	8b a9       	ldd	r24, Y+51	; 0x33
    23ca:	9c a9       	ldd	r25, Y+52	; 0x34
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e8       	ldi	r20, 0x80	; 128
    23d2:	5f e3       	ldi	r21, 0x3F	; 63
    23d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d8:	88 23       	and	r24, r24
    23da:	2c f4       	brge	.+10     	; 0x23e6 <LCD_sendCommand+0x7c>
		__ticks = 1;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	98 ab       	std	Y+48, r25	; 0x30
    23e2:	8f a7       	std	Y+47, r24	; 0x2f
    23e4:	3f c0       	rjmp	.+126    	; 0x2464 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    23e6:	69 a9       	ldd	r22, Y+49	; 0x31
    23e8:	7a a9       	ldd	r23, Y+50	; 0x32
    23ea:	8b a9       	ldd	r24, Y+51	; 0x33
    23ec:	9c a9       	ldd	r25, Y+52	; 0x34
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	3f ef       	ldi	r19, 0xFF	; 255
    23f2:	4f e7       	ldi	r20, 0x7F	; 127
    23f4:	57 e4       	ldi	r21, 0x47	; 71
    23f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23fa:	18 16       	cp	r1, r24
    23fc:	4c f5       	brge	.+82     	; 0x2450 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fe:	6d a9       	ldd	r22, Y+53	; 0x35
    2400:	7e a9       	ldd	r23, Y+54	; 0x36
    2402:	8f a9       	ldd	r24, Y+55	; 0x37
    2404:	98 ad       	ldd	r25, Y+56	; 0x38
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e2       	ldi	r20, 0x20	; 32
    240c:	51 e4       	ldi	r21, 0x41	; 65
    240e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	bc 01       	movw	r22, r24
    2418:	cd 01       	movw	r24, r26
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	98 ab       	std	Y+48, r25	; 0x30
    2424:	8f a7       	std	Y+47, r24	; 0x2f
    2426:	0f c0       	rjmp	.+30     	; 0x2446 <LCD_sendCommand+0xdc>
    2428:	88 ec       	ldi	r24, 0xC8	; 200
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	9e a7       	std	Y+46, r25	; 0x2e
    242e:	8d a7       	std	Y+45, r24	; 0x2d
    2430:	8d a5       	ldd	r24, Y+45	; 0x2d
    2432:	9e a5       	ldd	r25, Y+46	; 0x2e
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <LCD_sendCommand+0xca>
    2438:	9e a7       	std	Y+46, r25	; 0x2e
    243a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243c:	8f a5       	ldd	r24, Y+47	; 0x2f
    243e:	98 a9       	ldd	r25, Y+48	; 0x30
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	98 ab       	std	Y+48, r25	; 0x30
    2444:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2446:	8f a5       	ldd	r24, Y+47	; 0x2f
    2448:	98 a9       	ldd	r25, Y+48	; 0x30
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	69 f7       	brne	.-38     	; 0x2428 <LCD_sendCommand+0xbe>
    244e:	14 c0       	rjmp	.+40     	; 0x2478 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2450:	69 a9       	ldd	r22, Y+49	; 0x31
    2452:	7a a9       	ldd	r23, Y+50	; 0x32
    2454:	8b a9       	ldd	r24, Y+51	; 0x33
    2456:	9c a9       	ldd	r25, Y+52	; 0x34
    2458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	98 ab       	std	Y+48, r25	; 0x30
    2462:	8f a7       	std	Y+47, r24	; 0x2f
    2464:	8f a5       	ldd	r24, Y+47	; 0x2f
    2466:	98 a9       	ldd	r25, Y+48	; 0x30
    2468:	9c a7       	std	Y+44, r25	; 0x2c
    246a:	8b a7       	std	Y+43, r24	; 0x2b
    246c:	8b a5       	ldd	r24, Y+43	; 0x2b
    246e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <LCD_sendCommand+0x106>
    2474:	9c a7       	std	Y+44, r25	; 0x2c
    2476:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);  /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /*E = 1 -> enable LCD display*/
    2478:	82 e0       	ldi	r24, 0x02	; 2
    247a:	62 e0       	ldi	r22, 0x02	; 2
    247c:	41 e0       	ldi	r20, 0x01	; 1
    247e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	a0 e8       	ldi	r26, 0x80	; 128
    2488:	bf e3       	ldi	r27, 0x3F	; 63
    248a:	8f a3       	std	Y+39, r24	; 0x27
    248c:	98 a7       	std	Y+40, r25	; 0x28
    248e:	a9 a7       	std	Y+41, r26	; 0x29
    2490:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2492:	6f a1       	ldd	r22, Y+39	; 0x27
    2494:	78 a5       	ldd	r23, Y+40	; 0x28
    2496:	89 a5       	ldd	r24, Y+41	; 0x29
    2498:	9a a5       	ldd	r25, Y+42	; 0x2a
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	4a ef       	ldi	r20, 0xFA	; 250
    24a0:	54 e4       	ldi	r21, 0x44	; 68
    24a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	8b a3       	std	Y+35, r24	; 0x23
    24ac:	9c a3       	std	Y+36, r25	; 0x24
    24ae:	ad a3       	std	Y+37, r26	; 0x25
    24b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24b2:	6b a1       	ldd	r22, Y+35	; 0x23
    24b4:	7c a1       	ldd	r23, Y+36	; 0x24
    24b6:	8d a1       	ldd	r24, Y+37	; 0x25
    24b8:	9e a1       	ldd	r25, Y+38	; 0x26
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e8       	ldi	r20, 0x80	; 128
    24c0:	5f e3       	ldi	r21, 0x3F	; 63
    24c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c6:	88 23       	and	r24, r24
    24c8:	2c f4       	brge	.+10     	; 0x24d4 <LCD_sendCommand+0x16a>
		__ticks = 1;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9a a3       	std	Y+34, r25	; 0x22
    24d0:	89 a3       	std	Y+33, r24	; 0x21
    24d2:	3f c0       	rjmp	.+126    	; 0x2552 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    24d4:	6b a1       	ldd	r22, Y+35	; 0x23
    24d6:	7c a1       	ldd	r23, Y+36	; 0x24
    24d8:	8d a1       	ldd	r24, Y+37	; 0x25
    24da:	9e a1       	ldd	r25, Y+38	; 0x26
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	3f ef       	ldi	r19, 0xFF	; 255
    24e0:	4f e7       	ldi	r20, 0x7F	; 127
    24e2:	57 e4       	ldi	r21, 0x47	; 71
    24e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e8:	18 16       	cp	r1, r24
    24ea:	4c f5       	brge	.+82     	; 0x253e <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ec:	6f a1       	ldd	r22, Y+39	; 0x27
    24ee:	78 a5       	ldd	r23, Y+40	; 0x28
    24f0:	89 a5       	ldd	r24, Y+41	; 0x29
    24f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e2       	ldi	r20, 0x20	; 32
    24fa:	51 e4       	ldi	r21, 0x41	; 65
    24fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	9a a3       	std	Y+34, r25	; 0x22
    2512:	89 a3       	std	Y+33, r24	; 0x21
    2514:	0f c0       	rjmp	.+30     	; 0x2534 <LCD_sendCommand+0x1ca>
    2516:	88 ec       	ldi	r24, 0xC8	; 200
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	98 a3       	std	Y+32, r25	; 0x20
    251c:	8f 8f       	std	Y+31, r24	; 0x1f
    251e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2520:	98 a1       	ldd	r25, Y+32	; 0x20
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	f1 f7       	brne	.-4      	; 0x2522 <LCD_sendCommand+0x1b8>
    2526:	98 a3       	std	Y+32, r25	; 0x20
    2528:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252a:	89 a1       	ldd	r24, Y+33	; 0x21
    252c:	9a a1       	ldd	r25, Y+34	; 0x22
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	9a a3       	std	Y+34, r25	; 0x22
    2532:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2534:	89 a1       	ldd	r24, Y+33	; 0x21
    2536:	9a a1       	ldd	r25, Y+34	; 0x22
    2538:	00 97       	sbiw	r24, 0x00	; 0
    253a:	69 f7       	brne	.-38     	; 0x2516 <LCD_sendCommand+0x1ac>
    253c:	14 c0       	rjmp	.+40     	; 0x2566 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253e:	6b a1       	ldd	r22, Y+35	; 0x23
    2540:	7c a1       	ldd	r23, Y+36	; 0x24
    2542:	8d a1       	ldd	r24, Y+37	; 0x25
    2544:	9e a1       	ldd	r25, Y+38	; 0x26
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	9a a3       	std	Y+34, r25	; 0x22
    2550:	89 a3       	std	Y+33, r24	; 0x21
    2552:	89 a1       	ldd	r24, Y+33	; 0x21
    2554:	9a a1       	ldd	r25, Y+34	; 0x22
    2556:	9e 8f       	std	Y+30, r25	; 0x1e
    2558:	8d 8f       	std	Y+29, r24	; 0x1d
    255a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    255c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <LCD_sendCommand+0x1f4>
    2562:	9e 8f       	std	Y+30, r25	; 0x1e
    2564:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8) /*in case of 8-bit DATA mode*/
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* send the command to data bus from D0 ----> D7 */
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	69 ad       	ldd	r22, Y+57	; 0x39
    256a:	0e 94 11 10 	call	0x2022	; 0x2022 <GPIO_writePort>
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	a0 e8       	ldi	r26, 0x80	; 128
    2574:	bf e3       	ldi	r27, 0x3F	; 63
    2576:	89 8f       	std	Y+25, r24	; 0x19
    2578:	9a 8f       	std	Y+26, r25	; 0x1a
    257a:	ab 8f       	std	Y+27, r26	; 0x1b
    257c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257e:	69 8d       	ldd	r22, Y+25	; 0x19
    2580:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2582:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2584:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	4a ef       	ldi	r20, 0xFA	; 250
    258c:	54 e4       	ldi	r21, 0x44	; 68
    258e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	8d 8b       	std	Y+21, r24	; 0x15
    2598:	9e 8b       	std	Y+22, r25	; 0x16
    259a:	af 8b       	std	Y+23, r26	; 0x17
    259c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    259e:	6d 89       	ldd	r22, Y+21	; 0x15
    25a0:	7e 89       	ldd	r23, Y+22	; 0x16
    25a2:	8f 89       	ldd	r24, Y+23	; 0x17
    25a4:	98 8d       	ldd	r25, Y+24	; 0x18
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e8       	ldi	r20, 0x80	; 128
    25ac:	5f e3       	ldi	r21, 0x3F	; 63
    25ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b2:	88 23       	and	r24, r24
    25b4:	2c f4       	brge	.+10     	; 0x25c0 <LCD_sendCommand+0x256>
		__ticks = 1;
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	9c 8b       	std	Y+20, r25	; 0x14
    25bc:	8b 8b       	std	Y+19, r24	; 0x13
    25be:	3f c0       	rjmp	.+126    	; 0x263e <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    25c0:	6d 89       	ldd	r22, Y+21	; 0x15
    25c2:	7e 89       	ldd	r23, Y+22	; 0x16
    25c4:	8f 89       	ldd	r24, Y+23	; 0x17
    25c6:	98 8d       	ldd	r25, Y+24	; 0x18
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	3f ef       	ldi	r19, 0xFF	; 255
    25cc:	4f e7       	ldi	r20, 0x7F	; 127
    25ce:	57 e4       	ldi	r21, 0x47	; 71
    25d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d4:	18 16       	cp	r1, r24
    25d6:	4c f5       	brge	.+82     	; 0x262a <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d8:	69 8d       	ldd	r22, Y+25	; 0x19
    25da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e2       	ldi	r20, 0x20	; 32
    25e6:	51 e4       	ldi	r21, 0x41	; 65
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	bc 01       	movw	r22, r24
    25f2:	cd 01       	movw	r24, r26
    25f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	9c 8b       	std	Y+20, r25	; 0x14
    25fe:	8b 8b       	std	Y+19, r24	; 0x13
    2600:	0f c0       	rjmp	.+30     	; 0x2620 <LCD_sendCommand+0x2b6>
    2602:	88 ec       	ldi	r24, 0xC8	; 200
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	9a 8b       	std	Y+18, r25	; 0x12
    2608:	89 8b       	std	Y+17, r24	; 0x11
    260a:	89 89       	ldd	r24, Y+17	; 0x11
    260c:	9a 89       	ldd	r25, Y+18	; 0x12
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	f1 f7       	brne	.-4      	; 0x260e <LCD_sendCommand+0x2a4>
    2612:	9a 8b       	std	Y+18, r25	; 0x12
    2614:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2616:	8b 89       	ldd	r24, Y+19	; 0x13
    2618:	9c 89       	ldd	r25, Y+20	; 0x14
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	9c 8b       	std	Y+20, r25	; 0x14
    261e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2620:	8b 89       	ldd	r24, Y+19	; 0x13
    2622:	9c 89       	ldd	r25, Y+20	; 0x14
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	69 f7       	brne	.-38     	; 0x2602 <LCD_sendCommand+0x298>
    2628:	14 c0       	rjmp	.+40     	; 0x2652 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262a:	6d 89       	ldd	r22, Y+21	; 0x15
    262c:	7e 89       	ldd	r23, Y+22	; 0x16
    262e:	8f 89       	ldd	r24, Y+23	; 0x17
    2630:	98 8d       	ldd	r25, Y+24	; 0x18
    2632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	9c 8b       	std	Y+20, r25	; 0x14
    263c:	8b 8b       	std	Y+19, r24	; 0x13
    263e:	8b 89       	ldd	r24, Y+19	; 0x13
    2640:	9c 89       	ldd	r25, Y+20	; 0x14
    2642:	98 8b       	std	Y+16, r25	; 0x10
    2644:	8f 87       	std	Y+15, r24	; 0x0f
    2646:	8f 85       	ldd	r24, Y+15	; 0x0f
    2648:	98 89       	ldd	r25, Y+16	; 0x10
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	f1 f7       	brne	.-4      	; 0x264a <LCD_sendCommand+0x2e0>
    264e:	98 8b       	std	Y+16, r25	; 0x10
    2650:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Enable = 0 -> disable LCD */
    2652:	82 e0       	ldi	r24, 0x02	; 2
    2654:	62 e0       	ldi	r22, 0x02	; 2
    2656:	40 e0       	ldi	r20, 0x00	; 0
    2658:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	a0 e8       	ldi	r26, 0x80	; 128
    2662:	bf e3       	ldi	r27, 0x3F	; 63
    2664:	8b 87       	std	Y+11, r24	; 0x0b
    2666:	9c 87       	std	Y+12, r25	; 0x0c
    2668:	ad 87       	std	Y+13, r26	; 0x0d
    266a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    266c:	6b 85       	ldd	r22, Y+11	; 0x0b
    266e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2670:	8d 85       	ldd	r24, Y+13	; 0x0d
    2672:	9e 85       	ldd	r25, Y+14	; 0x0e
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	4a ef       	ldi	r20, 0xFA	; 250
    267a:	54 e4       	ldi	r21, 0x44	; 68
    267c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	8f 83       	std	Y+7, r24	; 0x07
    2686:	98 87       	std	Y+8, r25	; 0x08
    2688:	a9 87       	std	Y+9, r26	; 0x09
    268a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    268c:	6f 81       	ldd	r22, Y+7	; 0x07
    268e:	78 85       	ldd	r23, Y+8	; 0x08
    2690:	89 85       	ldd	r24, Y+9	; 0x09
    2692:	9a 85       	ldd	r25, Y+10	; 0x0a
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e8       	ldi	r20, 0x80	; 128
    269a:	5f e3       	ldi	r21, 0x3F	; 63
    269c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26a0:	88 23       	and	r24, r24
    26a2:	2c f4       	brge	.+10     	; 0x26ae <LCD_sendCommand+0x344>
		__ticks = 1;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	9e 83       	std	Y+6, r25	; 0x06
    26aa:	8d 83       	std	Y+5, r24	; 0x05
    26ac:	3f c0       	rjmp	.+126    	; 0x272c <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    26ae:	6f 81       	ldd	r22, Y+7	; 0x07
    26b0:	78 85       	ldd	r23, Y+8	; 0x08
    26b2:	89 85       	ldd	r24, Y+9	; 0x09
    26b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	3f ef       	ldi	r19, 0xFF	; 255
    26ba:	4f e7       	ldi	r20, 0x7F	; 127
    26bc:	57 e4       	ldi	r21, 0x47	; 71
    26be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c2:	18 16       	cp	r1, r24
    26c4:	4c f5       	brge	.+82     	; 0x2718 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    26cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	40 e2       	ldi	r20, 0x20	; 32
    26d4:	51 e4       	ldi	r21, 0x41	; 65
    26d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	bc 01       	movw	r22, r24
    26e0:	cd 01       	movw	r24, r26
    26e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	9e 83       	std	Y+6, r25	; 0x06
    26ec:	8d 83       	std	Y+5, r24	; 0x05
    26ee:	0f c0       	rjmp	.+30     	; 0x270e <LCD_sendCommand+0x3a4>
    26f0:	88 ec       	ldi	r24, 0xC8	; 200
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	9c 83       	std	Y+4, r25	; 0x04
    26f6:	8b 83       	std	Y+3, r24	; 0x03
    26f8:	8b 81       	ldd	r24, Y+3	; 0x03
    26fa:	9c 81       	ldd	r25, Y+4	; 0x04
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	f1 f7       	brne	.-4      	; 0x26fc <LCD_sendCommand+0x392>
    2700:	9c 83       	std	Y+4, r25	; 0x04
    2702:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2704:	8d 81       	ldd	r24, Y+5	; 0x05
    2706:	9e 81       	ldd	r25, Y+6	; 0x06
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	9e 83       	std	Y+6, r25	; 0x06
    270c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270e:	8d 81       	ldd	r24, Y+5	; 0x05
    2710:	9e 81       	ldd	r25, Y+6	; 0x06
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	69 f7       	brne	.-38     	; 0x26f0 <LCD_sendCommand+0x386>
    2716:	14 c0       	rjmp	.+40     	; 0x2740 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2718:	6f 81       	ldd	r22, Y+7	; 0x07
    271a:	78 85       	ldd	r23, Y+8	; 0x08
    271c:	89 85       	ldd	r24, Y+9	; 0x09
    271e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	9e 83       	std	Y+6, r25	; 0x06
    272a:	8d 83       	std	Y+5, r24	; 0x05
    272c:	8d 81       	ldd	r24, Y+5	; 0x05
    272e:	9e 81       	ldd	r25, Y+6	; 0x06
    2730:	9a 83       	std	Y+2, r25	; 0x02
    2732:	89 83       	std	Y+1, r24	; 0x01
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	9a 81       	ldd	r25, Y+2	; 0x02
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	f1 f7       	brne	.-4      	; 0x2738 <LCD_sendCommand+0x3ce>
    273c:	9a 83       	std	Y+2, r25	; 0x02
    273e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif


}
    2740:	e9 96       	adiw	r28, 0x39	; 57
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <LCD_displayCharacter>:

/*@description: this function is required to display a character to the screen
 * param1: data is the char we want to display
 * return: none*/
void LCD_displayCharacter(uint8 data){
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	e9 97       	sbiw	r28, 0x39	; 57
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	89 af       	std	Y+57, r24	; 0x39
#if (LCD_DATA_BITS_MODE == 4)
	uint8 lcd_port_value = 0;
#endif
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /*RS = 1 -> data option is selected*/
    2768:	82 e0       	ldi	r24, 0x02	; 2
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	41 e0       	ldi	r20, 0x01	; 1
    276e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);  /*RW = 0 -> write option is selected*/
    2772:	82 e0       	ldi	r24, 0x02	; 2
    2774:	61 e0       	ldi	r22, 0x01	; 1
    2776:	40 e0       	ldi	r20, 0x00	; 0
    2778:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	a0 e8       	ldi	r26, 0x80	; 128
    2782:	bf e3       	ldi	r27, 0x3F	; 63
    2784:	8d ab       	std	Y+53, r24	; 0x35
    2786:	9e ab       	std	Y+54, r25	; 0x36
    2788:	af ab       	std	Y+55, r26	; 0x37
    278a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278c:	6d a9       	ldd	r22, Y+53	; 0x35
    278e:	7e a9       	ldd	r23, Y+54	; 0x36
    2790:	8f a9       	ldd	r24, Y+55	; 0x37
    2792:	98 ad       	ldd	r25, Y+56	; 0x38
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	4a ef       	ldi	r20, 0xFA	; 250
    279a:	54 e4       	ldi	r21, 0x44	; 68
    279c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	89 ab       	std	Y+49, r24	; 0x31
    27a6:	9a ab       	std	Y+50, r25	; 0x32
    27a8:	ab ab       	std	Y+51, r26	; 0x33
    27aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27ac:	69 a9       	ldd	r22, Y+49	; 0x31
    27ae:	7a a9       	ldd	r23, Y+50	; 0x32
    27b0:	8b a9       	ldd	r24, Y+51	; 0x33
    27b2:	9c a9       	ldd	r25, Y+52	; 0x34
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e8       	ldi	r20, 0x80	; 128
    27ba:	5f e3       	ldi	r21, 0x3F	; 63
    27bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27c0:	88 23       	and	r24, r24
    27c2:	2c f4       	brge	.+10     	; 0x27ce <LCD_displayCharacter+0x7c>
		__ticks = 1;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	98 ab       	std	Y+48, r25	; 0x30
    27ca:	8f a7       	std	Y+47, r24	; 0x2f
    27cc:	3f c0       	rjmp	.+126    	; 0x284c <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    27ce:	69 a9       	ldd	r22, Y+49	; 0x31
    27d0:	7a a9       	ldd	r23, Y+50	; 0x32
    27d2:	8b a9       	ldd	r24, Y+51	; 0x33
    27d4:	9c a9       	ldd	r25, Y+52	; 0x34
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	3f ef       	ldi	r19, 0xFF	; 255
    27da:	4f e7       	ldi	r20, 0x7F	; 127
    27dc:	57 e4       	ldi	r21, 0x47	; 71
    27de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e2:	18 16       	cp	r1, r24
    27e4:	4c f5       	brge	.+82     	; 0x2838 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e6:	6d a9       	ldd	r22, Y+53	; 0x35
    27e8:	7e a9       	ldd	r23, Y+54	; 0x36
    27ea:	8f a9       	ldd	r24, Y+55	; 0x37
    27ec:	98 ad       	ldd	r25, Y+56	; 0x38
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e2       	ldi	r20, 0x20	; 32
    27f4:	51 e4       	ldi	r21, 0x41	; 65
    27f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	bc 01       	movw	r22, r24
    2800:	cd 01       	movw	r24, r26
    2802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	98 ab       	std	Y+48, r25	; 0x30
    280c:	8f a7       	std	Y+47, r24	; 0x2f
    280e:	0f c0       	rjmp	.+30     	; 0x282e <LCD_displayCharacter+0xdc>
    2810:	88 ec       	ldi	r24, 0xC8	; 200
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	9e a7       	std	Y+46, r25	; 0x2e
    2816:	8d a7       	std	Y+45, r24	; 0x2d
    2818:	8d a5       	ldd	r24, Y+45	; 0x2d
    281a:	9e a5       	ldd	r25, Y+46	; 0x2e
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <LCD_displayCharacter+0xca>
    2820:	9e a7       	std	Y+46, r25	; 0x2e
    2822:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2824:	8f a5       	ldd	r24, Y+47	; 0x2f
    2826:	98 a9       	ldd	r25, Y+48	; 0x30
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	98 ab       	std	Y+48, r25	; 0x30
    282c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2830:	98 a9       	ldd	r25, Y+48	; 0x30
    2832:	00 97       	sbiw	r24, 0x00	; 0
    2834:	69 f7       	brne	.-38     	; 0x2810 <LCD_displayCharacter+0xbe>
    2836:	14 c0       	rjmp	.+40     	; 0x2860 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2838:	69 a9       	ldd	r22, Y+49	; 0x31
    283a:	7a a9       	ldd	r23, Y+50	; 0x32
    283c:	8b a9       	ldd	r24, Y+51	; 0x33
    283e:	9c a9       	ldd	r25, Y+52	; 0x34
    2840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	98 ab       	std	Y+48, r25	; 0x30
    284a:	8f a7       	std	Y+47, r24	; 0x2f
    284c:	8f a5       	ldd	r24, Y+47	; 0x2f
    284e:	98 a9       	ldd	r25, Y+48	; 0x30
    2850:	9c a7       	std	Y+44, r25	; 0x2c
    2852:	8b a7       	std	Y+43, r24	; 0x2b
    2854:	8b a5       	ldd	r24, Y+43	; 0x2b
    2856:	9c a5       	ldd	r25, Y+44	; 0x2c
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	f1 f7       	brne	.-4      	; 0x2858 <LCD_displayCharacter+0x106>
    285c:	9c a7       	std	Y+44, r25	; 0x2c
    285e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);   /*Enable = 1 -> enable LCD*/
    2860:	82 e0       	ldi	r24, 0x02	; 2
    2862:	62 e0       	ldi	r22, 0x02	; 2
    2864:	41 e0       	ldi	r20, 0x01	; 1
    2866:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	a0 e8       	ldi	r26, 0x80	; 128
    2870:	bf e3       	ldi	r27, 0x3F	; 63
    2872:	8f a3       	std	Y+39, r24	; 0x27
    2874:	98 a7       	std	Y+40, r25	; 0x28
    2876:	a9 a7       	std	Y+41, r26	; 0x29
    2878:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287a:	6f a1       	ldd	r22, Y+39	; 0x27
    287c:	78 a5       	ldd	r23, Y+40	; 0x28
    287e:	89 a5       	ldd	r24, Y+41	; 0x29
    2880:	9a a5       	ldd	r25, Y+42	; 0x2a
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	4a ef       	ldi	r20, 0xFA	; 250
    2888:	54 e4       	ldi	r21, 0x44	; 68
    288a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	8b a3       	std	Y+35, r24	; 0x23
    2894:	9c a3       	std	Y+36, r25	; 0x24
    2896:	ad a3       	std	Y+37, r26	; 0x25
    2898:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    289a:	6b a1       	ldd	r22, Y+35	; 0x23
    289c:	7c a1       	ldd	r23, Y+36	; 0x24
    289e:	8d a1       	ldd	r24, Y+37	; 0x25
    28a0:	9e a1       	ldd	r25, Y+38	; 0x26
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e8       	ldi	r20, 0x80	; 128
    28a8:	5f e3       	ldi	r21, 0x3F	; 63
    28aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ae:	88 23       	and	r24, r24
    28b0:	2c f4       	brge	.+10     	; 0x28bc <LCD_displayCharacter+0x16a>
		__ticks = 1;
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	9a a3       	std	Y+34, r25	; 0x22
    28b8:	89 a3       	std	Y+33, r24	; 0x21
    28ba:	3f c0       	rjmp	.+126    	; 0x293a <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    28bc:	6b a1       	ldd	r22, Y+35	; 0x23
    28be:	7c a1       	ldd	r23, Y+36	; 0x24
    28c0:	8d a1       	ldd	r24, Y+37	; 0x25
    28c2:	9e a1       	ldd	r25, Y+38	; 0x26
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	3f ef       	ldi	r19, 0xFF	; 255
    28c8:	4f e7       	ldi	r20, 0x7F	; 127
    28ca:	57 e4       	ldi	r21, 0x47	; 71
    28cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28d0:	18 16       	cp	r1, r24
    28d2:	4c f5       	brge	.+82     	; 0x2926 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d4:	6f a1       	ldd	r22, Y+39	; 0x27
    28d6:	78 a5       	ldd	r23, Y+40	; 0x28
    28d8:	89 a5       	ldd	r24, Y+41	; 0x29
    28da:	9a a5       	ldd	r25, Y+42	; 0x2a
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e2       	ldi	r20, 0x20	; 32
    28e2:	51 e4       	ldi	r21, 0x41	; 65
    28e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	9a a3       	std	Y+34, r25	; 0x22
    28fa:	89 a3       	std	Y+33, r24	; 0x21
    28fc:	0f c0       	rjmp	.+30     	; 0x291c <LCD_displayCharacter+0x1ca>
    28fe:	88 ec       	ldi	r24, 0xC8	; 200
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	98 a3       	std	Y+32, r25	; 0x20
    2904:	8f 8f       	std	Y+31, r24	; 0x1f
    2906:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2908:	98 a1       	ldd	r25, Y+32	; 0x20
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	f1 f7       	brne	.-4      	; 0x290a <LCD_displayCharacter+0x1b8>
    290e:	98 a3       	std	Y+32, r25	; 0x20
    2910:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2912:	89 a1       	ldd	r24, Y+33	; 0x21
    2914:	9a a1       	ldd	r25, Y+34	; 0x22
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	9a a3       	std	Y+34, r25	; 0x22
    291a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291c:	89 a1       	ldd	r24, Y+33	; 0x21
    291e:	9a a1       	ldd	r25, Y+34	; 0x22
    2920:	00 97       	sbiw	r24, 0x00	; 0
    2922:	69 f7       	brne	.-38     	; 0x28fe <LCD_displayCharacter+0x1ac>
    2924:	14 c0       	rjmp	.+40     	; 0x294e <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2926:	6b a1       	ldd	r22, Y+35	; 0x23
    2928:	7c a1       	ldd	r23, Y+36	; 0x24
    292a:	8d a1       	ldd	r24, Y+37	; 0x25
    292c:	9e a1       	ldd	r25, Y+38	; 0x26
    292e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	9a a3       	std	Y+34, r25	; 0x22
    2938:	89 a3       	std	Y+33, r24	; 0x21
    293a:	89 a1       	ldd	r24, Y+33	; 0x21
    293c:	9a a1       	ldd	r25, Y+34	; 0x22
    293e:	9e 8f       	std	Y+30, r25	; 0x1e
    2940:	8d 8f       	std	Y+29, r24	; 0x1d
    2942:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2944:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	f1 f7       	brne	.-4      	; 0x2946 <LCD_displayCharacter+0x1f4>
    294a:	9e 8f       	std	Y+30, r25	; 0x1e
    294c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8) /*in case of 8-bit DATA mode*/
	GPIO_writePort(LCD_DATA_PORT_ID,data); /*write the data to bus D0 -> D7 */
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	69 ad       	ldd	r22, Y+57	; 0x39
    2952:	0e 94 11 10 	call	0x2022	; 0x2022 <GPIO_writePort>
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	a0 e8       	ldi	r26, 0x80	; 128
    295c:	bf e3       	ldi	r27, 0x3F	; 63
    295e:	89 8f       	std	Y+25, r24	; 0x19
    2960:	9a 8f       	std	Y+26, r25	; 0x1a
    2962:	ab 8f       	std	Y+27, r26	; 0x1b
    2964:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2966:	69 8d       	ldd	r22, Y+25	; 0x19
    2968:	7a 8d       	ldd	r23, Y+26	; 0x1a
    296a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    296c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	4a ef       	ldi	r20, 0xFA	; 250
    2974:	54 e4       	ldi	r21, 0x44	; 68
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	8d 8b       	std	Y+21, r24	; 0x15
    2980:	9e 8b       	std	Y+22, r25	; 0x16
    2982:	af 8b       	std	Y+23, r26	; 0x17
    2984:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2986:	6d 89       	ldd	r22, Y+21	; 0x15
    2988:	7e 89       	ldd	r23, Y+22	; 0x16
    298a:	8f 89       	ldd	r24, Y+23	; 0x17
    298c:	98 8d       	ldd	r25, Y+24	; 0x18
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	40 e8       	ldi	r20, 0x80	; 128
    2994:	5f e3       	ldi	r21, 0x3F	; 63
    2996:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    299a:	88 23       	and	r24, r24
    299c:	2c f4       	brge	.+10     	; 0x29a8 <LCD_displayCharacter+0x256>
		__ticks = 1;
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	9c 8b       	std	Y+20, r25	; 0x14
    29a4:	8b 8b       	std	Y+19, r24	; 0x13
    29a6:	3f c0       	rjmp	.+126    	; 0x2a26 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    29a8:	6d 89       	ldd	r22, Y+21	; 0x15
    29aa:	7e 89       	ldd	r23, Y+22	; 0x16
    29ac:	8f 89       	ldd	r24, Y+23	; 0x17
    29ae:	98 8d       	ldd	r25, Y+24	; 0x18
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	3f ef       	ldi	r19, 0xFF	; 255
    29b4:	4f e7       	ldi	r20, 0x7F	; 127
    29b6:	57 e4       	ldi	r21, 0x47	; 71
    29b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29bc:	18 16       	cp	r1, r24
    29be:	4c f5       	brge	.+82     	; 0x2a12 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c0:	69 8d       	ldd	r22, Y+25	; 0x19
    29c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e2       	ldi	r20, 0x20	; 32
    29ce:	51 e4       	ldi	r21, 0x41	; 65
    29d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	bc 01       	movw	r22, r24
    29da:	cd 01       	movw	r24, r26
    29dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	9c 8b       	std	Y+20, r25	; 0x14
    29e6:	8b 8b       	std	Y+19, r24	; 0x13
    29e8:	0f c0       	rjmp	.+30     	; 0x2a08 <LCD_displayCharacter+0x2b6>
    29ea:	88 ec       	ldi	r24, 0xC8	; 200
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	9a 8b       	std	Y+18, r25	; 0x12
    29f0:	89 8b       	std	Y+17, r24	; 0x11
    29f2:	89 89       	ldd	r24, Y+17	; 0x11
    29f4:	9a 89       	ldd	r25, Y+18	; 0x12
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	f1 f7       	brne	.-4      	; 0x29f6 <LCD_displayCharacter+0x2a4>
    29fa:	9a 8b       	std	Y+18, r25	; 0x12
    29fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2a00:	9c 89       	ldd	r25, Y+20	; 0x14
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	9c 8b       	std	Y+20, r25	; 0x14
    2a06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a08:	8b 89       	ldd	r24, Y+19	; 0x13
    2a0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a0c:	00 97       	sbiw	r24, 0x00	; 0
    2a0e:	69 f7       	brne	.-38     	; 0x29ea <LCD_displayCharacter+0x298>
    2a10:	14 c0       	rjmp	.+40     	; 0x2a3a <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a12:	6d 89       	ldd	r22, Y+21	; 0x15
    2a14:	7e 89       	ldd	r23, Y+22	; 0x16
    2a16:	8f 89       	ldd	r24, Y+23	; 0x17
    2a18:	98 8d       	ldd	r25, Y+24	; 0x18
    2a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	9c 8b       	std	Y+20, r25	; 0x14
    2a24:	8b 8b       	std	Y+19, r24	; 0x13
    2a26:	8b 89       	ldd	r24, Y+19	; 0x13
    2a28:	9c 89       	ldd	r25, Y+20	; 0x14
    2a2a:	98 8b       	std	Y+16, r25	; 0x10
    2a2c:	8f 87       	std	Y+15, r24	; 0x0f
    2a2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a30:	98 89       	ldd	r25, Y+16	; 0x10
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	f1 f7       	brne	.-4      	; 0x2a32 <LCD_displayCharacter+0x2e0>
    2a36:	98 8b       	std	Y+16, r25	; 0x10
    2a38:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Enable = 0 ->   Disable LCD*/
    2a3a:	82 e0       	ldi	r24, 0x02	; 2
    2a3c:	62 e0       	ldi	r22, 0x02	; 2
    2a3e:	40 e0       	ldi	r20, 0x00	; 0
    2a40:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GPIO_writePin>
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	a0 e8       	ldi	r26, 0x80	; 128
    2a4a:	bf e3       	ldi	r27, 0x3F	; 63
    2a4c:	8b 87       	std	Y+11, r24	; 0x0b
    2a4e:	9c 87       	std	Y+12, r25	; 0x0c
    2a50:	ad 87       	std	Y+13, r26	; 0x0d
    2a52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	4a ef       	ldi	r20, 0xFA	; 250
    2a62:	54 e4       	ldi	r21, 0x44	; 68
    2a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	8f 83       	std	Y+7, r24	; 0x07
    2a6e:	98 87       	std	Y+8, r25	; 0x08
    2a70:	a9 87       	std	Y+9, r26	; 0x09
    2a72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a74:	6f 81       	ldd	r22, Y+7	; 0x07
    2a76:	78 85       	ldd	r23, Y+8	; 0x08
    2a78:	89 85       	ldd	r24, Y+9	; 0x09
    2a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e8       	ldi	r20, 0x80	; 128
    2a82:	5f e3       	ldi	r21, 0x3F	; 63
    2a84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a88:	88 23       	and	r24, r24
    2a8a:	2c f4       	brge	.+10     	; 0x2a96 <LCD_displayCharacter+0x344>
		__ticks = 1;
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	9e 83       	std	Y+6, r25	; 0x06
    2a92:	8d 83       	std	Y+5, r24	; 0x05
    2a94:	3f c0       	rjmp	.+126    	; 0x2b14 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2a96:	6f 81       	ldd	r22, Y+7	; 0x07
    2a98:	78 85       	ldd	r23, Y+8	; 0x08
    2a9a:	89 85       	ldd	r24, Y+9	; 0x09
    2a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	3f ef       	ldi	r19, 0xFF	; 255
    2aa2:	4f e7       	ldi	r20, 0x7F	; 127
    2aa4:	57 e4       	ldi	r21, 0x47	; 71
    2aa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aaa:	18 16       	cp	r1, r24
    2aac:	4c f5       	brge	.+82     	; 0x2b00 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e2       	ldi	r20, 0x20	; 32
    2abc:	51 e4       	ldi	r21, 0x41	; 65
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	bc 01       	movw	r22, r24
    2ac8:	cd 01       	movw	r24, r26
    2aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	9e 83       	std	Y+6, r25	; 0x06
    2ad4:	8d 83       	std	Y+5, r24	; 0x05
    2ad6:	0f c0       	rjmp	.+30     	; 0x2af6 <LCD_displayCharacter+0x3a4>
    2ad8:	88 ec       	ldi	r24, 0xC8	; 200
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	9c 83       	std	Y+4, r25	; 0x04
    2ade:	8b 83       	std	Y+3, r24	; 0x03
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	f1 f7       	brne	.-4      	; 0x2ae4 <LCD_displayCharacter+0x392>
    2ae8:	9c 83       	std	Y+4, r25	; 0x04
    2aea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aec:	8d 81       	ldd	r24, Y+5	; 0x05
    2aee:	9e 81       	ldd	r25, Y+6	; 0x06
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	9e 83       	std	Y+6, r25	; 0x06
    2af4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af6:	8d 81       	ldd	r24, Y+5	; 0x05
    2af8:	9e 81       	ldd	r25, Y+6	; 0x06
    2afa:	00 97       	sbiw	r24, 0x00	; 0
    2afc:	69 f7       	brne	.-38     	; 0x2ad8 <LCD_displayCharacter+0x386>
    2afe:	14 c0       	rjmp	.+40     	; 0x2b28 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b00:	6f 81       	ldd	r22, Y+7	; 0x07
    2b02:	78 85       	ldd	r23, Y+8	; 0x08
    2b04:	89 85       	ldd	r24, Y+9	; 0x09
    2b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	9e 83       	std	Y+6, r25	; 0x06
    2b12:	8d 83       	std	Y+5, r24	; 0x05
    2b14:	8d 81       	ldd	r24, Y+5	; 0x05
    2b16:	9e 81       	ldd	r25, Y+6	; 0x06
    2b18:	9a 83       	std	Y+2, r25	; 0x02
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	f1 f7       	brne	.-4      	; 0x2b20 <LCD_displayCharacter+0x3ce>
    2b24:	9a 83       	std	Y+2, r25	; 0x02
    2b26:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2b28:	e9 96       	adiw	r28, 0x39	; 57
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	cf 91       	pop	r28
    2b36:	df 91       	pop	r29
    2b38:	08 95       	ret

00002b3a <LCD_displayString>:

/*@description: this function is required to display a string to the screen
 * param1: *str is pointer to the first location of the string(array of char)
 * and const as this function is prohibited to modify the value of the string
 * return: none*/
void LCD_displayString(const char *str){
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	00 d0       	rcall	.+0      	; 0x2b40 <LCD_displayString+0x6>
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	9a 83       	std	Y+2, r25	; 0x02
    2b46:	89 83       	std	Y+1, r24	; 0x01
    2b48:	0a c0       	rjmp	.+20     	; 0x2b5e <LCD_displayString+0x24>
	/*loop across the String(array of char) and wait for null when null detected escape looping*/
	while((*str) != '\0'){
		LCD_displayCharacter(*str); /*calling displayCharacter function and send asterisk of the pointer (the current char) */
    2b4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b4e:	80 81       	ld	r24, Z
    2b50:	0e 94 a9 13 	call	0x2752	; 0x2752 <LCD_displayCharacter>
		str++;  /*increment the pointer position*/
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	9a 81       	ldd	r25, Y+2	; 0x02
    2b58:	01 96       	adiw	r24, 0x01	; 1
    2b5a:	9a 83       	std	Y+2, r25	; 0x02
    2b5c:	89 83       	std	Y+1, r24	; 0x01
 * param1: *str is pointer to the first location of the string(array of char)
 * and const as this function is prohibited to modify the value of the string
 * return: none*/
void LCD_displayString(const char *str){
	/*loop across the String(array of char) and wait for null when null detected escape looping*/
	while((*str) != '\0'){
    2b5e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b60:	fa 81       	ldd	r31, Y+2	; 0x02
    2b62:	80 81       	ld	r24, Z
    2b64:	88 23       	and	r24, r24
    2b66:	89 f7       	brne	.-30     	; 0x2b4a <LCD_displayString+0x10>
		LCD_displayCharacter(*str); /*calling displayCharacter function and send asterisk of the pointer (the current char) */
		str++;  /*increment the pointer position*/
	}
}
    2b68:	0f 90       	pop	r0
    2b6a:	0f 90       	pop	r0
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	08 95       	ret

00002b72 <LCD_moveCursor>:

/*@description: move the cursor to a specified row and specified column
 * param1: row is the specified row
 * param2: col is the specified column
 * return: none*/
void LCD_moveCursor(uint8 row ,uint8 col){
    2b72:	df 93       	push	r29
    2b74:	cf 93       	push	r28
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <LCD_moveCursor+0x6>
    2b78:	00 d0       	rcall	.+0      	; 0x2b7a <LCD_moveCursor+0x8>
    2b7a:	0f 92       	push	r0
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	8a 83       	std	Y+2, r24	; 0x02
    2b82:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	/*select the required address in the LCD DDRAM*/
	switch(row){
    2b84:	8a 81       	ldd	r24, Y+2	; 0x02
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	3d 83       	std	Y+5, r19	; 0x05
    2b8c:	2c 83       	std	Y+4, r18	; 0x04
    2b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b90:	9d 81       	ldd	r25, Y+5	; 0x05
    2b92:	81 30       	cpi	r24, 0x01	; 1
    2b94:	91 05       	cpc	r25, r1
    2b96:	c1 f0       	breq	.+48     	; 0x2bc8 <LCD_moveCursor+0x56>
    2b98:	2c 81       	ldd	r18, Y+4	; 0x04
    2b9a:	3d 81       	ldd	r19, Y+5	; 0x05
    2b9c:	22 30       	cpi	r18, 0x02	; 2
    2b9e:	31 05       	cpc	r19, r1
    2ba0:	2c f4       	brge	.+10     	; 0x2bac <LCD_moveCursor+0x3a>
    2ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba6:	00 97       	sbiw	r24, 0x00	; 0
    2ba8:	61 f0       	breq	.+24     	; 0x2bc2 <LCD_moveCursor+0x50>
    2baa:	19 c0       	rjmp	.+50     	; 0x2bde <LCD_moveCursor+0x6c>
    2bac:	2c 81       	ldd	r18, Y+4	; 0x04
    2bae:	3d 81       	ldd	r19, Y+5	; 0x05
    2bb0:	22 30       	cpi	r18, 0x02	; 2
    2bb2:	31 05       	cpc	r19, r1
    2bb4:	69 f0       	breq	.+26     	; 0x2bd0 <LCD_moveCursor+0x5e>
    2bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bba:	83 30       	cpi	r24, 0x03	; 3
    2bbc:	91 05       	cpc	r25, r1
    2bbe:	61 f0       	breq	.+24     	; 0x2bd8 <LCD_moveCursor+0x66>
    2bc0:	0e c0       	rjmp	.+28     	; 0x2bde <LCD_moveCursor+0x6c>

	case 0: lcd_memory_address = col;
    2bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc4:	89 83       	std	Y+1, r24	; 0x01
    2bc6:	0b c0       	rjmp	.+22     	; 0x2bde <LCD_moveCursor+0x6c>
	break;

	case 1: lcd_memory_address = col+0x40;
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	80 5c       	subi	r24, 0xC0	; 192
    2bcc:	89 83       	std	Y+1, r24	; 0x01
    2bce:	07 c0       	rjmp	.+14     	; 0x2bde <LCD_moveCursor+0x6c>
	break;

	case 2: lcd_memory_address = col+0x10;
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	80 5f       	subi	r24, 0xF0	; 240
    2bd4:	89 83       	std	Y+1, r24	; 0x01
    2bd6:	03 c0       	rjmp	.+6      	; 0x2bde <LCD_moveCursor+0x6c>
	break;

	case 3: lcd_memory_address = col +0x50;
    2bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bda:	80 5b       	subi	r24, 0xB0	; 176
    2bdc:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	/*send the mapped address to set the location of the cursor */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	80 68       	ori	r24, 0x80	; 128
    2be2:	0e 94 b5 11 	call	0x236a	; 0x236a <LCD_sendCommand>
}
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <LCD_displayStringRowColumn>:
/*@description: display string starting from specified row and certain column
 * param1: row is the specified row
 * param2: col is the specified column
 * param3: *str is pointer to first element in the string(array of char)
 * return: none*/
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *str){
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <LCD_displayStringRowColumn+0x6>
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <LCD_displayStringRowColumn+0x8>
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	89 83       	std	Y+1, r24	; 0x01
    2c04:	6a 83       	std	Y+2, r22	; 0x02
    2c06:	5c 83       	std	Y+4, r21	; 0x04
    2c08:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);  /*jump to cursor position*/
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	6a 81       	ldd	r22, Y+2	; 0x02
    2c0e:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_moveCursor>
	LCD_displayString(str);   /*pass the address of the string to the displayString function*/
    2c12:	8b 81       	ldd	r24, Y+3	; 0x03
    2c14:	9c 81       	ldd	r25, Y+4	; 0x04
    2c16:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_displayString>
}
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <LCD_integerToString>:


/*@description: convert an integer to a string to display the integer
 * param1: data is the value of the integer we want to display
 * return: none*/
void LCD_integerToString(short data){
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
    2c30:	62 97       	sbiw	r28, 0x12	; 18
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	cd bf       	out	0x3d, r28	; 61
    2c3c:	9a 8b       	std	Y+18, r25	; 0x12
    2c3e:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16]; /*16 as the size of the short */
	 /*itoa is integer to array std function
	  * param1: integer data
	  * param2: the array of char(string) that will have the value of the integer
	  * param3: integer conversion base*/
	itoa(data,buffer,10);
    2c40:	89 89       	ldd	r24, Y+17	; 0x11
    2c42:	9a 89       	ldd	r25, Y+18	; 0x12
    2c44:	9e 01       	movw	r18, r28
    2c46:	2f 5f       	subi	r18, 0xFF	; 255
    2c48:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4a:	b9 01       	movw	r22, r18
    2c4c:	4a e0       	ldi	r20, 0x0A	; 10
    2c4e:	50 e0       	ldi	r21, 0x00	; 0
    2c50:	0e 94 88 1a 	call	0x3510	; 0x3510 <itoa>
	LCD_displayString(buffer);/*display the string(integer after conversion)*/
    2c54:	ce 01       	movw	r24, r28
    2c56:	01 96       	adiw	r24, 0x01	; 1
    2c58:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_displayString>
}
    2c5c:	62 96       	adiw	r28, 0x12	; 18
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	f8 94       	cli
    2c62:	de bf       	out	0x3e, r29	; 62
    2c64:	0f be       	out	0x3f, r0	; 63
    2c66:	cd bf       	out	0x3d, r28	; 61
    2c68:	cf 91       	pop	r28
    2c6a:	df 91       	pop	r29
    2c6c:	08 95       	ret

00002c6e <LCD_clearScreen>:

/*@description: clear the screen and return the cursor to the first row and column
 * param1: none
 * return: none*/
void LCD_clearScreen(void){
    2c6e:	df 93       	push	r29
    2c70:	cf 93       	push	r28
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);/*clear the display and set cursor to first row and first col*/
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	0e 94 b5 11 	call	0x236a	; 0x236a <LCD_sendCommand>
}
    2c7c:	cf 91       	pop	r28
    2c7e:	df 91       	pop	r29
    2c80:	08 95       	ret

00002c82 <__vector_9>:


/*****************************************************************************************
                                      timer0 ISRs
*****************************************************************************************/
ISR(TIMER0_OVF_vect){
    2c82:	1f 92       	push	r1
    2c84:	0f 92       	push	r0
    2c86:	0f b6       	in	r0, 0x3f	; 63
    2c88:	0f 92       	push	r0
    2c8a:	11 24       	eor	r1, r1
    2c8c:	2f 93       	push	r18
    2c8e:	3f 93       	push	r19
    2c90:	4f 93       	push	r20
    2c92:	5f 93       	push	r21
    2c94:	6f 93       	push	r22
    2c96:	7f 93       	push	r23
    2c98:	8f 93       	push	r24
    2c9a:	9f 93       	push	r25
    2c9c:	af 93       	push	r26
    2c9e:	bf 93       	push	r27
    2ca0:	ef 93       	push	r30
    2ca2:	ff 93       	push	r31
    2ca4:	df 93       	push	r29
    2ca6:	cf 93       	push	r28
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62

	if(g_Timer0CallBackPtr != NULL_PTR)
    2cac:	80 91 51 01 	lds	r24, 0x0151
    2cb0:	90 91 52 01 	lds	r25, 0x0152
    2cb4:	00 97       	sbiw	r24, 0x00	; 0
    2cb6:	51 f0       	breq	.+20     	; 0x2ccc <__vector_9+0x4a>
	{
		TCNT0 = timer0_ovf_initial_value; /*in case of overflow mode initialize the timer with value specified from user each time*/
    2cb8:	e2 e5       	ldi	r30, 0x52	; 82
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 91 57 01 	lds	r24, 0x0157
    2cc0:	80 83       	st	Z, r24
		(*g_Timer0CallBackPtr)();
    2cc2:	e0 91 51 01 	lds	r30, 0x0151
    2cc6:	f0 91 52 01 	lds	r31, 0x0152
    2cca:	09 95       	icall
	}
}
    2ccc:	cf 91       	pop	r28
    2cce:	df 91       	pop	r29
    2cd0:	ff 91       	pop	r31
    2cd2:	ef 91       	pop	r30
    2cd4:	bf 91       	pop	r27
    2cd6:	af 91       	pop	r26
    2cd8:	9f 91       	pop	r25
    2cda:	8f 91       	pop	r24
    2cdc:	7f 91       	pop	r23
    2cde:	6f 91       	pop	r22
    2ce0:	5f 91       	pop	r21
    2ce2:	4f 91       	pop	r20
    2ce4:	3f 91       	pop	r19
    2ce6:	2f 91       	pop	r18
    2ce8:	0f 90       	pop	r0
    2cea:	0f be       	out	0x3f, r0	; 63
    2cec:	0f 90       	pop	r0
    2cee:	1f 90       	pop	r1
    2cf0:	18 95       	reti

00002cf2 <__vector_19>:

ISR(TIMER0_COMP_vect){
    2cf2:	1f 92       	push	r1
    2cf4:	0f 92       	push	r0
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	0f 92       	push	r0
    2cfa:	11 24       	eor	r1, r1
    2cfc:	2f 93       	push	r18
    2cfe:	3f 93       	push	r19
    2d00:	4f 93       	push	r20
    2d02:	5f 93       	push	r21
    2d04:	6f 93       	push	r22
    2d06:	7f 93       	push	r23
    2d08:	8f 93       	push	r24
    2d0a:	9f 93       	push	r25
    2d0c:	af 93       	push	r26
    2d0e:	bf 93       	push	r27
    2d10:	ef 93       	push	r30
    2d12:	ff 93       	push	r31
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0CallBackPtr != NULL_PTR)
    2d1c:	80 91 51 01 	lds	r24, 0x0151
    2d20:	90 91 52 01 	lds	r25, 0x0152
    2d24:	00 97       	sbiw	r24, 0x00	; 0
    2d26:	29 f0       	breq	.+10     	; 0x2d32 <__vector_19+0x40>
	{

		(*g_Timer0CallBackPtr)();
    2d28:	e0 91 51 01 	lds	r30, 0x0151
    2d2c:	f0 91 52 01 	lds	r31, 0x0152
    2d30:	09 95       	icall
	}
}
    2d32:	cf 91       	pop	r28
    2d34:	df 91       	pop	r29
    2d36:	ff 91       	pop	r31
    2d38:	ef 91       	pop	r30
    2d3a:	bf 91       	pop	r27
    2d3c:	af 91       	pop	r26
    2d3e:	9f 91       	pop	r25
    2d40:	8f 91       	pop	r24
    2d42:	7f 91       	pop	r23
    2d44:	6f 91       	pop	r22
    2d46:	5f 91       	pop	r21
    2d48:	4f 91       	pop	r20
    2d4a:	3f 91       	pop	r19
    2d4c:	2f 91       	pop	r18
    2d4e:	0f 90       	pop	r0
    2d50:	0f be       	out	0x3f, r0	; 63
    2d52:	0f 90       	pop	r0
    2d54:	1f 90       	pop	r1
    2d56:	18 95       	reti

00002d58 <__vector_8>:


/*****************************************************************************************
                                      timer1 ISRs
*****************************************************************************************/
ISR(TIMER1_OVF_vect){
    2d58:	1f 92       	push	r1
    2d5a:	0f 92       	push	r0
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	0f 92       	push	r0
    2d60:	11 24       	eor	r1, r1
    2d62:	2f 93       	push	r18
    2d64:	3f 93       	push	r19
    2d66:	4f 93       	push	r20
    2d68:	5f 93       	push	r21
    2d6a:	6f 93       	push	r22
    2d6c:	7f 93       	push	r23
    2d6e:	8f 93       	push	r24
    2d70:	9f 93       	push	r25
    2d72:	af 93       	push	r26
    2d74:	bf 93       	push	r27
    2d76:	ef 93       	push	r30
    2d78:	ff 93       	push	r31
    2d7a:	df 93       	push	r29
    2d7c:	cf 93       	push	r28
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62

	if(g_Timer1CallBackPtr != NULL_PTR)
    2d82:	80 91 53 01 	lds	r24, 0x0153
    2d86:	90 91 54 01 	lds	r25, 0x0154
    2d8a:	00 97       	sbiw	r24, 0x00	; 0
    2d8c:	69 f0       	breq	.+26     	; 0x2da8 <__vector_8+0x50>
	{
		TCNT1 = timer1_ovf_initial_value; /*in case of overflow mode initialize the timer with value specified from user each time*/
    2d8e:	ec e4       	ldi	r30, 0x4C	; 76
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 91 58 01 	lds	r24, 0x0158
    2d96:	90 91 59 01 	lds	r25, 0x0159
    2d9a:	91 83       	std	Z+1, r25	; 0x01
    2d9c:	80 83       	st	Z, r24
		(*g_Timer1CallBackPtr)();
    2d9e:	e0 91 53 01 	lds	r30, 0x0153
    2da2:	f0 91 54 01 	lds	r31, 0x0154
    2da6:	09 95       	icall
	}
}
    2da8:	cf 91       	pop	r28
    2daa:	df 91       	pop	r29
    2dac:	ff 91       	pop	r31
    2dae:	ef 91       	pop	r30
    2db0:	bf 91       	pop	r27
    2db2:	af 91       	pop	r26
    2db4:	9f 91       	pop	r25
    2db6:	8f 91       	pop	r24
    2db8:	7f 91       	pop	r23
    2dba:	6f 91       	pop	r22
    2dbc:	5f 91       	pop	r21
    2dbe:	4f 91       	pop	r20
    2dc0:	3f 91       	pop	r19
    2dc2:	2f 91       	pop	r18
    2dc4:	0f 90       	pop	r0
    2dc6:	0f be       	out	0x3f, r0	; 63
    2dc8:	0f 90       	pop	r0
    2dca:	1f 90       	pop	r1
    2dcc:	18 95       	reti

00002dce <__vector_6>:

ISR(TIMER1_COMPA_vect){
    2dce:	1f 92       	push	r1
    2dd0:	0f 92       	push	r0
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	0f 92       	push	r0
    2dd6:	11 24       	eor	r1, r1
    2dd8:	2f 93       	push	r18
    2dda:	3f 93       	push	r19
    2ddc:	4f 93       	push	r20
    2dde:	5f 93       	push	r21
    2de0:	6f 93       	push	r22
    2de2:	7f 93       	push	r23
    2de4:	8f 93       	push	r24
    2de6:	9f 93       	push	r25
    2de8:	af 93       	push	r26
    2dea:	bf 93       	push	r27
    2dec:	ef 93       	push	r30
    2dee:	ff 93       	push	r31
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1CallBackPtr != NULL_PTR)
    2df8:	80 91 53 01 	lds	r24, 0x0153
    2dfc:	90 91 54 01 	lds	r25, 0x0154
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	29 f0       	breq	.+10     	; 0x2e0e <__vector_6+0x40>
	{
		(*g_Timer1CallBackPtr)();
    2e04:	e0 91 53 01 	lds	r30, 0x0153
    2e08:	f0 91 54 01 	lds	r31, 0x0154
    2e0c:	09 95       	icall
	}
}
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	ff 91       	pop	r31
    2e14:	ef 91       	pop	r30
    2e16:	bf 91       	pop	r27
    2e18:	af 91       	pop	r26
    2e1a:	9f 91       	pop	r25
    2e1c:	8f 91       	pop	r24
    2e1e:	7f 91       	pop	r23
    2e20:	6f 91       	pop	r22
    2e22:	5f 91       	pop	r21
    2e24:	4f 91       	pop	r20
    2e26:	3f 91       	pop	r19
    2e28:	2f 91       	pop	r18
    2e2a:	0f 90       	pop	r0
    2e2c:	0f be       	out	0x3f, r0	; 63
    2e2e:	0f 90       	pop	r0
    2e30:	1f 90       	pop	r1
    2e32:	18 95       	reti

00002e34 <__vector_4>:

/*****************************************************************************************
                                      timer2 ISRs
*****************************************************************************************/
ISR(TIMER2_OVF_vect){
    2e34:	1f 92       	push	r1
    2e36:	0f 92       	push	r0
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	0f 92       	push	r0
    2e3c:	11 24       	eor	r1, r1
    2e3e:	2f 93       	push	r18
    2e40:	3f 93       	push	r19
    2e42:	4f 93       	push	r20
    2e44:	5f 93       	push	r21
    2e46:	6f 93       	push	r22
    2e48:	7f 93       	push	r23
    2e4a:	8f 93       	push	r24
    2e4c:	9f 93       	push	r25
    2e4e:	af 93       	push	r26
    2e50:	bf 93       	push	r27
    2e52:	ef 93       	push	r30
    2e54:	ff 93       	push	r31
    2e56:	df 93       	push	r29
    2e58:	cf 93       	push	r28
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62

	if(g_Timer2CallBackPtr != NULL_PTR)
    2e5e:	80 91 55 01 	lds	r24, 0x0155
    2e62:	90 91 56 01 	lds	r25, 0x0156
    2e66:	00 97       	sbiw	r24, 0x00	; 0
    2e68:	51 f0       	breq	.+20     	; 0x2e7e <__vector_4+0x4a>
	{
		TCNT2 = timer2_ovf_initial_value; /*in case of overflow mode initialize the timer with value specified from user each time*/
    2e6a:	e4 e4       	ldi	r30, 0x44	; 68
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 91 5a 01 	lds	r24, 0x015A
    2e72:	80 83       	st	Z, r24
		(*g_Timer2CallBackPtr)();
    2e74:	e0 91 55 01 	lds	r30, 0x0155
    2e78:	f0 91 56 01 	lds	r31, 0x0156
    2e7c:	09 95       	icall
	}
}
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	ff 91       	pop	r31
    2e84:	ef 91       	pop	r30
    2e86:	bf 91       	pop	r27
    2e88:	af 91       	pop	r26
    2e8a:	9f 91       	pop	r25
    2e8c:	8f 91       	pop	r24
    2e8e:	7f 91       	pop	r23
    2e90:	6f 91       	pop	r22
    2e92:	5f 91       	pop	r21
    2e94:	4f 91       	pop	r20
    2e96:	3f 91       	pop	r19
    2e98:	2f 91       	pop	r18
    2e9a:	0f 90       	pop	r0
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	0f 90       	pop	r0
    2ea0:	1f 90       	pop	r1
    2ea2:	18 95       	reti

00002ea4 <__vector_3>:

ISR(TIMER2_COMP_vect){
    2ea4:	1f 92       	push	r1
    2ea6:	0f 92       	push	r0
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	0f 92       	push	r0
    2eac:	11 24       	eor	r1, r1
    2eae:	2f 93       	push	r18
    2eb0:	3f 93       	push	r19
    2eb2:	4f 93       	push	r20
    2eb4:	5f 93       	push	r21
    2eb6:	6f 93       	push	r22
    2eb8:	7f 93       	push	r23
    2eba:	8f 93       	push	r24
    2ebc:	9f 93       	push	r25
    2ebe:	af 93       	push	r26
    2ec0:	bf 93       	push	r27
    2ec2:	ef 93       	push	r30
    2ec4:	ff 93       	push	r31
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2CallBackPtr!= NULL_PTR)
    2ece:	80 91 55 01 	lds	r24, 0x0155
    2ed2:	90 91 56 01 	lds	r25, 0x0156
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	29 f0       	breq	.+10     	; 0x2ee4 <__vector_3+0x40>
	{
		(*g_Timer2CallBackPtr)();
    2eda:	e0 91 55 01 	lds	r30, 0x0155
    2ede:	f0 91 56 01 	lds	r31, 0x0156
    2ee2:	09 95       	icall
	}
}
    2ee4:	cf 91       	pop	r28
    2ee6:	df 91       	pop	r29
    2ee8:	ff 91       	pop	r31
    2eea:	ef 91       	pop	r30
    2eec:	bf 91       	pop	r27
    2eee:	af 91       	pop	r26
    2ef0:	9f 91       	pop	r25
    2ef2:	8f 91       	pop	r24
    2ef4:	7f 91       	pop	r23
    2ef6:	6f 91       	pop	r22
    2ef8:	5f 91       	pop	r21
    2efa:	4f 91       	pop	r20
    2efc:	3f 91       	pop	r19
    2efe:	2f 91       	pop	r18
    2f00:	0f 90       	pop	r0
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	0f 90       	pop	r0
    2f06:	1f 90       	pop	r1
    2f08:	18 95       	reti

00002f0a <Timer_init>:
 * -set the mode of the timer overflow or compare
 * -set the clock source clock and prescaler
 * -if in compare mode set compare value
 * return: none
 * */
void Timer_init(const Timer_ConfigType * Config_Ptr){
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	00 d0       	rcall	.+0      	; 0x2f10 <Timer_init+0x6>
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    2f14:	9a 83       	std	Y+2, r25	; 0x02
    2f16:	89 83       	std	Y+1, r24	; 0x01
	/*initialize timer0*/
	if(Config_Ptr ->timer_id == TIMER0_ID){
    2f18:	e9 81       	ldd	r30, Y+1	; 0x01
    2f1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f1c:	80 81       	ld	r24, Z
    2f1e:	88 23       	and	r24, r24
    2f20:	09 f0       	breq	.+2      	; 0x2f24 <Timer_init+0x1a>
    2f22:	55 c0       	rjmp	.+170    	; 0x2fce <Timer_init+0xc4>
		SET_BIT(TCCR0,FOC0); /*this bit is set when we operate in non-PWM*/
    2f24:	a3 e5       	ldi	r26, 0x53	; 83
    2f26:	b0 e0       	ldi	r27, 0x00	; 0
    2f28:	e3 e5       	ldi	r30, 0x53	; 83
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	80 68       	ori	r24, 0x80	; 128
    2f30:	8c 93       	st	X, r24
		/*save initial value in case of overflow mode to start count from it*/
		timer0_ovf_initial_value = Config_Ptr->initial_value;
    2f32:	e9 81       	ldd	r30, Y+1	; 0x01
    2f34:	fa 81       	ldd	r31, Y+2	; 0x02
    2f36:	83 81       	ldd	r24, Z+3	; 0x03
    2f38:	80 93 57 01 	sts	0x0157, r24
		TCNT0 = Config_Ptr->initial_value; /*set timer initial value*/
    2f3c:	a2 e5       	ldi	r26, 0x52	; 82
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	e9 81       	ldd	r30, Y+1	; 0x01
    2f42:	fa 81       	ldd	r31, Y+2	; 0x02
    2f44:	83 81       	ldd	r24, Z+3	; 0x03
    2f46:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xB7) | (((Config_Ptr->mode)<<3)&0x08); /*set timer mode compare or overflow*/
    2f48:	a3 e5       	ldi	r26, 0x53	; 83
    2f4a:	b0 e0       	ldi	r27, 0x00	; 0
    2f4c:	e3 e5       	ldi	r30, 0x53	; 83
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	28 2f       	mov	r18, r24
    2f54:	27 7b       	andi	r18, 0xB7	; 183
    2f56:	e9 81       	ldd	r30, Y+1	; 0x01
    2f58:	fa 81       	ldd	r31, Y+2	; 0x02
    2f5a:	81 81       	ldd	r24, Z+1	; 0x01
    2f5c:	88 2f       	mov	r24, r24
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	88 0f       	add	r24, r24
    2f62:	99 1f       	adc	r25, r25
    2f64:	88 0f       	add	r24, r24
    2f66:	99 1f       	adc	r25, r25
    2f68:	88 0f       	add	r24, r24
    2f6a:	99 1f       	adc	r25, r25
    2f6c:	88 70       	andi	r24, 0x08	; 8
    2f6e:	82 2b       	or	r24, r18
    2f70:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | ((Config_Ptr->clock)&0x07); /*set timer source clock and prescaler*/
    2f72:	a3 e5       	ldi	r26, 0x53	; 83
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	e3 e5       	ldi	r30, 0x53	; 83
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	98 2f       	mov	r25, r24
    2f7e:	98 7f       	andi	r25, 0xF8	; 248
    2f80:	e9 81       	ldd	r30, Y+1	; 0x01
    2f82:	fa 81       	ldd	r31, Y+2	; 0x02
    2f84:	82 81       	ldd	r24, Z+2	; 0x02
    2f86:	87 70       	andi	r24, 0x07	; 7
    2f88:	89 2b       	or	r24, r25
    2f8a:	8c 93       	st	X, r24
		OCR0 = Config_Ptr->compare_value; /*set compare value*/
    2f8c:	ac e5       	ldi	r26, 0x5C	; 92
    2f8e:	b0 e0       	ldi	r27, 0x00	; 0
    2f90:	e9 81       	ldd	r30, Y+1	; 0x01
    2f92:	fa 81       	ldd	r31, Y+2	; 0x02
    2f94:	84 81       	ldd	r24, Z+4	; 0x04
    2f96:	8c 93       	st	X, r24

		if(Config_Ptr->mode == NORMAL){
    2f98:	e9 81       	ldd	r30, Y+1	; 0x01
    2f9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f9c:	81 81       	ldd	r24, Z+1	; 0x01
    2f9e:	88 23       	and	r24, r24
    2fa0:	41 f4       	brne	.+16     	; 0x2fb2 <Timer_init+0xa8>
			SET_BIT(TIMSK,TOIE0); /*enable interrupt for timer0 in overflow mode*/
    2fa2:	a9 e5       	ldi	r26, 0x59	; 89
    2fa4:	b0 e0       	ldi	r27, 0x00	; 0
    2fa6:	e9 e5       	ldi	r30, 0x59	; 89
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	80 81       	ld	r24, Z
    2fac:	81 60       	ori	r24, 0x01	; 1
    2fae:	8c 93       	st	X, r24
    2fb0:	ce c0       	rjmp	.+412    	; 0x314e <Timer_init+0x244>
		}
		else if(Config_Ptr->mode == COMPARE){
    2fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    2fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb6:	81 81       	ldd	r24, Z+1	; 0x01
    2fb8:	81 30       	cpi	r24, 0x01	; 1
    2fba:	09 f0       	breq	.+2      	; 0x2fbe <Timer_init+0xb4>
    2fbc:	c8 c0       	rjmp	.+400    	; 0x314e <Timer_init+0x244>
			SET_BIT(TIMSK,OCIE0); /*enable interrupt for timer0 in compare mode*/
    2fbe:	a9 e5       	ldi	r26, 0x59	; 89
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
    2fc2:	e9 e5       	ldi	r30, 0x59	; 89
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	80 81       	ld	r24, Z
    2fc8:	82 60       	ori	r24, 0x02	; 2
    2fca:	8c 93       	st	X, r24
    2fcc:	c0 c0       	rjmp	.+384    	; 0x314e <Timer_init+0x244>
		}
	}

	/*initialize timer1*/
	else if(Config_Ptr->timer_id == TIMER1_ID){
    2fce:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd2:	80 81       	ld	r24, Z
    2fd4:	81 30       	cpi	r24, 0x01	; 1
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <Timer_init+0xd0>
    2fd8:	61 c0       	rjmp	.+194    	; 0x309c <Timer_init+0x192>
		SET_BIT(TCCR1A,FOC1A);/*this bit is set when we operate in non-PWM*/
    2fda:	af e4       	ldi	r26, 0x4F	; 79
    2fdc:	b0 e0       	ldi	r27, 0x00	; 0
    2fde:	ef e4       	ldi	r30, 0x4F	; 79
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	80 81       	ld	r24, Z
    2fe4:	88 60       	ori	r24, 0x08	; 8
    2fe6:	8c 93       	st	X, r24
		/*save initial value in case of overflow mode to start count from it*/
		timer1_ovf_initial_value = Config_Ptr->initial_value;
    2fe8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fea:	fa 81       	ldd	r31, Y+2	; 0x02
    2fec:	83 81       	ldd	r24, Z+3	; 0x03
    2fee:	88 2f       	mov	r24, r24
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	90 93 59 01 	sts	0x0159, r25
    2ff6:	80 93 58 01 	sts	0x0158, r24
		TCNT1 = Config_Ptr->initial_value;/*set timer initial value*/
    2ffa:	ac e4       	ldi	r26, 0x4C	; 76
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    3000:	fa 81       	ldd	r31, Y+2	; 0x02
    3002:	83 81       	ldd	r24, Z+3	; 0x03
    3004:	88 2f       	mov	r24, r24
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	11 96       	adiw	r26, 0x01	; 1
    300a:	9c 93       	st	X, r25
    300c:	8e 93       	st	-X, r24
		TCCR1B = (TCCR1B & 0xE7) | (((Config_Ptr->mode)<<3)&0x08);/*set timer mode compare or overflow*/
    300e:	ae e4       	ldi	r26, 0x4E	; 78
    3010:	b0 e0       	ldi	r27, 0x00	; 0
    3012:	ee e4       	ldi	r30, 0x4E	; 78
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	80 81       	ld	r24, Z
    3018:	28 2f       	mov	r18, r24
    301a:	27 7e       	andi	r18, 0xE7	; 231
    301c:	e9 81       	ldd	r30, Y+1	; 0x01
    301e:	fa 81       	ldd	r31, Y+2	; 0x02
    3020:	81 81       	ldd	r24, Z+1	; 0x01
    3022:	88 2f       	mov	r24, r24
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	88 0f       	add	r24, r24
    3028:	99 1f       	adc	r25, r25
    302a:	88 0f       	add	r24, r24
    302c:	99 1f       	adc	r25, r25
    302e:	88 0f       	add	r24, r24
    3030:	99 1f       	adc	r25, r25
    3032:	88 70       	andi	r24, 0x08	; 8
    3034:	82 2b       	or	r24, r18
    3036:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr->clock)&0x07);/*set timer source clock and prescaler*/
    3038:	ae e4       	ldi	r26, 0x4E	; 78
    303a:	b0 e0       	ldi	r27, 0x00	; 0
    303c:	ee e4       	ldi	r30, 0x4E	; 78
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	80 81       	ld	r24, Z
    3042:	98 2f       	mov	r25, r24
    3044:	98 7f       	andi	r25, 0xF8	; 248
    3046:	e9 81       	ldd	r30, Y+1	; 0x01
    3048:	fa 81       	ldd	r31, Y+2	; 0x02
    304a:	82 81       	ldd	r24, Z+2	; 0x02
    304c:	87 70       	andi	r24, 0x07	; 7
    304e:	89 2b       	or	r24, r25
    3050:	8c 93       	st	X, r24
		OCR1A = Config_Ptr->compare_value;/*set compare value*/
    3052:	aa e4       	ldi	r26, 0x4A	; 74
    3054:	b0 e0       	ldi	r27, 0x00	; 0
    3056:	e9 81       	ldd	r30, Y+1	; 0x01
    3058:	fa 81       	ldd	r31, Y+2	; 0x02
    305a:	84 81       	ldd	r24, Z+4	; 0x04
    305c:	88 2f       	mov	r24, r24
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	11 96       	adiw	r26, 0x01	; 1
    3062:	9c 93       	st	X, r25
    3064:	8e 93       	st	-X, r24

		if(Config_Ptr->mode == NORMAL){
    3066:	e9 81       	ldd	r30, Y+1	; 0x01
    3068:	fa 81       	ldd	r31, Y+2	; 0x02
    306a:	81 81       	ldd	r24, Z+1	; 0x01
    306c:	88 23       	and	r24, r24
    306e:	41 f4       	brne	.+16     	; 0x3080 <Timer_init+0x176>
			SET_BIT(TIMSK,TOIE1); /*enable interrupt for timer1 in overflow mode*/
    3070:	a9 e5       	ldi	r26, 0x59	; 89
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	e9 e5       	ldi	r30, 0x59	; 89
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	84 60       	ori	r24, 0x04	; 4
    307c:	8c 93       	st	X, r24
    307e:	67 c0       	rjmp	.+206    	; 0x314e <Timer_init+0x244>
		}
		else if(Config_Ptr->mode == COMPARE){
    3080:	e9 81       	ldd	r30, Y+1	; 0x01
    3082:	fa 81       	ldd	r31, Y+2	; 0x02
    3084:	81 81       	ldd	r24, Z+1	; 0x01
    3086:	81 30       	cpi	r24, 0x01	; 1
    3088:	09 f0       	breq	.+2      	; 0x308c <Timer_init+0x182>
    308a:	61 c0       	rjmp	.+194    	; 0x314e <Timer_init+0x244>
			SET_BIT(TIMSK,OCIE1A); /*enable interrupt for timer1 in compare mode*/
    308c:	a9 e5       	ldi	r26, 0x59	; 89
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	e9 e5       	ldi	r30, 0x59	; 89
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	80 61       	ori	r24, 0x10	; 16
    3098:	8c 93       	st	X, r24
    309a:	59 c0       	rjmp	.+178    	; 0x314e <Timer_init+0x244>
		}
	}
	/*initialize timer2*/
	else if(Config_Ptr ->timer_id == TIMER2_ID){
    309c:	e9 81       	ldd	r30, Y+1	; 0x01
    309e:	fa 81       	ldd	r31, Y+2	; 0x02
    30a0:	80 81       	ld	r24, Z
    30a2:	82 30       	cpi	r24, 0x02	; 2
    30a4:	09 f0       	breq	.+2      	; 0x30a8 <Timer_init+0x19e>
    30a6:	53 c0       	rjmp	.+166    	; 0x314e <Timer_init+0x244>

		SET_BIT(TCCR2,FOC2);/*this bit is set when we operate in non-PWM*/
    30a8:	a5 e4       	ldi	r26, 0x45	; 69
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	e5 e4       	ldi	r30, 0x45	; 69
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	80 81       	ld	r24, Z
    30b2:	80 68       	ori	r24, 0x80	; 128
    30b4:	8c 93       	st	X, r24
		/*save initial value in case of overflow mode to start count from it*/
		timer2_ovf_initial_value = Config_Ptr->initial_value;
    30b6:	e9 81       	ldd	r30, Y+1	; 0x01
    30b8:	fa 81       	ldd	r31, Y+2	; 0x02
    30ba:	83 81       	ldd	r24, Z+3	; 0x03
    30bc:	80 93 5a 01 	sts	0x015A, r24
		TCNT2 = Config_Ptr->initial_value;/*set timer initial value*/
    30c0:	a4 e4       	ldi	r26, 0x44	; 68
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	e9 81       	ldd	r30, Y+1	; 0x01
    30c6:	fa 81       	ldd	r31, Y+2	; 0x02
    30c8:	83 81       	ldd	r24, Z+3	; 0x03
    30ca:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xB7) | (((Config_Ptr->mode)<<3)&0x08);/*set timer mode compare or overflow*/
    30cc:	a5 e4       	ldi	r26, 0x45	; 69
    30ce:	b0 e0       	ldi	r27, 0x00	; 0
    30d0:	e5 e4       	ldi	r30, 0x45	; 69
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	80 81       	ld	r24, Z
    30d6:	28 2f       	mov	r18, r24
    30d8:	27 7b       	andi	r18, 0xB7	; 183
    30da:	e9 81       	ldd	r30, Y+1	; 0x01
    30dc:	fa 81       	ldd	r31, Y+2	; 0x02
    30de:	81 81       	ldd	r24, Z+1	; 0x01
    30e0:	88 2f       	mov	r24, r24
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	88 0f       	add	r24, r24
    30e6:	99 1f       	adc	r25, r25
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	88 0f       	add	r24, r24
    30ee:	99 1f       	adc	r25, r25
    30f0:	88 70       	andi	r24, 0x08	; 8
    30f2:	82 2b       	or	r24, r18
    30f4:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xF8) | ((Config_Ptr->clock)&0x07);/*set timer source clock and prescaler*/
    30f6:	a5 e4       	ldi	r26, 0x45	; 69
    30f8:	b0 e0       	ldi	r27, 0x00	; 0
    30fa:	e5 e4       	ldi	r30, 0x45	; 69
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	80 81       	ld	r24, Z
    3100:	98 2f       	mov	r25, r24
    3102:	98 7f       	andi	r25, 0xF8	; 248
    3104:	e9 81       	ldd	r30, Y+1	; 0x01
    3106:	fa 81       	ldd	r31, Y+2	; 0x02
    3108:	82 81       	ldd	r24, Z+2	; 0x02
    310a:	87 70       	andi	r24, 0x07	; 7
    310c:	89 2b       	or	r24, r25
    310e:	8c 93       	st	X, r24
		OCR2 = Config_Ptr->compare_value;/*set compare value*/
    3110:	a3 e4       	ldi	r26, 0x43	; 67
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	e9 81       	ldd	r30, Y+1	; 0x01
    3116:	fa 81       	ldd	r31, Y+2	; 0x02
    3118:	84 81       	ldd	r24, Z+4	; 0x04
    311a:	8c 93       	st	X, r24

		if(Config_Ptr->mode == NORMAL){
    311c:	e9 81       	ldd	r30, Y+1	; 0x01
    311e:	fa 81       	ldd	r31, Y+2	; 0x02
    3120:	81 81       	ldd	r24, Z+1	; 0x01
    3122:	88 23       	and	r24, r24
    3124:	41 f4       	brne	.+16     	; 0x3136 <Timer_init+0x22c>
			SET_BIT(TIMSK,TOIE2); /*enable interrupt for timer2 in overflow mode*/
    3126:	a9 e5       	ldi	r26, 0x59	; 89
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	e9 e5       	ldi	r30, 0x59	; 89
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	80 64       	ori	r24, 0x40	; 64
    3132:	8c 93       	st	X, r24
    3134:	0c c0       	rjmp	.+24     	; 0x314e <Timer_init+0x244>
		}
		else if(Config_Ptr->mode == COMPARE){
    3136:	e9 81       	ldd	r30, Y+1	; 0x01
    3138:	fa 81       	ldd	r31, Y+2	; 0x02
    313a:	81 81       	ldd	r24, Z+1	; 0x01
    313c:	81 30       	cpi	r24, 0x01	; 1
    313e:	39 f4       	brne	.+14     	; 0x314e <Timer_init+0x244>
			SET_BIT(TIMSK,OCIE2);/*enable interrupt for timer2 in compare mode*/
    3140:	a9 e5       	ldi	r26, 0x59	; 89
    3142:	b0 e0       	ldi	r27, 0x00	; 0
    3144:	e9 e5       	ldi	r30, 0x59	; 89
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	80 81       	ld	r24, Z
    314a:	80 68       	ori	r24, 0x80	; 128
    314c:	8c 93       	st	X, r24

	else{
		/*do nothing*/
	}

}
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
    3152:	cf 91       	pop	r28
    3154:	df 91       	pop	r29
    3156:	08 95       	ret

00003158 <Timer0_setCallBack>:

/*@description: function to set the call back function address of timer0
 * param1:address of the call back function
 * return: none
 * */
void Timer0_setCallBack(void(*a_ptr)(void)){
    3158:	df 93       	push	r29
    315a:	cf 93       	push	r28
    315c:	00 d0       	rcall	.+0      	; 0x315e <Timer0_setCallBack+0x6>
    315e:	cd b7       	in	r28, 0x3d	; 61
    3160:	de b7       	in	r29, 0x3e	; 62
    3162:	9a 83       	std	Y+2, r25	; 0x02
    3164:	89 83       	std	Y+1, r24	; 0x01
	g_Timer0CallBackPtr = a_ptr;
    3166:	89 81       	ldd	r24, Y+1	; 0x01
    3168:	9a 81       	ldd	r25, Y+2	; 0x02
    316a:	90 93 52 01 	sts	0x0152, r25
    316e:	80 93 51 01 	sts	0x0151, r24
}
    3172:	0f 90       	pop	r0
    3174:	0f 90       	pop	r0
    3176:	cf 91       	pop	r28
    3178:	df 91       	pop	r29
    317a:	08 95       	ret

0000317c <Timer1_setCallBack>:

/*@description: function to set the call back function address of timer1
 * param1:address of the call back function
 * return: none
 * */
void Timer1_setCallBack(void(*a_ptr)(void)){
    317c:	df 93       	push	r29
    317e:	cf 93       	push	r28
    3180:	00 d0       	rcall	.+0      	; 0x3182 <Timer1_setCallBack+0x6>
    3182:	cd b7       	in	r28, 0x3d	; 61
    3184:	de b7       	in	r29, 0x3e	; 62
    3186:	9a 83       	std	Y+2, r25	; 0x02
    3188:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1CallBackPtr = a_ptr;
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	9a 81       	ldd	r25, Y+2	; 0x02
    318e:	90 93 54 01 	sts	0x0154, r25
    3192:	80 93 53 01 	sts	0x0153, r24
}
    3196:	0f 90       	pop	r0
    3198:	0f 90       	pop	r0
    319a:	cf 91       	pop	r28
    319c:	df 91       	pop	r29
    319e:	08 95       	ret

000031a0 <Timer2_setCallBack>:

/*@description: function to set the call back function address of timer2
 * param1:address of the call back function
 * return: none
 * */
void Timer2_setCallBack(void(*a_ptr)(void)){
    31a0:	df 93       	push	r29
    31a2:	cf 93       	push	r28
    31a4:	00 d0       	rcall	.+0      	; 0x31a6 <Timer2_setCallBack+0x6>
    31a6:	cd b7       	in	r28, 0x3d	; 61
    31a8:	de b7       	in	r29, 0x3e	; 62
    31aa:	9a 83       	std	Y+2, r25	; 0x02
    31ac:	89 83       	std	Y+1, r24	; 0x01
	g_Timer2CallBackPtr = a_ptr;
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	9a 81       	ldd	r25, Y+2	; 0x02
    31b2:	90 93 56 01 	sts	0x0156, r25
    31b6:	80 93 55 01 	sts	0x0155, r24
}
    31ba:	0f 90       	pop	r0
    31bc:	0f 90       	pop	r0
    31be:	cf 91       	pop	r28
    31c0:	df 91       	pop	r29
    31c2:	08 95       	ret

000031c4 <Timer_DeInit>:

/*@description: function to disable the timer
 * param1: Timer_Id to specify which timer to stop
 * return: none
 * */
void Timer_DeInit(Timer_Id timer_id){
    31c4:	df 93       	push	r29
    31c6:	cf 93       	push	r28
    31c8:	0f 92       	push	r0
    31ca:	cd b7       	in	r28, 0x3d	; 61
    31cc:	de b7       	in	r29, 0x3e	; 62
    31ce:	89 83       	std	Y+1, r24	; 0x01
	/*disable timer0*/
	if(timer_id == TIMER0_ID){
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
    31d2:	88 23       	and	r24, r24
    31d4:	c1 f4       	brne	.+48     	; 0x3206 <Timer_DeInit+0x42>
		TCCR0 = 0;
    31d6:	e3 e5       	ldi	r30, 0x53	; 83
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	10 82       	st	Z, r1
		TCNT0 = 0;
    31dc:	e2 e5       	ldi	r30, 0x52	; 82
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	10 82       	st	Z, r1
		OCR0 = 0;
    31e2:	ec e5       	ldi	r30, 0x5C	; 92
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0);
    31e8:	a9 e5       	ldi	r26, 0x59	; 89
    31ea:	b0 e0       	ldi	r27, 0x00	; 0
    31ec:	e9 e5       	ldi	r30, 0x59	; 89
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	8d 7f       	andi	r24, 0xFD	; 253
    31f4:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0);
    31f6:	a9 e5       	ldi	r26, 0x59	; 89
    31f8:	b0 e0       	ldi	r27, 0x00	; 0
    31fa:	e9 e5       	ldi	r30, 0x59	; 89
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	80 81       	ld	r24, Z
    3200:	8e 7f       	andi	r24, 0xFE	; 254
    3202:	8c 93       	st	X, r24
    3204:	3a c0       	rjmp	.+116    	; 0x327a <Timer_DeInit+0xb6>
	}
	/*disable timer1*/
	else if(timer_id == TIMER1_ID){
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	81 30       	cpi	r24, 0x01	; 1
    320a:	e9 f4       	brne	.+58     	; 0x3246 <Timer_DeInit+0x82>
		TCCR1A = 0;
    320c:	ef e4       	ldi	r30, 0x4F	; 79
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	10 82       	st	Z, r1
		TCCR1B = 0;
    3212:	ee e4       	ldi	r30, 0x4E	; 78
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	10 82       	st	Z, r1
		OCR1A = 0;
    3218:	ea e4       	ldi	r30, 0x4A	; 74
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	11 82       	std	Z+1, r1	; 0x01
    321e:	10 82       	st	Z, r1
		TCNT1 = 0;
    3220:	ec e4       	ldi	r30, 0x4C	; 76
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	11 82       	std	Z+1, r1	; 0x01
    3226:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE2);
    3228:	a9 e5       	ldi	r26, 0x59	; 89
    322a:	b0 e0       	ldi	r27, 0x00	; 0
    322c:	e9 e5       	ldi	r30, 0x59	; 89
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	80 81       	ld	r24, Z
    3232:	8f 7b       	andi	r24, 0xBF	; 191
    3234:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE2);
    3236:	a9 e5       	ldi	r26, 0x59	; 89
    3238:	b0 e0       	ldi	r27, 0x00	; 0
    323a:	e9 e5       	ldi	r30, 0x59	; 89
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	80 81       	ld	r24, Z
    3240:	8f 77       	andi	r24, 0x7F	; 127
    3242:	8c 93       	st	X, r24
    3244:	1a c0       	rjmp	.+52     	; 0x327a <Timer_DeInit+0xb6>

	}
	/*disable timer2*/
	else if(timer_id == TIMER2_ID){
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	82 30       	cpi	r24, 0x02	; 2
    324a:	b9 f4       	brne	.+46     	; 0x327a <Timer_DeInit+0xb6>
		TCCR2 = 0;
    324c:	e5 e4       	ldi	r30, 0x45	; 69
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	10 82       	st	Z, r1
		TCNT2 = 0;
    3252:	e4 e4       	ldi	r30, 0x44	; 68
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	10 82       	st	Z, r1
		OCR2 = 0;
    3258:	e3 e4       	ldi	r30, 0x43	; 67
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE2);
    325e:	a9 e5       	ldi	r26, 0x59	; 89
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	e9 e5       	ldi	r30, 0x59	; 89
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	80 81       	ld	r24, Z
    3268:	8f 77       	andi	r24, 0x7F	; 127
    326a:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE2);
    326c:	a9 e5       	ldi	r26, 0x59	; 89
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	e9 e5       	ldi	r30, 0x59	; 89
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 81       	ld	r24, Z
    3276:	8f 7b       	andi	r24, 0xBF	; 191
    3278:	8c 93       	st	X, r24
	}
	else{
		/*do nothing*/
	}
}
    327a:	0f 90       	pop	r0
    327c:	cf 91       	pop	r28
    327e:	df 91       	pop	r29
    3280:	08 95       	ret

00003282 <UART_init>:
 * -set baud rate
 * param1: pointer to configuration structure
 * return: none
 * */

void UART_init(const Uart_ConfigType *Config_Ptr){
    3282:	df 93       	push	r29
    3284:	cf 93       	push	r28
    3286:	00 d0       	rcall	.+0      	; 0x3288 <UART_init+0x6>
    3288:	00 d0       	rcall	.+0      	; 0x328a <UART_init+0x8>
    328a:	cd b7       	in	r28, 0x3d	; 61
    328c:	de b7       	in	r29, 0x3e	; 62
    328e:	9c 83       	std	Y+4, r25	; 0x04
    3290:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3292:	1a 82       	std	Y+2, r1	; 0x02
    3294:	19 82       	std	Y+1, r1	; 0x01
	UCSRA = (1<<U2X);/*double transmission speed*/
    3296:	eb e2       	ldi	r30, 0x2B	; 43
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	82 e0       	ldi	r24, 0x02	; 2
    329c:	80 83       	st	Z, r24
	/*enable transmitter and receiver */
	UCSRB = (1<<RXEN)|(1<<TXEN)|(0x04 & Config_Ptr->char_size);
    329e:	aa e2       	ldi	r26, 0x2A	; 42
    32a0:	b0 e0       	ldi	r27, 0x00	; 0
    32a2:	eb 81       	ldd	r30, Y+3	; 0x03
    32a4:	fc 81       	ldd	r31, Y+4	; 0x04
    32a6:	80 81       	ld	r24, Z
    32a8:	84 70       	andi	r24, 0x04	; 4
    32aa:	88 61       	ori	r24, 0x18	; 24
    32ac:	8c 93       	st	X, r24
	/*select type of parity, select how many stop bit,select size of data*/
	UCSRC = (1<<URSEL) |(0x30 & Config_Ptr->parity_mode)|(0x08&Config_Ptr->stop_bit_select)|(0x06&Config_Ptr->char_size);
    32ae:	a0 e4       	ldi	r26, 0x40	; 64
    32b0:	b0 e0       	ldi	r27, 0x00	; 0
    32b2:	eb 81       	ldd	r30, Y+3	; 0x03
    32b4:	fc 81       	ldd	r31, Y+4	; 0x04
    32b6:	81 81       	ldd	r24, Z+1	; 0x01
    32b8:	80 73       	andi	r24, 0x30	; 48
    32ba:	98 2f       	mov	r25, r24
    32bc:	90 68       	ori	r25, 0x80	; 128
    32be:	eb 81       	ldd	r30, Y+3	; 0x03
    32c0:	fc 81       	ldd	r31, Y+4	; 0x04
    32c2:	82 81       	ldd	r24, Z+2	; 0x02
    32c4:	88 70       	andi	r24, 0x08	; 8
    32c6:	98 2b       	or	r25, r24
    32c8:	eb 81       	ldd	r30, Y+3	; 0x03
    32ca:	fc 81       	ldd	r31, Y+4	; 0x04
    32cc:	80 81       	ld	r24, Z
    32ce:	86 70       	andi	r24, 0x06	; 6
    32d0:	89 2b       	or	r24, r25
    32d2:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    32d4:	eb 81       	ldd	r30, Y+3	; 0x03
    32d6:	fc 81       	ldd	r31, Y+4	; 0x04
    32d8:	83 81       	ldd	r24, Z+3	; 0x03
    32da:	94 81       	ldd	r25, Z+4	; 0x04
    32dc:	a5 81       	ldd	r26, Z+5	; 0x05
    32de:	b6 81       	ldd	r27, Z+6	; 0x06
    32e0:	88 0f       	add	r24, r24
    32e2:	99 1f       	adc	r25, r25
    32e4:	aa 1f       	adc	r26, r26
    32e6:	bb 1f       	adc	r27, r27
    32e8:	88 0f       	add	r24, r24
    32ea:	99 1f       	adc	r25, r25
    32ec:	aa 1f       	adc	r26, r26
    32ee:	bb 1f       	adc	r27, r27
    32f0:	88 0f       	add	r24, r24
    32f2:	99 1f       	adc	r25, r25
    32f4:	aa 1f       	adc	r26, r26
    32f6:	bb 1f       	adc	r27, r27
    32f8:	9c 01       	movw	r18, r24
    32fa:	ad 01       	movw	r20, r26
    32fc:	80 e0       	ldi	r24, 0x00	; 0
    32fe:	92 e1       	ldi	r25, 0x12	; 18
    3300:	aa e7       	ldi	r26, 0x7A	; 122
    3302:	b0 e0       	ldi	r27, 0x00	; 0
    3304:	bc 01       	movw	r22, r24
    3306:	cd 01       	movw	r24, r26
    3308:	0e 94 2f 1a 	call	0x345e	; 0x345e <__udivmodsi4>
    330c:	da 01       	movw	r26, r20
    330e:	c9 01       	movw	r24, r18
    3310:	01 97       	sbiw	r24, 0x01	; 1
    3312:	9a 83       	std	Y+2, r25	; 0x02
    3314:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3316:	e0 e4       	ldi	r30, 0x40	; 64
    3318:	f0 e0       	ldi	r31, 0x00	; 0
    331a:	89 81       	ldd	r24, Y+1	; 0x01
    331c:	9a 81       	ldd	r25, Y+2	; 0x02
    331e:	89 2f       	mov	r24, r25
    3320:	99 27       	eor	r25, r25
    3322:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3324:	e9 e2       	ldi	r30, 0x29	; 41
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	80 83       	st	Z, r24
}
    332c:	0f 90       	pop	r0
    332e:	0f 90       	pop	r0
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	cf 91       	pop	r28
    3336:	df 91       	pop	r29
    3338:	08 95       	ret

0000333a <UART_sendByte>:


/*@description: function to send byte to the other UART device
 * param1: data the byte to be sent
 * return: none*/
void UART_sendByte(const uint8 data){
    333a:	df 93       	push	r29
    333c:	cf 93       	push	r28
    333e:	0f 92       	push	r0
    3340:	cd b7       	in	r28, 0x3d	; 61
    3342:	de b7       	in	r29, 0x3e	; 62
    3344:	89 83       	std	Y+1, r24	; 0x01
	/*UDRE flag is set when the Tx buffer (UDR) is empty and ready for
     transmitting a new byte so wait until this flag is set to one*/
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    3346:	eb e2       	ldi	r30, 0x2B	; 43
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	80 81       	ld	r24, Z
    334c:	88 2f       	mov	r24, r24
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	80 72       	andi	r24, 0x20	; 32
    3352:	90 70       	andi	r25, 0x00	; 0
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	b9 f3       	breq	.-18     	; 0x3346 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now*/
	UDR = data;
    3358:	ec e2       	ldi	r30, 0x2C	; 44
    335a:	f0 e0       	ldi	r31, 0x00	; 0
    335c:	89 81       	ldd	r24, Y+1	; 0x01
    335e:	80 83       	st	Z, r24
}
    3360:	0f 90       	pop	r0
    3362:	cf 91       	pop	r28
    3364:	df 91       	pop	r29
    3366:	08 95       	ret

00003368 <UART_recieveByte>:

/*@description: function to receive byte from the other UART device
 * param1: none
 * return: received byte from the other UART device */
uint8 UART_recieveByte(void){
    3368:	df 93       	push	r29
    336a:	cf 93       	push	r28
    336c:	cd b7       	in	r28, 0x3d	; 61
    336e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    3370:	eb e2       	ldi	r30, 0x2B	; 43
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	80 81       	ld	r24, Z
    3376:	88 23       	and	r24, r24
    3378:	dc f7       	brge	.-10     	; 0x3370 <UART_recieveByte+0x8>

	/* Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data*/
	return UDR;
    337a:	ec e2       	ldi	r30, 0x2C	; 44
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	80 81       	ld	r24, Z
}
    3380:	cf 91       	pop	r28
    3382:	df 91       	pop	r29
    3384:	08 95       	ret

00003386 <UART_sendString>:

/*@description: function to send string to the other UART device
 * param1: the string to be sent
 * return: none */
void UART_sendString(const uint8 *Str){
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	00 d0       	rcall	.+0      	; 0x338c <UART_sendString+0x6>
    338c:	0f 92       	push	r0
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	9b 83       	std	Y+3, r25	; 0x03
    3394:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3396:	19 82       	std	Y+1, r1	; 0x01
    3398:	0e c0       	rjmp	.+28     	; 0x33b6 <UART_sendString+0x30>
	/*loop to send all the string except the null we send byte by byte*/
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	28 2f       	mov	r18, r24
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	8a 81       	ldd	r24, Y+2	; 0x02
    33a2:	9b 81       	ldd	r25, Y+3	; 0x03
    33a4:	fc 01       	movw	r30, r24
    33a6:	e2 0f       	add	r30, r18
    33a8:	f3 1f       	adc	r31, r19
    33aa:	80 81       	ld	r24, Z
    33ac:	0e 94 9d 19 	call	0x333a	; 0x333a <UART_sendByte>
		i++;
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	8f 5f       	subi	r24, 0xFF	; 255
    33b4:	89 83       	std	Y+1, r24	; 0x01
 * param1: the string to be sent
 * return: none */
void UART_sendString(const uint8 *Str){
	uint8 i = 0;
	/*loop to send all the string except the null we send byte by byte*/
	while(Str[i] != '\0')
    33b6:	89 81       	ldd	r24, Y+1	; 0x01
    33b8:	28 2f       	mov	r18, r24
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	8a 81       	ldd	r24, Y+2	; 0x02
    33be:	9b 81       	ldd	r25, Y+3	; 0x03
    33c0:	fc 01       	movw	r30, r24
    33c2:	e2 0f       	add	r30, r18
    33c4:	f3 1f       	adc	r31, r19
    33c6:	80 81       	ld	r24, Z
    33c8:	88 23       	and	r24, r24
    33ca:	39 f7       	brne	.-50     	; 0x339a <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	0f 90       	pop	r0
    33d2:	cf 91       	pop	r28
    33d4:	df 91       	pop	r29
    33d6:	08 95       	ret

000033d8 <UART_receiveString>:


/*@description: function to receive string from the other UART device
 * param1: address of array of current to store the string inside it
 * return: none*/
void UART_receiveString(uint8 *Str){
    33d8:	0f 93       	push	r16
    33da:	1f 93       	push	r17
    33dc:	df 93       	push	r29
    33de:	cf 93       	push	r28
    33e0:	00 d0       	rcall	.+0      	; 0x33e2 <UART_receiveString+0xa>
    33e2:	0f 92       	push	r0
    33e4:	cd b7       	in	r28, 0x3d	; 61
    33e6:	de b7       	in	r29, 0x3e	; 62
    33e8:	9b 83       	std	Y+3, r25	; 0x03
    33ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    33ec:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
    33f0:	28 2f       	mov	r18, r24
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	8a 81       	ldd	r24, Y+2	; 0x02
    33f6:	9b 81       	ldd	r25, Y+3	; 0x03
    33f8:	8c 01       	movw	r16, r24
    33fa:	02 0f       	add	r16, r18
    33fc:	13 1f       	adc	r17, r19
    33fe:	0e 94 b4 19 	call	0x3368	; 0x3368 <UART_recieveByte>
    3402:	f8 01       	movw	r30, r16
    3404:	80 83       	st	Z, r24
    3406:	0f c0       	rjmp	.+30     	; 0x3426 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3408:	89 81       	ldd	r24, Y+1	; 0x01
    340a:	8f 5f       	subi	r24, 0xFF	; 255
    340c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    340e:	89 81       	ldd	r24, Y+1	; 0x01
    3410:	28 2f       	mov	r18, r24
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	8a 81       	ldd	r24, Y+2	; 0x02
    3416:	9b 81       	ldd	r25, Y+3	; 0x03
    3418:	8c 01       	movw	r16, r24
    341a:	02 0f       	add	r16, r18
    341c:	13 1f       	adc	r17, r19
    341e:	0e 94 b4 19 	call	0x3368	; 0x3368 <UART_recieveByte>
    3422:	f8 01       	movw	r30, r16
    3424:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3426:	89 81       	ldd	r24, Y+1	; 0x01
    3428:	28 2f       	mov	r18, r24
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	8a 81       	ldd	r24, Y+2	; 0x02
    342e:	9b 81       	ldd	r25, Y+3	; 0x03
    3430:	fc 01       	movw	r30, r24
    3432:	e2 0f       	add	r30, r18
    3434:	f3 1f       	adc	r31, r19
    3436:	80 81       	ld	r24, Z
    3438:	83 32       	cpi	r24, 0x23	; 35
    343a:	31 f7       	brne	.-52     	; 0x3408 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    343c:	89 81       	ldd	r24, Y+1	; 0x01
    343e:	28 2f       	mov	r18, r24
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	9b 81       	ldd	r25, Y+3	; 0x03
    3446:	fc 01       	movw	r30, r24
    3448:	e2 0f       	add	r30, r18
    344a:	f3 1f       	adc	r31, r19
    344c:	10 82       	st	Z, r1
}
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	cf 91       	pop	r28
    3456:	df 91       	pop	r29
    3458:	1f 91       	pop	r17
    345a:	0f 91       	pop	r16
    345c:	08 95       	ret

0000345e <__udivmodsi4>:
    345e:	a1 e2       	ldi	r26, 0x21	; 33
    3460:	1a 2e       	mov	r1, r26
    3462:	aa 1b       	sub	r26, r26
    3464:	bb 1b       	sub	r27, r27
    3466:	fd 01       	movw	r30, r26
    3468:	0d c0       	rjmp	.+26     	; 0x3484 <__udivmodsi4_ep>

0000346a <__udivmodsi4_loop>:
    346a:	aa 1f       	adc	r26, r26
    346c:	bb 1f       	adc	r27, r27
    346e:	ee 1f       	adc	r30, r30
    3470:	ff 1f       	adc	r31, r31
    3472:	a2 17       	cp	r26, r18
    3474:	b3 07       	cpc	r27, r19
    3476:	e4 07       	cpc	r30, r20
    3478:	f5 07       	cpc	r31, r21
    347a:	20 f0       	brcs	.+8      	; 0x3484 <__udivmodsi4_ep>
    347c:	a2 1b       	sub	r26, r18
    347e:	b3 0b       	sbc	r27, r19
    3480:	e4 0b       	sbc	r30, r20
    3482:	f5 0b       	sbc	r31, r21

00003484 <__udivmodsi4_ep>:
    3484:	66 1f       	adc	r22, r22
    3486:	77 1f       	adc	r23, r23
    3488:	88 1f       	adc	r24, r24
    348a:	99 1f       	adc	r25, r25
    348c:	1a 94       	dec	r1
    348e:	69 f7       	brne	.-38     	; 0x346a <__udivmodsi4_loop>
    3490:	60 95       	com	r22
    3492:	70 95       	com	r23
    3494:	80 95       	com	r24
    3496:	90 95       	com	r25
    3498:	9b 01       	movw	r18, r22
    349a:	ac 01       	movw	r20, r24
    349c:	bd 01       	movw	r22, r26
    349e:	cf 01       	movw	r24, r30
    34a0:	08 95       	ret

000034a2 <__prologue_saves__>:
    34a2:	2f 92       	push	r2
    34a4:	3f 92       	push	r3
    34a6:	4f 92       	push	r4
    34a8:	5f 92       	push	r5
    34aa:	6f 92       	push	r6
    34ac:	7f 92       	push	r7
    34ae:	8f 92       	push	r8
    34b0:	9f 92       	push	r9
    34b2:	af 92       	push	r10
    34b4:	bf 92       	push	r11
    34b6:	cf 92       	push	r12
    34b8:	df 92       	push	r13
    34ba:	ef 92       	push	r14
    34bc:	ff 92       	push	r15
    34be:	0f 93       	push	r16
    34c0:	1f 93       	push	r17
    34c2:	cf 93       	push	r28
    34c4:	df 93       	push	r29
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
    34ca:	ca 1b       	sub	r28, r26
    34cc:	db 0b       	sbc	r29, r27
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	f8 94       	cli
    34d2:	de bf       	out	0x3e, r29	; 62
    34d4:	0f be       	out	0x3f, r0	; 63
    34d6:	cd bf       	out	0x3d, r28	; 61
    34d8:	09 94       	ijmp

000034da <__epilogue_restores__>:
    34da:	2a 88       	ldd	r2, Y+18	; 0x12
    34dc:	39 88       	ldd	r3, Y+17	; 0x11
    34de:	48 88       	ldd	r4, Y+16	; 0x10
    34e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    34e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    34e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    34e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    34e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    34ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    34ec:	b9 84       	ldd	r11, Y+9	; 0x09
    34ee:	c8 84       	ldd	r12, Y+8	; 0x08
    34f0:	df 80       	ldd	r13, Y+7	; 0x07
    34f2:	ee 80       	ldd	r14, Y+6	; 0x06
    34f4:	fd 80       	ldd	r15, Y+5	; 0x05
    34f6:	0c 81       	ldd	r16, Y+4	; 0x04
    34f8:	1b 81       	ldd	r17, Y+3	; 0x03
    34fa:	aa 81       	ldd	r26, Y+2	; 0x02
    34fc:	b9 81       	ldd	r27, Y+1	; 0x01
    34fe:	ce 0f       	add	r28, r30
    3500:	d1 1d       	adc	r29, r1
    3502:	0f b6       	in	r0, 0x3f	; 63
    3504:	f8 94       	cli
    3506:	de bf       	out	0x3e, r29	; 62
    3508:	0f be       	out	0x3f, r0	; 63
    350a:	cd bf       	out	0x3d, r28	; 61
    350c:	ed 01       	movw	r28, r26
    350e:	08 95       	ret

00003510 <itoa>:
    3510:	fb 01       	movw	r30, r22
    3512:	9f 01       	movw	r18, r30
    3514:	e8 94       	clt
    3516:	42 30       	cpi	r20, 0x02	; 2
    3518:	c4 f0       	brlt	.+48     	; 0x354a <itoa+0x3a>
    351a:	45 32       	cpi	r20, 0x25	; 37
    351c:	b4 f4       	brge	.+44     	; 0x354a <itoa+0x3a>
    351e:	4a 30       	cpi	r20, 0x0A	; 10
    3520:	29 f4       	brne	.+10     	; 0x352c <itoa+0x1c>
    3522:	97 fb       	bst	r25, 7
    3524:	1e f4       	brtc	.+6      	; 0x352c <itoa+0x1c>
    3526:	90 95       	com	r25
    3528:	81 95       	neg	r24
    352a:	9f 4f       	sbci	r25, 0xFF	; 255
    352c:	64 2f       	mov	r22, r20
    352e:	77 27       	eor	r23, r23
    3530:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__udivmodhi4>
    3534:	80 5d       	subi	r24, 0xD0	; 208
    3536:	8a 33       	cpi	r24, 0x3A	; 58
    3538:	0c f0       	brlt	.+2      	; 0x353c <itoa+0x2c>
    353a:	89 5d       	subi	r24, 0xD9	; 217
    353c:	81 93       	st	Z+, r24
    353e:	cb 01       	movw	r24, r22
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	a1 f7       	brne	.-24     	; 0x352c <itoa+0x1c>
    3544:	16 f4       	brtc	.+4      	; 0x354a <itoa+0x3a>
    3546:	5d e2       	ldi	r21, 0x2D	; 45
    3548:	51 93       	st	Z+, r21
    354a:	10 82       	st	Z, r1
    354c:	c9 01       	movw	r24, r18
    354e:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <strrev>

00003552 <strrev>:
    3552:	dc 01       	movw	r26, r24
    3554:	fc 01       	movw	r30, r24
    3556:	67 2f       	mov	r22, r23
    3558:	71 91       	ld	r23, Z+
    355a:	77 23       	and	r23, r23
    355c:	e1 f7       	brne	.-8      	; 0x3556 <strrev+0x4>
    355e:	32 97       	sbiw	r30, 0x02	; 2
    3560:	04 c0       	rjmp	.+8      	; 0x356a <strrev+0x18>
    3562:	7c 91       	ld	r23, X
    3564:	6d 93       	st	X+, r22
    3566:	70 83       	st	Z, r23
    3568:	62 91       	ld	r22, -Z
    356a:	ae 17       	cp	r26, r30
    356c:	bf 07       	cpc	r27, r31
    356e:	c8 f3       	brcs	.-14     	; 0x3562 <strrev+0x10>
    3570:	08 95       	ret

00003572 <__udivmodhi4>:
    3572:	aa 1b       	sub	r26, r26
    3574:	bb 1b       	sub	r27, r27
    3576:	51 e1       	ldi	r21, 0x11	; 17
    3578:	07 c0       	rjmp	.+14     	; 0x3588 <__udivmodhi4_ep>

0000357a <__udivmodhi4_loop>:
    357a:	aa 1f       	adc	r26, r26
    357c:	bb 1f       	adc	r27, r27
    357e:	a6 17       	cp	r26, r22
    3580:	b7 07       	cpc	r27, r23
    3582:	10 f0       	brcs	.+4      	; 0x3588 <__udivmodhi4_ep>
    3584:	a6 1b       	sub	r26, r22
    3586:	b7 0b       	sbc	r27, r23

00003588 <__udivmodhi4_ep>:
    3588:	88 1f       	adc	r24, r24
    358a:	99 1f       	adc	r25, r25
    358c:	5a 95       	dec	r21
    358e:	a9 f7       	brne	.-22     	; 0x357a <__udivmodhi4_loop>
    3590:	80 95       	com	r24
    3592:	90 95       	com	r25
    3594:	bc 01       	movw	r22, r24
    3596:	cd 01       	movw	r24, r26
    3598:	08 95       	ret

0000359a <_exit>:
    359a:	f8 94       	cli

0000359c <__stop_program>:
    359c:	ff cf       	rjmp	.-2      	; 0x359c <__stop_program>
